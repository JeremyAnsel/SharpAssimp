{
  "api/SharpAssimp.Animation.html": {
    "href": "api/SharpAssimp.Animation.html",
    "title": "Class Animation",
    "summary": "Class Animation An animation consists of keyframe data for a number of nodes. For each node affected by the animation, a separate series of data is given. Inheritance object Animation Implements IMarshalable<Animation, AiAnimation> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Animation : IMarshalable<Animation, AiAnimation> Constructors | Edit this page View Source Animation() Constructs a new instance of the Animation class. Declaration public Animation() Properties | Edit this page View Source DurationInTicks Gets or sets the duration of the animation in number of ticks. Declaration public double DurationInTicks { get; set; } Property Value Type Description double | Edit this page View Source HasMeshAnimations Gets if the animation has mesh animations. Declaration public bool HasMeshAnimations { get; } Property Value Type Description bool | Edit this page View Source HasNodeAnimations Gets if the animation has node animation channels. Declaration public bool HasNodeAnimations { get; } Property Value Type Description bool | Edit this page View Source MeshAnimationChannelCount Gets the number of mesh animation channels. Declaration public int MeshAnimationChannelCount { get; } Property Value Type Description int | Edit this page View Source MeshAnimationChannels Gets the mesh animation channels. Declaration public List<MeshAnimationChannel> MeshAnimationChannels { get; } Property Value Type Description List<MeshAnimationChannel> | Edit this page View Source MeshMorphAnimationChannelCount Gets the number of mesh morph animation channels. Declaration public int MeshMorphAnimationChannelCount { get; } Property Value Type Description int | Edit this page View Source MeshMorphAnimationChannels Gets the mesh morph animation channels. Declaration public List<MeshMorphAnimationChannel> MeshMorphAnimationChannels { get; } Property Value Type Description List<MeshMorphAnimationChannel> | Edit this page View Source Name Gets or sets the name of the animation. If the modeling package the data was exported from only supports a single animation channel, this name is usually empty. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source NodeAnimationChannelCount Gets the number of node animation channels where each channel affects a single node. Declaration public int NodeAnimationChannelCount { get; } Property Value Type Description int | Edit this page View Source NodeAnimationChannels Gets the node animation channels. Declaration public List<NodeAnimationChannel> NodeAnimationChannels { get; } Property Value Type Description List<NodeAnimationChannel> | Edit this page View Source TicksPerSecond Gets or sets the number of ticks per second. It may be zero if it is not specified in the imported file. Declaration public double TicksPerSecond { get; set; } Property Value Type Description double Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.AnimationBehaviour.html": {
    "href": "api/SharpAssimp.AnimationBehaviour.html",
    "title": "Enum AnimationBehaviour",
    "summary": "Enum AnimationBehaviour Defines an animation channel behaves outside the defined time range. This corresponds to the prestate and poststates of the animation node. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum AnimationBehaviour Fields Name Description Constant The nearest key value is used without interpolation. Default The value from the default node transformation is taken. Linear The value of the nearest two keys is linearly extrapolated for the current time value. Repeat The animation is repeated. If the animation key goes from n to m and the current time is t, use the value at (t - n ) % (|m-n|)."
  },
  "api/SharpAssimp.AnimationInterpolation.html": {
    "href": "api/SharpAssimp.AnimationInterpolation.html",
    "title": "Enum AnimationInterpolation",
    "summary": "Enum AnimationInterpolation Defines the type of interpolation to use. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum AnimationInterpolation Fields Name Description CubicSpline Cubic spline interpolation. Linear Linear interpolation. SphericalLinear Spherical linear interpolation. Step Step interpolation."
  },
  "api/SharpAssimp.AssimpContext.html": {
    "href": "api/SharpAssimp.AssimpContext.html",
    "title": "Class AssimpContext",
    "summary": "Class AssimpContext Represents an Assimp Import/Export context that load or save models using the unmanaged library. Additionally, conversion functionality is offered to bypass loading model data into managed memory. Inheritance object AssimpContext Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class AssimpContext : IDisposable Constructors | Edit this page View Source AssimpContext() Constructs a new instance of the AssimpContext class. Declaration public AssimpContext() Properties | Edit this page View Source IsDisposed Gets if the context has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source PropertyConfigurations Gets the property configurations set to this context. This is only used during import. Declaration public Dictionary<string, PropertyConfig> PropertyConfigurations { get; } Property Value Type Description Dictionary<string, PropertyConfig> | Edit this page View Source Scale Gets or sets the uniform scale for the model. This is multiplied with the existing root node's transform. This is only used during import. Declaration public float Scale { get; set; } Property Value Type Description float | Edit this page View Source UsingCustomIOSystem Gets whether this context is using a user-defined IO system for file handling. Declaration public bool UsingCustomIOSystem { get; } Property Value Type Description bool | Edit this page View Source XAxisRotation Gets or sets the model's rotation about the X-Axis, in degrees. This is multiplied with the existing root node's transform. This is only used during import. Declaration public float XAxisRotation { get; set; } Property Value Type Description float | Edit this page View Source YAxisRotation Gets or sets the model's rotation abut the Y-Axis, in degrees. This is multiplied with the existing root node's transform. This is only used during import. Declaration public float YAxisRotation { get; set; } Property Value Type Description float | Edit this page View Source ZAxisRotation Gets or sets the model's rotation about the Z-Axis, in degrees. This is multiplied with the existing root node's transform. This is only used during import. Declaration public float ZAxisRotation { get; set; } Property Value Type Description float Methods | Edit this page View Source ContainsConfig(string) Checks if the context has a config set by the specified name. Declaration public bool ContainsConfig(string configName) Parameters Type Name Description string configName Name of the config property Returns Type Description bool True if the config is present, false otherwise | Edit this page View Source ConvertFromFileToBlob(string, PostProcessSteps, string, PostProcessSteps) Converts the model contained in the file to the specified format and save it to a data blob. Declaration public ExportDataBlob? ConvertFromFileToBlob(string inputFilename, PostProcessSteps importProcessSteps, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description string inputFilename Input file name to import PostProcessSteps importProcessSteps Post processing steps used for the import string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromFileToBlob(string, string) Converts the model contained in the file to the specified format and save it to a data blob. Declaration public ExportDataBlob? ConvertFromFileToBlob(string inputFilename, string exportFormatId) Parameters Type Name Description string inputFilename Input file name to import string exportFormatId Format id that specifies what format to export to Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromFileToBlob(string, string, PostProcessSteps) Converts the model contained in the file to the specified format and save it to a data blob. Declaration public ExportDataBlob? ConvertFromFileToBlob(string inputFilename, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description string inputFilename Input file name to import string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromFileToFile(string, PostProcessSteps, string, string, PostProcessSteps) Converts the model contained in the file to the specified format and save it to a file. Declaration public bool ConvertFromFileToFile(string inputFilename, PostProcessSteps importProcessSteps, string outputFilename, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description string inputFilename Input file name to import PostProcessSteps importProcessSteps Post processing steps used for the import string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromFileToFile(string, string, string) Converts the model contained in the file to the specified format and save it to a file. Declaration public bool ConvertFromFileToFile(string inputFilename, string outputFilename, string exportFormatId) Parameters Type Name Description string inputFilename Input file name to import string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromFileToFile(string, string, string, PostProcessSteps) Converts the model contained in the file to the specified format and save it to a file. Declaration public bool ConvertFromFileToFile(string inputFilename, string outputFilename, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description string inputFilename Input file name to import string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToBlob(Stream, string, PostProcessSteps, string, PostProcessSteps) Converts the model contained in the stream to the specified format and save it to a data blob. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToBlob\" family of functions. Declaration public ExportDataBlob? ConvertFromStreamToBlob(Stream inputStream, string importFormatHint, PostProcessSteps importProcessSteps, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful PostProcessSteps importProcessSteps Post processing steps used for import string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToBlob(Stream, string, string) Converts the model contained in the stream to the specified format and save it to a data blob. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToBlob\" family of functions. Declaration public ExportDataBlob? ConvertFromStreamToBlob(Stream inputStream, string importFormatHint, string exportFormatId) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful string exportFormatId Format id that specifies what format to export to Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToBlob(Stream, string, string, PostProcessSteps) Converts the model contained in the stream to the specified format and save it to a data blob. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToBlob\" family of functions. Declaration public ExportDataBlob? ConvertFromStreamToBlob(Stream inputStream, string importFormatHint, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description ExportDataBlob Data blob containing the exported scene in a binary form Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToFile(Stream, string, PostProcessSteps, string, string, PostProcessSteps) Converts the model contained in the stream to the specified format and save it to a file. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToFile\" family of functions. Declaration public bool ConvertFromStreamToFile(Stream inputStream, string importFormatHint, PostProcessSteps importProcessSteps, string outputFilename, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful PostProcessSteps importProcessSteps Post processing steps used for import string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToFile(Stream, string, string, string) Converts the model contained in the stream to the specified format and save it to a file. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToFile\" family of functions. Declaration public bool ConvertFromStreamToFile(Stream inputStream, string importFormatHint, string outputFilename, string exportFormatId) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ConvertFromStreamToFile(Stream, string, string, string, PostProcessSteps) Converts the model contained in the stream to the specified format and save it to a file. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ConvertFromFileToFile\" family of functions. Declaration public bool ConvertFromStreamToFile(Stream inputStream, string importFormatHint, string outputFilename, string exportFormatId, PostProcessSteps exportProcessSteps) Parameters Type Name Description Stream inputStream Stream to read from string importFormatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful string outputFilename Output file name to export to string exportFormatId Format id that specifies what format to export to PostProcessSteps exportProcessSteps Pre processing steps used for the export Returns Type Description bool True if the conversion was successful or not, false otherwise. Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source Dispose() Disposes of resources held by the context. These include IO systems still attached. Declaration public void Dispose() | Edit this page View Source ExportFile(Scene, string, string) Exports a scene to the specified format and writes it to a file. Declaration public bool ExportFile(Scene scene, string fileName, string exportFormatId) Parameters Type Name Description Scene scene Scene containing the model to export. string fileName Path to the file. string exportFormatId FormatID representing the format to export to. Returns Type Description bool True if the scene was exported successfully, false otherwise. Exceptions Type Condition ArgumentNullException Thrown if the scene is null. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ExportFile(Scene, string, string, PostProcessSteps) Exports a scene to the specified format and writes it to a file. Declaration public bool ExportFile(Scene scene, string fileName, string exportFormatId, PostProcessSteps preProcessing) Parameters Type Name Description Scene scene Scene containing the model to export. string fileName Path to the file. string exportFormatId FormatID representing the format to export to. PostProcessSteps preProcessing Preprocessing flags to apply to the model before it is exported. Returns Type Description bool True if the scene was exported successfully, false otherwise. Exceptions Type Condition ArgumentNullException Thrown if the scene is null. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ExportToBlob(Scene, string) Exports a scene to the specified format and writes it to a data blob. Declaration public ExportDataBlob? ExportToBlob(Scene scene, string exportFormatId) Parameters Type Name Description Scene scene Scene containing the model to export. string exportFormatId FormatID representing the format to export to. Returns Type Description ExportDataBlob The resulting data blob, or null if the export failed. Exceptions Type Condition ArgumentNullException Thrown if the scene is null. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ExportToBlob(Scene, string, PostProcessSteps) Exports a scene to the specified format and writes it to a data blob. Declaration public ExportDataBlob? ExportToBlob(Scene scene, string exportFormatId, PostProcessSteps preProcessing) Parameters Type Name Description Scene scene Scene containing the model to export. string exportFormatId FormatID representing the format to export to. PostProcessSteps preProcessing Preprocessing flags to apply to the model before it is exported. Returns Type Description ExportDataBlob The resulting data blob, or null if the export failed. Exceptions Type Condition ArgumentNullException Thrown if the scene is null. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source GetImporterDescriptionFor(string) Gets an importer description for the specified file extension. If no importers support it, null is returned. Multiple importers may support the file extension, they are called in the order that they were registered. Declaration public ImporterDescription? GetImporterDescriptionFor(string fileExtension) Parameters Type Name Description string fileExtension File extension to query importer support for. Returns Type Description ImporterDescription Importer description or null if it does not exist. | Edit this page View Source GetImporterDescriptions() Gets descriptions for each importer that assimp has registered. Declaration public ImporterDescription[] GetImporterDescriptions() Returns Type Description ImporterDescription[] Descriptions of supported importers. | Edit this page View Source GetSupportedExportFormats() Gets the model formats that are supported for export by Assimp. Declaration public ExportFormatDescription[] GetSupportedExportFormats() Returns Type Description ExportFormatDescription[] Export formats supported | Edit this page View Source GetSupportedImportFormats() Gets the model formats that are supported for import by Assimp. Declaration public string[] GetSupportedImportFormats() Returns Type Description string[] Import formats supported | Edit this page View Source ImportFile(string) Imports a model from the specified file without running any post-process steps. The importer sets configurations and loads the model into managed memory, releasing the unmanaged memory used by Assimp. Declaration public Scene ImportFile(string file) Parameters Type Name Description string file Full path to the file Returns Type Description Scene The imported scene Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ImportFile(string, PostProcessSteps) Imports a model from the specified file. The importer sets configurations and loads the model into managed memory, releasing the unmanaged memory used by Assimp. Declaration public Scene ImportFile(string file, PostProcessSteps postProcessFlags) Parameters Type Name Description string file Full path to the file PostProcessSteps postProcessFlags Post processing flags, if any Returns Type Description Scene The imported scene Exceptions Type Condition AssimpException Thrown if there was a general error in importing the model. FileNotFoundException Thrown if the file could not be located. ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ImportFileFromStream(Stream, PostProcessSteps, string?) Imports a model from the stream. The importer sets configurations and loads the model into managed memory, releasing the unmanaged memory used by Assimp. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ImportFile\" family of functions. Declaration public Scene ImportFileFromStream(Stream stream, PostProcessSteps postProcessFlags, string? formatHint = null) Parameters Type Name Description Stream stream Stream to read from PostProcessSteps postProcessFlags Post processing flags, if any string formatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful. Returns Type Description Scene The imported scene Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source ImportFileFromStream(Stream, string?) Imports a model from the stream without running any post-process steps. The importer sets configurations and loads the model into managed memory, releasing the unmanaged memory used by Assimp. It is up to the caller to dispose of the stream. If the format is distributed across multiple files/streams, set a custom IOSystem and use the \"ImportFile\" family of functions. Declaration public Scene ImportFileFromStream(Stream stream, string? formatHint = null) Parameters Type Name Description Stream stream Stream to read from string formatHint Optional format extension to serve as a hint to Assimp to choose which importer to use. If null or empty, the system will try to detect what importer to use from the data which may or may not be successful. Returns Type Description Scene The imported scene Exceptions Type Condition AssimpException Thrown if the stream is not valid (null or write-only). ObjectDisposedException Thrown if the context has already been disposed of. | Edit this page View Source IsExportFormatSupported(string) Checks if the format extension (e.g. \".dae\" or \".obj\") is supported for export. Declaration public bool IsExportFormatSupported(string format) Parameters Type Name Description string format Model format Returns Type Description bool True if the format is supported, false otherwise | Edit this page View Source IsImportFormatSupported(string) Checks if the format extension (e.g. \".dae\" or \".obj\") is supported for import. Declaration public static bool IsImportFormatSupported(string format) Parameters Type Name Description string format Model format Returns Type Description bool True if the format is supported, false otherwise | Edit this page View Source RemoveConfig(string) Removes a set configuration property by name. Declaration public void RemoveConfig(string configName) Parameters Type Name Description string configName Name of the config property | Edit this page View Source RemoveConfigs() Removes all configuration properties from the context. Declaration public void RemoveConfigs() | Edit this page View Source RemoveIOSystem() Removes the currently set custom file system implementation from the importer. Declaration public void RemoveIOSystem() | Edit this page View Source SetConfig(PropertyConfig) Sets a configuration property to the context. This is only used during import. Declaration public void SetConfig(PropertyConfig config) Parameters Type Name Description PropertyConfig config Config to set | Edit this page View Source SetIOSystem(IOSystem?) Sets a custom file system implementation that is used by this importer. If it is null, then the default assimp file system is used instead. Declaration public void SetIOSystem(IOSystem? ioSystem) Parameters Type Name Description IOSystem ioSystem Custom file system implementation Implements IDisposable"
  },
  "api/SharpAssimp.AssimpException.html": {
    "href": "api/SharpAssimp.AssimpException.html",
    "title": "Class AssimpException",
    "summary": "Class AssimpException AssimpNet general exception. Inheritance object Exception AssimpException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public class AssimpException : Exception, ISerializable Constructors | Edit this page View Source AssimpException() Initializes a new instance of the AssimpException class. Declaration public AssimpException() | Edit this page View Source AssimpException(string) Initializes a new instance of the AssimpException class. Declaration public AssimpException(string msg) Parameters Type Name Description string msg The error message. | Edit this page View Source AssimpException(string, Exception) Initializes a new instance of the AssimpException class. Declaration public AssimpException(string msg, Exception innerException) Parameters Type Name Description string msg The error message Exception innerException The inner exception. | Edit this page View Source AssimpException(string, string) Initializes a new instance of the AssimpException class. Declaration public AssimpException(string paramName, string msg) Parameters Type Name Description string paramName Name of the param. string msg The error message. Implements ISerializable"
  },
  "api/SharpAssimp.BlendMode.html": {
    "href": "api/SharpAssimp.BlendMode.html",
    "title": "Enum BlendMode",
    "summary": "Enum BlendMode Defines alpha blending flags, how the final color value of a pixel is computed, based on the following equation: sourceColor * sourceBlend + destColor * destBlend Where the destColor is the previous color in the frame buffer and sourceColor is the material color before the transparency calculation. This corresponds to the AI_MATKEY_BLEND_FUNC property. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum BlendMode Fields Name Description Additive Additive blending: sourcecolor * 1 + destColor * 1. Default Default blending: sourceColor * sourceAlpha + destColor * (1 - sourceAlpha)"
  },
  "api/SharpAssimp.Bone.html": {
    "href": "api/SharpAssimp.Bone.html",
    "title": "Class Bone",
    "summary": "Class Bone Represents a single bone of a mesh. A bone has a name which allows it to be found in the frame hierarchy and by which it can be addressed by animations. In addition it has a number of influences on vertices and a matrix relating the mesh position to the position of the bone at the time of binding. Inheritance object Bone Implements IMarshalable<Bone, AiBone> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Bone : IMarshalable<Bone, AiBone> Constructors | Edit this page View Source Bone() Constructs a new instance of the Bone class. Declaration public Bone() | Edit this page View Source Bone(string, Matrix3x3, VertexWeight[]) Constructs a new instance of the Bone class. Declaration public Bone(string name, Matrix3x3 offsetMatrix, VertexWeight[] weights) Parameters Type Name Description string name Name of the bone Matrix3x3 offsetMatrix Bone's offset matrix VertexWeight[] weights Vertex weights Properties | Edit this page View Source HasVertexWeights Gets if the bone has vertex weights - this should always be true. Declaration public bool HasVertexWeights { get; } Property Value Type Description bool | Edit this page View Source Name Gets or sets the name of the bone. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source OffsetMatrix Gets or sets the matrix that transforms from bone space to mesh space in bind pose. This matrix describes the position of the mesh in the local space of this bone when the skeleton was bound. Thus it can be used directly to determine a desired vertex position, given the world-space transform of the bone when animated, and the position of the vertex in mesh space. It is sometimes called an inverse-bind matrix or inverse-bind pose matrix. Declaration public Matrix4x4 OffsetMatrix { get; set; } Property Value Type Description Matrix4x4 | Edit this page View Source VertexWeightCount Gets the number of vertex influences the bone contains. Declaration public int VertexWeightCount { get; } Property Value Type Description int | Edit this page View Source VertexWeights Gets the influence weights of this bone, by vertex index. Declaration public List<VertexWeight> VertexWeights { get; } Property Value Type Description List<VertexWeight> Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.BoundingBox.html": {
    "href": "api/SharpAssimp.BoundingBox.html",
    "title": "Struct BoundingBox",
    "summary": "Struct BoundingBox Represents an axis-aligned bounding box Implements IEquatable<BoundingBox> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct BoundingBox : IEquatable<BoundingBox> Constructors | Edit this page View Source BoundingBox(Vector3, Vector3) Represents an axis-aligned bounding box Declaration public BoundingBox(Vector3 Min, Vector3 Max) Parameters Type Name Description Vector3 Min Minimum point of the bounding box. Vector3 Max Maximum point of the bounding box. Properties | Edit this page View Source Max Maximum point of the bounding box. Declaration public Vector3 Max { readonly get; set; } Property Value Type Description Vector3 | Edit this page View Source Min Minimum point of the bounding box. Declaration public Vector3 Min { readonly get; set; } Property Value Type Description Vector3 Implements IEquatable<T>"
  },
  "api/SharpAssimp.Camera.html": {
    "href": "api/SharpAssimp.Camera.html",
    "title": "Class Camera",
    "summary": "Class Camera Describes a right-handed camera in the scene. An important aspect is that the camera itself is also part of the scenegraph, meaning any values such as the direction vector are not absolute, they can be relative to the coordinate system defined by the node which corresponds to the camera. This allows for camera animations. Inheritance object Camera Implements IMarshalable<Camera, AiCamera> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Camera : IMarshalable<Camera, AiCamera> Constructors | Edit this page View Source Camera() Constructs a new instance of the Camera class. Declaration public Camera() Properties | Edit this page View Source AspectRatio Gets or sets the screen aspect ratio. This is the ratio between the width and height of the screen. Typical values are 4/3, 1/2, or 1/1. This value is 0 if the aspect ratio is not defined in the source file. The default value is zero. Declaration public float AspectRatio { get; set; } Property Value Type Description float | Edit this page View Source ClipPlaneFar Gets or sets the distance of the far clipping plane from the camera. The far clippling plane must be further than the near clippling plane. The default value is 1000.0f. The ratio between the near and far plane should not be too large (between 1000 - 10000 should be ok) to avoid floating-point inaccuracies which can lead to z-fighting. Declaration public float ClipPlaneFar { get; set; } Property Value Type Description float | Edit this page View Source ClipPlaneNear Gets or sets the distance of the near clipping plane from the camera. The value may not be 0.0f for arithmetic reasons to prevent a division through zero. The default value is 0.1f; Declaration public float ClipPlaneNear { get; set; } Property Value Type Description float | Edit this page View Source Direction Gets or sets the viewing direction of the camera, relative to the coordinate space defined by the corresponding node. The default value is 0|0|1. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Edit this page View Source FieldOfview Gets or sets the half horizontal field of view angle, in radians. The FoV angle is the angle between the center line of the screen and the left or right border. The default value is 1/4PI. Declaration public float FieldOfview { get; set; } Property Value Type Description float | Edit this page View Source Name Gets or sets the name of the camera. This corresponds to a node in the scenegraph with the same name. This node specifies the position of the camera in the scene hierarchy and can be animated. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Position Gets or sets the position of the camera relative to the coordinate space defined by the corresponding node. THe default value is 0|0|0. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source Up Gets or sets the 'up' vector of the camera, relative to the coordinate space defined by the corresponding node. The 'right' vector of the camera is the cross product of the up and direction vectors. The default value is 0|1|0. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 | Edit this page View Source ViewMatrix Gets a right-handed view matrix. Declaration public Matrix4x4 ViewMatrix { get; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.CompileFlags.html": {
    "href": "api/SharpAssimp.CompileFlags.html",
    "title": "Enum CompileFlags",
    "summary": "Enum CompileFlags Enumerates how the native Assimp DLL was compiled Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum CompileFlags Fields Name Description Debug Assimp was compiled as a debug build NoBoost Assimp was compiled with the boost work around. STLport Assimp was compiled against STLport Shared Assimp compiled as a shared object (Windows: DLL); SingleThreaded Assimp was compiled built to run single threaded."
  },
  "api/SharpAssimp.Configs.ACEvaluateSubdivisionConfig.html": {
    "href": "api/SharpAssimp.Configs.ACEvaluateSubdivisionConfig.html",
    "title": "Class ACEvaluateSubdivisionConfig",
    "summary": "Class ACEvaluateSubdivisionConfig Configures whether the AC loader evaluates subdivision surfaces (indicated by the presence of the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using the standard Catmull-Clark algorithm. The default value is true. Inheritance object PropertyConfig BooleanPropertyConfig ACEvaluateSubdivisionConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ACEvaluateSubdivisionConfig : BooleanPropertyConfig Constructors | Edit this page View Source ACEvaluateSubdivisionConfig(bool) Constructs a new ACEvaluateSubdivisionConfig. Declaration public ACEvaluateSubdivisionConfig(bool evaluateSubdivision) Parameters Type Name Description bool evaluateSubdivision True if the AC loader should evaluate subdivisions, false otherwise. Properties | Edit this page View Source ACEvaluateSubdivisionConfigName Gets the string name used by ACEvaluateSubdivisionConfig. Declaration public static string ACEvaluateSubdivisionConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.ACSeparateBackfaceCullConfig.html": {
    "href": "api/SharpAssimp.Configs.ACSeparateBackfaceCullConfig.html",
    "title": "Class ACSeparateBackfaceCullConfig",
    "summary": "Class ACSeparateBackfaceCullConfig Configures the AC loader to collect all surfaces which have the \"Backface cull\" flag set in separate meshes. The default value is true. Inheritance object PropertyConfig BooleanPropertyConfig ACSeparateBackfaceCullConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ACSeparateBackfaceCullConfig : BooleanPropertyConfig Constructors | Edit this page View Source ACSeparateBackfaceCullConfig(bool) Constructs a new ACSeparateBackfaceCullConfig. Declaration public ACSeparateBackfaceCullConfig(bool separateBackfaces) Parameters Type Name Description bool separateBackfaces True if all surfaces that have the \"backface cull\" flag set should be collected in separate meshes, false otherwise. Properties | Edit this page View Source ACSeparateBackfaceCullConfigName Gets the string name used by ACSeparateBackfaceCullConfig. Declaration public static string ACSeparateBackfaceCullConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.ASEReconstructNormalsConfig.html": {
    "href": "api/SharpAssimp.Configs.ASEReconstructNormalsConfig.html",
    "title": "Class ASEReconstructNormalsConfig",
    "summary": "Class ASEReconstructNormalsConfig Configures the ASE loader to always reconstruct normal vectors basing on the smoothing groups loaded from the file. Some ASE files carry invalid normals, others don't. The default value is true. Inheritance object PropertyConfig BooleanPropertyConfig ASEReconstructNormalsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ASEReconstructNormalsConfig : BooleanPropertyConfig Constructors | Edit this page View Source ASEReconstructNormalsConfig(bool) Constructs a new ASEReconstructNormalsConfig. Declaration public ASEReconstructNormalsConfig(bool reconstructNormals) Parameters Type Name Description bool reconstructNormals True if normals should be re-computed, false otherwise. Properties | Edit this page View Source ASEReconstructNormalsConfigName Gets the string name used by ASEReconstructNormalsConfig. Declaration public static string ASEReconstructNormalsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.AnimationAccuracyConfig.html": {
    "href": "api/SharpAssimp.Configs.AnimationAccuracyConfig.html",
    "title": "Class AnimationAccuracyConfig",
    "summary": "Class AnimationAccuracyConfig Configuration for the FindInvalidData step that specifies the floating point accuracy for animation values, specifically the episilon during comparisons. The default value is 0.0f. Inheritance object PropertyConfig FloatPropertyConfig AnimationAccuracyConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class AnimationAccuracyConfig : FloatPropertyConfig Constructors | Edit this page View Source AnimationAccuracyConfig(float) Constructs a new AnimationAccuracyConfig. Declaration public AnimationAccuracyConfig(float episilon) Parameters Type Name Description float episilon Episilon for animation value comparisons. Properties | Edit this page View Source AnimationAccuracyConfigName Gets the string name used by AnimationAccuracyConfig. Declaration public static string AnimationAccuracyConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.AppScaleConfig.html": {
    "href": "api/SharpAssimp.Configs.AppScaleConfig.html",
    "title": "Class AppScaleConfig",
    "summary": "Class AppScaleConfig Applies an application-specific scaling to the GlobalScaleConfig to allow for backwards compatibility. Default is 1.0. Inheritance object PropertyConfig FloatPropertyConfig AppScaleConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class AppScaleConfig : FloatPropertyConfig Constructors | Edit this page View Source AppScaleConfig(float) Constructs a new AppScaleConfig. Declaration public AppScaleConfig(float appScale) Parameters Type Name Description float appScale Value to scale the global scale by. Properties | Edit this page View Source AppScaleConfigName Gets the string name used by AppScaleConfig. Declaration public static string AppScaleConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.BooleanPropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.BooleanPropertyConfig.html",
    "title": "Class BooleanPropertyConfig",
    "summary": "Class BooleanPropertyConfig Describes a boolean configuration property. Inheritance object PropertyConfig BooleanPropertyConfig ACEvaluateSubdivisionConfig ACSeparateBackfaceCullConfig ASEReconstructNormalsConfig ColladaIgnoreUpDirectionConfig ColladaUseColladaNamesConfig DeboneAllOrNoneConfig ExportPointCloudsConfig FBXConvertToMetersConfig FBXImportAllGeometryLayersConfig FBXImportAllMaterialsConfig FBXImportAnimationsConfig FBXImportCamerasConfig FBXImportEmbeddedTexturesConfig FBXImportEmbeddedTexturesLegacyNamingConfig FBXImportLightsConfig FBXImportMaterialsConfig FBXOptimizeEmptyAnimationCurvesConfig FBXPreservePivotsConfig FBXStrictModeConfig FavorSpeedConfig IFCSkipSpaceRepresentationsConfig IFCUseCustomTriangulationConfig IgnoreTextureCoordinatesConfig KeepSceneHierarchyConfig LWOImportOneLayerConfig MD3HandleMultiPartConfig MD5NoAnimationAutoLoadConfig MeasureTimeConfig NoSkeletonMeshesConfig NormalizeVertexComponentsConfig OgreTextureTypeFromFilenameConfig RemoveDegeneratePrimitivesCheckAreaConfig RemoveDegeneratePrimitivesConfig RemoveEmptyBonesConfig SmdLoadAnimationListConfig TerragenComputeTexCoordsConfig UnrealHandleFlagsConfig XFileUseDoublesConfig Inherited Members PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public class BooleanPropertyConfig : PropertyConfig Constructors | Edit this page View Source BooleanPropertyConfig(string, bool) Constructs a new BooleanPropertyConfig. Declaration public BooleanPropertyConfig(string name, bool value) Parameters Type Name Description string name Name of the property bool value Property value | Edit this page View Source BooleanPropertyConfig(string, bool, bool) Constructs a new BooleanPropertyConfig with a default value. Declaration public BooleanPropertyConfig(string name, bool value, bool defaultValue) Parameters Type Name Description string name Name of the property bool value Property value bool defaultValue The default property value Properties | Edit this page View Source DefaultValue Gets the default property value. Declaration public bool DefaultValue { get; } Property Value Type Description bool | Edit this page View Source Value Gets the property value. Declaration public bool Value { get; set; } Property Value Type Description bool Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides PropertyConfig.OnApplyValue(nint) | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public override void SetDefaultValue() Overrides PropertyConfig.SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.ColladaIgnoreUpDirectionConfig.html": {
    "href": "api/SharpAssimp.Configs.ColladaIgnoreUpDirectionConfig.html",
    "title": "Class ColladaIgnoreUpDirectionConfig",
    "summary": "Class ColladaIgnoreUpDirectionConfig Specifies whether the collada loader will ignore the up direction. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig ColladaIgnoreUpDirectionConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ColladaIgnoreUpDirectionConfig : BooleanPropertyConfig Constructors | Edit this page View Source ColladaIgnoreUpDirectionConfig(bool) Constructs a new ColladaIgnoreUpDirectionConfig. Declaration public ColladaIgnoreUpDirectionConfig(bool ignoreUpDirection) Parameters Type Name Description bool ignoreUpDirection True if the loader should ignore the up direction, false otherwise. Properties | Edit this page View Source ColladaIgnoreUpDirectionConfigName Gets the string name used by ColladaIgnoreUpDirectionConfig. Declaration public static string ColladaIgnoreUpDirectionConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.ColladaUseColladaNamesConfig.html": {
    "href": "api/SharpAssimp.Configs.ColladaUseColladaNamesConfig.html",
    "title": "Class ColladaUseColladaNamesConfig",
    "summary": "Class ColladaUseColladaNamesConfig Specifies whether the Collada loader should use Collada names as node names. If this property is set to true, the Collada names will be used as the node name. The behavior is to use the id tag (resp. sid tag, if no id tag is present) instead. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig ColladaUseColladaNamesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ColladaUseColladaNamesConfig : BooleanPropertyConfig Constructors | Edit this page View Source ColladaUseColladaNamesConfig(bool) Constructs a new ColladaUseColladaNamesConfig. Declaration public ColladaUseColladaNamesConfig(bool useColladaNames) Parameters Type Name Description bool useColladaNames True if collada names should be used as node names, false otherwise. Properties | Edit this page View Source ColladaUseColladaNamesConfigName Gets the string name used by ColladaUseColladaNamesConfig. Declaration public static string ColladaUseColladaNamesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.DeboneAllOrNoneConfig.html": {
    "href": "api/SharpAssimp.Configs.DeboneAllOrNoneConfig.html",
    "title": "Class DeboneAllOrNoneConfig",
    "summary": "Class DeboneAllOrNoneConfig Configuration that requires all bones to qualify for deboning before any are removed. Inheritance object PropertyConfig BooleanPropertyConfig DeboneAllOrNoneConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class DeboneAllOrNoneConfig : BooleanPropertyConfig Constructors | Edit this page View Source DeboneAllOrNoneConfig(bool) Constructs a new DeboneAllOrNoneConfig. Declaration public DeboneAllOrNoneConfig(bool allOrNone) Parameters Type Name Description bool allOrNone True if all are required, false if none need to qualify. Properties | Edit this page View Source DeboneAllOrNoneConfigName Gets the string name used by DeboneAllOrNoneConfig. Declaration public static string DeboneAllOrNoneConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.DeboneThresholdConfig.html": {
    "href": "api/SharpAssimp.Configs.DeboneThresholdConfig.html",
    "title": "Class DeboneThresholdConfig",
    "summary": "Class DeboneThresholdConfig Configures the Debone threshold that is used to determine what bones are removed. Inheritance object PropertyConfig FloatPropertyConfig DeboneThresholdConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class DeboneThresholdConfig : FloatPropertyConfig Constructors | Edit this page View Source DeboneThresholdConfig(float) Constructs a new DeboneThresholdConfig. Declaration public DeboneThresholdConfig(float threshold) Parameters Type Name Description float threshold The debone threshold. Properties | Edit this page View Source DeboneThresholdConfigName Gets the string name used by DeboneThresholdConfig. Declaration public static string DeboneThresholdConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.ExportPointCloudsConfig.html": {
    "href": "api/SharpAssimp.Configs.ExportPointCloudsConfig.html",
    "title": "Class ExportPointCloudsConfig",
    "summary": "Class ExportPointCloudsConfig Specifies if the export process should disable a validation step that would remove data that does not contain faces. This will enable point cloud data to be exported, since the 3D data is a collection of vertices without face data. Inheritance object PropertyConfig BooleanPropertyConfig ExportPointCloudsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class ExportPointCloudsConfig : BooleanPropertyConfig Constructors | Edit this page View Source ExportPointCloudsConfig(bool) Constructs a new ExportPointCloudConfig. Declaration public ExportPointCloudsConfig(bool exportPointCloud) Parameters Type Name Description bool exportPointCloud True if the exporter should treat vertices not grouped in faces as point clouds, false otherwise. Properties | Edit this page View Source ExportPointCloudsConfigName Gets the string name used by ExportPointCloudsConfig. Declaration public static string ExportPointCloudsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXConvertToMetersConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXConvertToMetersConfig.html",
    "title": "Class FBXConvertToMetersConfig",
    "summary": "Class FBXConvertToMetersConfig Specifies whether the importer shall convert the unit from centimeter (cm) to meter (m). Default value is false. Inheritance object PropertyConfig BooleanPropertyConfig FBXConvertToMetersConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXConvertToMetersConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXConvertToMetersConfig(bool) Constructs a new FBXConvertToMetersConfig. Declaration public FBXConvertToMetersConfig(bool convertToMeters) Parameters Type Name Description bool convertToMeters True if the importer converts the unit from cm to m, false if do not do a conversion. Properties | Edit this page View Source FBXConvertToMetersConfigName Gets the string name used by FBXConvertToMetersConfig. Declaration public static string FBXConvertToMetersConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportAllGeometryLayersConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportAllGeometryLayersConfig.html",
    "title": "Class FBXImportAllGeometryLayersConfig",
    "summary": "Class FBXImportAllGeometryLayersConfig Specifies whether the FBX importer will merge all geometry layers present in the source file or import only the first. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportAllGeometryLayersConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportAllGeometryLayersConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportAllGeometryLayersConfig(bool) Constructs a new FBXImportAllGeometryLayersConfig. Declaration public FBXImportAllGeometryLayersConfig(bool importAllGeometryLayers) Parameters Type Name Description bool importAllGeometryLayers True if all geometry layers should be merged, false otherwise to take only the first layer. Properties | Edit this page View Source FBXImportAllGeometryLayersConfigName Gets the string name used by FBXImportAllGeometryLayersConfig. Declaration public static string FBXImportAllGeometryLayersConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportAllMaterialsConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportAllMaterialsConfig.html",
    "title": "Class FBXImportAllMaterialsConfig",
    "summary": "Class FBXImportAllMaterialsConfig Specifies whether the FBX importer will import all materials present in the source file or take only the referenced materials, if the importer is configured to import materials at all. Otherwise this will have no effect. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportAllMaterialsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportAllMaterialsConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportAllMaterialsConfig(bool) Constructs a new FBXImportAllMaterialsConfig. Declaration public FBXImportAllMaterialsConfig(bool importAllMaterials) Parameters Type Name Description bool importAllMaterials True if the FBX importer should import ALL materials even if not referenced, false otherwise (take only the referenced materials). Properties | Edit this page View Source FBXImportAllMaterialsConfigName Gets the string name used by FBXImportAllMaterialsConfig. Declaration public static string FBXImportAllMaterialsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportAnimationsConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportAnimationsConfig.html",
    "title": "Class FBXImportAnimationsConfig",
    "summary": "Class FBXImportAnimationsConfig Specifies whether the FBX importer will import animations. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportAnimationsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportAnimationsConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportAnimationsConfig(bool) Constructs a new FBXImportAnimationsConfig. Declaration public FBXImportAnimationsConfig(bool importAnimations) Parameters Type Name Description bool importAnimations True if the FBX importer should import animations, false otherwise. Properties | Edit this page View Source FBXImportAnimationsConfigName Gets the string name used by FBXImportAnimationsConfig. Declaration public static string FBXImportAnimationsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportCamerasConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportCamerasConfig.html",
    "title": "Class FBXImportCamerasConfig",
    "summary": "Class FBXImportCamerasConfig Specifies whether the FBX importer will import cameras. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportCamerasConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportCamerasConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportCamerasConfig(bool) Constructs a new FBXImportCamerasConfig. Declaration public FBXImportCamerasConfig(bool importCameras) Parameters Type Name Description bool importCameras True if the FBX importer should import cameras, false otherwise. Properties | Edit this page View Source FBXImportCamerasConfigName Gets the string name used by FBXImportCamerasConfig. Declaration public static string FBXImportCamerasConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportEmbeddedTexturesConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportEmbeddedTexturesConfig.html",
    "title": "Class FBXImportEmbeddedTexturesConfig",
    "summary": "Class FBXImportEmbeddedTexturesConfig Specifies whether the FBX importer will import embedded textures. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportEmbeddedTexturesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportEmbeddedTexturesConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportEmbeddedTexturesConfig(bool) Constructs a new FBXImportEmbeddedTexturesConfig. Declaration public FBXImportEmbeddedTexturesConfig(bool importTextures) Parameters Type Name Description bool importTextures True if the FBX importer should import embedded textures, false otherwise. Properties | Edit this page View Source FBXImportEmbeddedTexturesConfigName Gets the string name used by FBXImportEmbeddedTexturesConfig. Declaration public static string FBXImportEmbeddedTexturesConfigName { get; } Property Value Type Description string See Also BooleanPropertyConfig"
  },
  "api/SharpAssimp.Configs.FBXImportEmbeddedTexturesLegacyNamingConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportEmbeddedTexturesLegacyNamingConfig.html",
    "title": "Class FBXImportEmbeddedTexturesLegacyNamingConfig",
    "summary": "Class FBXImportEmbeddedTexturesLegacyNamingConfig Specifies if the FBX importer should search for embedded loaded textures, where no embedded texture data is provided. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportEmbeddedTexturesLegacyNamingConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportEmbeddedTexturesLegacyNamingConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportEmbeddedTexturesLegacyNamingConfig(bool) Constructs a new FBXImportSearchEmbeddedTexturesConfig. Declaration public FBXImportEmbeddedTexturesLegacyNamingConfig(bool searchEmbeddedTextures) Parameters Type Name Description bool searchEmbeddedTextures True if the FBX importer should search for embedded loaded textures, where no embedded texture data is provided. Properties | Edit this page View Source FBXImportEmbeddedTexturesLegacyNamingConfigName Gets the string name used by FBXImportSearchEmbeddedTexturesConfig. Declaration public static string FBXImportEmbeddedTexturesLegacyNamingConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportLightsConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportLightsConfig.html",
    "title": "Class FBXImportLightsConfig",
    "summary": "Class FBXImportLightsConfig Specifies whether the FBX importer will import lights. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportLightsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportLightsConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportLightsConfig(bool) Constructs a new FBXImportLightsConfig. Declaration public FBXImportLightsConfig(bool importLights) Parameters Type Name Description bool importLights True if the FBX importer should import lights, false otherwise. Properties | Edit this page View Source FBXImportLightsConfigName Gets the string name used by FBXImportLightsConfig. Declaration public static string FBXImportLightsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXImportMaterialsConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXImportMaterialsConfig.html",
    "title": "Class FBXImportMaterialsConfig",
    "summary": "Class FBXImportMaterialsConfig Specifies whether the FBX importer will import materials. Default is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXImportMaterialsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXImportMaterialsConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXImportMaterialsConfig(bool) Constructs a new FBXImportMaterialsConfig. Declaration public FBXImportMaterialsConfig(bool importMaterials) Parameters Type Name Description bool importMaterials True if the FBX importer should import materials, false otherwise. Properties | Edit this page View Source FBXImportMaterialsConfigName Gets the string name used by FBXImportMaterialsConfig. Declaration public static string FBXImportMaterialsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXOptimizeEmptyAnimationCurvesConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXOptimizeEmptyAnimationCurvesConfig.html",
    "title": "Class FBXOptimizeEmptyAnimationCurvesConfig",
    "summary": "Class FBXOptimizeEmptyAnimationCurvesConfig Specifies whether the importer will drop empty animation curves or animation curves which match the bind pose transformation over their entire defined range. Default value is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXOptimizeEmptyAnimationCurvesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXOptimizeEmptyAnimationCurvesConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXOptimizeEmptyAnimationCurvesConfig(bool) Constructs a new FBXOptimizeEmptyAnimationCurvesConfig. Declaration public FBXOptimizeEmptyAnimationCurvesConfig(bool optimizeEmptyAnimations) Parameters Type Name Description bool optimizeEmptyAnimations True if empty animation curves should be dropped, false otherwise. Properties | Edit this page View Source FBXOptimizeEmptyAnimationCurvesConfigName Gets the string name used by FBXOptimizeEmptyAnimationCurvesConfig. Declaration public static string FBXOptimizeEmptyAnimationCurvesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXPreservePivotsConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXPreservePivotsConfig.html",
    "title": "Class FBXPreservePivotsConfig",
    "summary": "Class FBXPreservePivotsConfig Specifies whether the FBX importer will preserve pivot points for transformations (as extra nodes). If set to false, pivots and offsets will be evaluated whenever possible. Default value is true. Inheritance object PropertyConfig BooleanPropertyConfig FBXPreservePivotsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXPreservePivotsConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXPreservePivotsConfig(bool) Constructs a new FBXPreservePivotsConfig. Declaration public FBXPreservePivotsConfig(bool preservePivots) Parameters Type Name Description bool preservePivots True if pivots should be preserved, false otherwise. Properties | Edit this page View Source FBXPreservePivotsConfigName Gets the string name used by FBXPreservePivotsConfig. Declaration public static string FBXPreservePivotsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FBXStrictModeConfig.html": {
    "href": "api/SharpAssimp.Configs.FBXStrictModeConfig.html",
    "title": "Class FBXStrictModeConfig",
    "summary": "Class FBXStrictModeConfig Specifies whether the FBX importer will act in strict mode in which only the FBX 2013 format is supported and any other sub formats are rejected. FBX 2013 is the primary target for the importer, so this format is best supported and well-tested. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig FBXStrictModeConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FBXStrictModeConfig : BooleanPropertyConfig Constructors | Edit this page View Source FBXStrictModeConfig(bool) Constructs a new FBXStrictModeConfig. Declaration public FBXStrictModeConfig(bool useStrictMode) Parameters Type Name Description bool useStrictMode True if FBX strict mode should be used, false otherwise. Properties | Edit this page View Source FBXStrictModeConfigName Gets the string name used by FBXStrictModeConfig. Declaration public static string FBXStrictModeConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FavorSpeedConfig.html": {
    "href": "api/SharpAssimp.Configs.FavorSpeedConfig.html",
    "title": "Class FavorSpeedConfig",
    "summary": "Class FavorSpeedConfig Configuration that is a hint to Assimp to favor speed against import quality. Enabling this option may result in faster loading, or it may not. It is just a hint to loaders and post-process steps to use faster code paths if possible. The default value is false. Inheritance object PropertyConfig BooleanPropertyConfig FavorSpeedConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class FavorSpeedConfig : BooleanPropertyConfig Constructors | Edit this page View Source FavorSpeedConfig(bool) Constructs a new FavorSpeedConfig. Declaration public FavorSpeedConfig(bool favorSpeed) Parameters Type Name Description bool favorSpeed True if Assimp should favor speed at the expense of quality, false otherwise. Properties | Edit this page View Source FavorSpeedConfigName Gets the string name used by FavorSpeedConfig. Declaration public static string FavorSpeedConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.FloatPropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.FloatPropertyConfig.html",
    "title": "Class FloatPropertyConfig",
    "summary": "Class FloatPropertyConfig Describes a float configuration property. Inheritance object PropertyConfig FloatPropertyConfig AnimationAccuracyConfig AppScaleConfig DeboneThresholdConfig GlobalScaleConfig IFCSmoothingAngleConfig NormalSmoothingAngleConfig TangentSmoothingAngleConfig Inherited Members PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public class FloatPropertyConfig : PropertyConfig Constructors | Edit this page View Source FloatPropertyConfig(string, float) Constructs a new FloatPropertyConfig. Declaration public FloatPropertyConfig(string name, float value) Parameters Type Name Description string name Name of the property float value Property value | Edit this page View Source FloatPropertyConfig(string, float, float) Constructs a new FloatPropertyConfig with a default value. Declaration public FloatPropertyConfig(string name, float value, float defaultValue) Parameters Type Name Description string name Name of the property float value Property value float defaultValue The default property value Properties | Edit this page View Source DefaultValue Gets the default property value. Declaration public float DefaultValue { get; } Property Value Type Description float | Edit this page View Source Value Gets the property value. Declaration public float Value { get; set; } Property Value Type Description float Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides PropertyConfig.OnApplyValue(nint) | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public override void SetDefaultValue() Overrides PropertyConfig.SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.GlobalKeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.GlobalKeyFrameImportConfig.html",
    "title": "Class GlobalKeyFrameImportConfig",
    "summary": "Class GlobalKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the \"global\" keyframe that will be imported. There are other configs for specific importers that will override the global setting. Inheritance object PropertyConfig IntegerPropertyConfig GlobalKeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class GlobalKeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source GlobalKeyFrameImportConfig(int) Constructs a new GlobalKeyFrameImportConfig. Declaration public GlobalKeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source GlobalKeyFrameImportConfigName Gets the string name used by GlobalKeyFrameImportConfig. Declaration public static string GlobalKeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.GlobalScaleConfig.html": {
    "href": "api/SharpAssimp.Configs.GlobalScaleConfig.html",
    "title": "Class GlobalScaleConfig",
    "summary": "Class GlobalScaleConfig Configures the GlobalScale step to scale the entire scene by a certain amount. Some importers provide a mechanism to define a scaling unit for the model, which this processing step can utilize. Default is 1.0. Inheritance object PropertyConfig FloatPropertyConfig GlobalScaleConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class GlobalScaleConfig : FloatPropertyConfig Constructors | Edit this page View Source GlobalScaleConfig(float) Constructs a new GlobalScaleConfig. Declaration public GlobalScaleConfig(float globalScale) Parameters Type Name Description float globalScale Value to scale the entire scene by. Properties | Edit this page View Source GlobalScaleConfigName Gets the string name used by GlobalScaleConfig. Declaration public static string GlobalScaleConfigName { get; } Property Value Type Description string See Also FloatPropertyConfig"
  },
  "api/SharpAssimp.Configs.IFCCylindricalTessellationConfig.html": {
    "href": "api/SharpAssimp.Configs.IFCCylindricalTessellationConfig.html",
    "title": "Class IFCCylindricalTessellationConfig",
    "summary": "Class IFCCylindricalTessellationConfig Specifies the tessellation for IFC cylindrical shapes. E.g. the number of segments used to approximate a circle. Accepted range of values is between [3, 180]. Inheritance object PropertyConfig IntegerPropertyConfig IFCCylindricalTessellationConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IFCCylindricalTessellationConfig : IntegerPropertyConfig Constructors | Edit this page View Source IFCCylindricalTessellationConfig(int) Constructs a new IFCCylindricalTessellationConfig. Declaration public IFCCylindricalTessellationConfig(int tessellation) Parameters Type Name Description int tessellation Tessellation of cylindrical shapes (e.g. the number of segments used to approximate a circle). Needs to be in the range of [3, 180]. Properties | Edit this page View Source IFCCylindricalTessellationConfigName Gets the string name used by IFCCylindricalTessellationConfig. Declaration public static string IFCCylindricalTessellationConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IFCSkipSpaceRepresentationsConfig.html": {
    "href": "api/SharpAssimp.Configs.IFCSkipSpaceRepresentationsConfig.html",
    "title": "Class IFCSkipSpaceRepresentationsConfig",
    "summary": "Class IFCSkipSpaceRepresentationsConfig Specifies whether the IFC loader skips over IfcSpace elements. IfcSpace elements (and their geometric representations) are used to represent free space in a building story. Inheritance object PropertyConfig BooleanPropertyConfig IFCSkipSpaceRepresentationsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IFCSkipSpaceRepresentationsConfig : BooleanPropertyConfig Constructors | Edit this page View Source IFCSkipSpaceRepresentationsConfig(bool) Constructs a new IFCSkipSpaceRepresentationsConfig. Declaration public IFCSkipSpaceRepresentationsConfig(bool skipSpaceRepresentations) Parameters Type Name Description bool skipSpaceRepresentations True if the IfcSpace elements are skipped, false if otherwise. Properties | Edit this page View Source IFCSkipSpaceRepresentationsConfigName Gets the string name used by IFCSkipSpaceRepresentationsConfig. Declaration public static string IFCSkipSpaceRepresentationsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IFCSmoothingAngleConfig.html": {
    "href": "api/SharpAssimp.Configs.IFCSmoothingAngleConfig.html",
    "title": "Class IFCSmoothingAngleConfig",
    "summary": "Class IFCSmoothingAngleConfig Specifies the tessellation conic angle for IFC smoothing curves. Accepted range of values is between [5, 120] Inheritance object PropertyConfig FloatPropertyConfig IFCSmoothingAngleConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IFCSmoothingAngleConfig : FloatPropertyConfig Constructors | Edit this page View Source IFCSmoothingAngleConfig(float) Constructs a new IFCSmoothingAngleConfig. Declaration public IFCSmoothingAngleConfig(float angle) Parameters Type Name Description float angle Smoothing angle when tessellating curves. Needs to be in the range of [5, 120]. Properties | Edit this page View Source IFCSmoothingAngleConfigName Gets the string name used by IFCSmoothingAngleConfig. Declaration public static string IFCSmoothingAngleConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IFCUseCustomTriangulationConfig.html": {
    "href": "api/SharpAssimp.Configs.IFCUseCustomTriangulationConfig.html",
    "title": "Class IFCUseCustomTriangulationConfig",
    "summary": "Class IFCUseCustomTriangulationConfig Specifies whether the IFC loader will use its own, custom triangulation algorithm to triangulate wall and floor meshes. If this is set to false, walls will be either triangulated by the post process triangulation or will be passed through as huge polygons with faked holes (e.g. holes that are connected with the outer boundary using a dummy edge). It is highly recommended to leave this property set to true as the default post process has some known issues with these kind of polygons. Inheritance object PropertyConfig BooleanPropertyConfig IFCUseCustomTriangulationConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IFCUseCustomTriangulationConfig : BooleanPropertyConfig Constructors | Edit this page View Source IFCUseCustomTriangulationConfig(bool) Constructs a new IFCUseCustomTriangulationConfig. Declaration public IFCUseCustomTriangulationConfig(bool useCustomTriangulation) Parameters Type Name Description bool useCustomTriangulation True if the loader should use its own triangulation routine for walls/floors, false otherwise. Properties | Edit this page View Source IFCUseCustomTriangulationConfigName Gets the string name used by IFCUseCustomTriangulationConfig. Declaration public static string IFCUseCustomTriangulationConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IRRAnimationFrameRateConfig.html": {
    "href": "api/SharpAssimp.Configs.IRRAnimationFrameRateConfig.html",
    "title": "Class IRRAnimationFrameRateConfig",
    "summary": "Class IRRAnimationFrameRateConfig Defines the output frame rate of the IRR loader. IRR animations are difficult to convert for Assimp and there will always be a loss of quality. This setting defines how many keys per second are returned by the converter. The default value is 100 frames per second. Inheritance object PropertyConfig IntegerPropertyConfig IRRAnimationFrameRateConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IRRAnimationFrameRateConfig : IntegerPropertyConfig Constructors | Edit this page View Source IRRAnimationFrameRateConfig(int) Constructs a new IRRAnimationFramerateConfig. Declaration public IRRAnimationFrameRateConfig(int frameRate) Parameters Type Name Description int frameRate Number of frames per second to output. Properties | Edit this page View Source IRRAnimationFrameRateConfigName Gets the string name used by IRRAnimationFrameRateConfig. Declaration public static string IRRAnimationFrameRateConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IgnoreTextureCoordinatesConfig.html": {
    "href": "api/SharpAssimp.Configs.IgnoreTextureCoordinatesConfig.html",
    "title": "Class IgnoreTextureCoordinatesConfig",
    "summary": "Class IgnoreTextureCoordinatesConfig Configuration for the FindInvalidData step. Set to true to ignore texture coordinates. This may be useful if you have to assign different kinds of textures, like seasonally variable ones - one for summer and one for winter. Default is false. Inheritance object PropertyConfig BooleanPropertyConfig IgnoreTextureCoordinatesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class IgnoreTextureCoordinatesConfig : BooleanPropertyConfig Constructors | Edit this page View Source IgnoreTextureCoordinatesConfig(bool) Constructs a new IgnoreTextureCoordinatesConfig. Declaration public IgnoreTextureCoordinatesConfig(bool ignoreTexCoords) Parameters Type Name Description bool ignoreTexCoords True if texture coordinates should be ignored, false otherwise. Properties | Edit this page View Source IgnoreTextureCoordinatesConfigName Gets the string name used by IgnoreTextureCoordinatesConfig. Declaration public static string IgnoreTextureCoordinatesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.IntegerPropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.IntegerPropertyConfig.html",
    "title": "Class IntegerPropertyConfig",
    "summary": "Class IntegerPropertyConfig Describes an integer configuration property. Inheritance object PropertyConfig IntegerPropertyConfig GlobalKeyFrameImportConfig IFCCylindricalTessellationConfig IRRAnimationFrameRateConfig LWSAnimationEndConfig LWSAnimationStartConfig MD2KeyFrameImportConfig MD3KeyFrameImportConfig MDLKeyFrameImportConfig MaxBoneCountConfig MeshTriangleLimitConfig MeshVertexLimitConfig MultithreadingConfig RemoveComponentConfig SMDKeyFrameImportConfig SortByPrimitiveTypeConfig TangentTextureChannelIndexConfig TransformUVConfig UnrealKeyFrameImportConfig VertexBoneWeightLimitConfig VertexCacheSizeConfig Inherited Members PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public class IntegerPropertyConfig : PropertyConfig Constructors | Edit this page View Source IntegerPropertyConfig(string, int) Constructs a new IntengerPropertyConfig. Declaration public IntegerPropertyConfig(string name, int value) Parameters Type Name Description string name Name of the property int value Property value | Edit this page View Source IntegerPropertyConfig(string, int, int) constructs a new IntegerPropertyConfig with a default value. Declaration public IntegerPropertyConfig(string name, int value, int defaultValue) Parameters Type Name Description string name Name of the property int value Property value int defaultValue The default property value Properties | Edit this page View Source DefaultValue Gets the default property value. Declaration public int DefaultValue { get; } Property Value Type Description int | Edit this page View Source Value Gets the property value. Declaration public int Value { get; set; } Property Value Type Description int Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides PropertyConfig.OnApplyValue(nint) | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public override void SetDefaultValue() Overrides PropertyConfig.SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.KeepSceneHierarchyConfig.html": {
    "href": "api/SharpAssimp.Configs.KeepSceneHierarchyConfig.html",
    "title": "Class KeepSceneHierarchyConfig",
    "summary": "Class KeepSceneHierarchyConfig Configuration for the PreTransformVertices step to keep the scene hierarchy. Meshes are moved to worldspace, but no optimization is performed where meshes with the same materials are not joined. This option can be useful if you have a scene hierarchy that contains important additional information which you intend to parse. The default value is false. Inheritance object PropertyConfig BooleanPropertyConfig KeepSceneHierarchyConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class KeepSceneHierarchyConfig : BooleanPropertyConfig Constructors | Edit this page View Source KeepSceneHierarchyConfig(bool) Constructs a new KeepHierarchyConfig. Declaration public KeepSceneHierarchyConfig(bool keepHierarchy) Parameters Type Name Description bool keepHierarchy True to keep the hierarchy, false otherwise. Properties | Edit this page View Source KeepSceneHierarchyConfigName Gets the string name used by KeepSceneHierarchyConfig. Declaration public static string KeepSceneHierarchyConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.LWOImportOneLayerConfig.html": {
    "href": "api/SharpAssimp.Configs.LWOImportOneLayerConfig.html",
    "title": "Class LWOImportOneLayerConfig",
    "summary": "Class LWOImportOneLayerConfig Configures the LWO loader to load just one layer from the model. LWO files consist of layers and in some cases it could be useful to load only one of them. This property can be either a string - which specifies the name of the layer - or an integer - the index of the layer. If the property is not set then the whole LWO model is loaded. Loading fails if the requested layer is not vailable. The layer index is zero-based and the layer name may not be empty The default value is false (all layers are loaded). Inheritance object PropertyConfig BooleanPropertyConfig LWOImportOneLayerConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class LWOImportOneLayerConfig : BooleanPropertyConfig Constructors | Edit this page View Source LWOImportOneLayerConfig(bool) Constructs a new LWOImportOneLayerConfig. Declaration public LWOImportOneLayerConfig(bool importOneLayerOnly) Parameters Type Name Description bool importOneLayerOnly True if only one layer should be imported, false if all layers should be imported. Properties | Edit this page View Source LWOImportOneLayerConfigName Gets the string name used by LWOImportOneLayerConfig. Declaration public static string LWOImportOneLayerConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.LWSAnimationEndConfig.html": {
    "href": "api/SharpAssimp.Configs.LWSAnimationEndConfig.html",
    "title": "Class LWSAnimationEndConfig",
    "summary": "Class LWSAnimationEndConfig Defines the ending of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. The default value is the one taken from the file Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the end time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation end from the input LWS file. Inheritance object PropertyConfig IntegerPropertyConfig LWSAnimationEndConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class LWSAnimationEndConfig : IntegerPropertyConfig Constructors | Edit this page View Source LWSAnimationEndConfig(int) Constructs a new LWSAnimationEndConfig. Declaration public LWSAnimationEndConfig(int animEnd) Parameters Type Name Description int animEnd Ending of the time range Properties | Edit this page View Source LWSAnimationEndConfigName Gets the string name used by LWSAnimationEndConfig. Declaration public static string LWSAnimationEndConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.LWSAnimationStartConfig.html": {
    "href": "api/SharpAssimp.Configs.LWSAnimationStartConfig.html",
    "title": "Class LWSAnimationStartConfig",
    "summary": "Class LWSAnimationStartConfig Defines the beginning of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. The default value is the one taken from the file. Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the start time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation start from the input LWS file ('FirstFrame' line) Inheritance object PropertyConfig IntegerPropertyConfig LWSAnimationStartConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class LWSAnimationStartConfig : IntegerPropertyConfig Constructors | Edit this page View Source LWSAnimationStartConfig(int) Constructs a new LWSAnimationStartConfig. Declaration public LWSAnimationStartConfig(int animStart) Parameters Type Name Description int animStart Beginning of the time range Properties | Edit this page View Source LWSAnimationStartConfigName Gets the string name used by LWSAnimationStartConfig. Declaration public static string LWSAnimationStartConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD2KeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.MD2KeyFrameImportConfig.html",
    "title": "Class MD2KeyFrameImportConfig",
    "summary": "Class MD2KeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MD2 format. Inheritance object PropertyConfig IntegerPropertyConfig MD2KeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD2KeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source MD2KeyFrameImportConfig(int) Constructs a new MD2KeyFrameImportConfig. Declaration public MD2KeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source MD2KeyFrameImportConfigName Gets the string name used by MD2KeyFrameImportConfig. Declaration public static string MD2KeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD3HandleMultiPartConfig.html": {
    "href": "api/SharpAssimp.Configs.MD3HandleMultiPartConfig.html",
    "title": "Class MD3HandleMultiPartConfig",
    "summary": "Class MD3HandleMultiPartConfig Configures the M3D loader to detect and process multi-part Quake player models. These models usually consit of three files, lower.md3, upper.md3 and head.md3. If this propery is set to true, Assimp will try to load and combine all three files if one of them is loaded. The default value is true. Inheritance object PropertyConfig BooleanPropertyConfig MD3HandleMultiPartConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD3HandleMultiPartConfig : BooleanPropertyConfig Constructors | Edit this page View Source MD3HandleMultiPartConfig(bool) Constructs a new MD3HandleMultiPartConfig. Declaration public MD3HandleMultiPartConfig(bool handleMultiParts) Parameters Type Name Description bool handleMultiParts True if the split files should be loaded and combined, false otherwise. Properties | Edit this page View Source MD3HandleMultiPartConfigName Gets the string name used by MD3HandleMultiPartConfig. Declaration public static string MD3HandleMultiPartConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD3KeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.MD3KeyFrameImportConfig.html",
    "title": "Class MD3KeyFrameImportConfig",
    "summary": "Class MD3KeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MD3 format. Inheritance object PropertyConfig IntegerPropertyConfig MD3KeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD3KeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source MD3KeyFrameImportConfig(int) Constructs a new MD3KeyFrameImportConfig. Declaration public MD3KeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source MD3KeyFrameImportConfigName Gets the string name used by MD3KeyFrameImportConfig. Declaration public static string MD3KeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD3ShaderSourceConfig.html": {
    "href": "api/SharpAssimp.Configs.MD3ShaderSourceConfig.html",
    "title": "Class MD3ShaderSourceConfig",
    "summary": "Class MD3ShaderSourceConfig Specifies the Quake 3 shader file to be used for a particular MD3 file. This can be a full path or relative to where all MD3 shaders reside. the default string value is an empty string. Inheritance object PropertyConfig StringPropertyConfig MD3ShaderSourceConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD3ShaderSourceConfig : StringPropertyConfig Constructors | Edit this page View Source MD3ShaderSourceConfig(string) Constructs a new MD3ShaderSourceConfig. Declaration public MD3ShaderSourceConfig(string shaderFile) Parameters Type Name Description string shaderFile The shader file. Properties | Edit this page View Source MD3ShaderSourceConfigName Gets the string name used by MD3ShaderSourceConfig. Declaration public static string MD3ShaderSourceConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD3SkinNameConfig.html": {
    "href": "api/SharpAssimp.Configs.MD3SkinNameConfig.html",
    "title": "Class MD3SkinNameConfig",
    "summary": "Class MD3SkinNameConfig Tells the MD3 loader which skin files to load. When loading MD3 files, Assimp checks whether a file named \"md3_file_name\"_\"skin_name\".skin exists. These files are used by Quake III to be able to assign different skins (e.g. red and blue team) to models. 'default', 'red', 'blue' are typical skin names. The default string value is \"default\". Inheritance object PropertyConfig StringPropertyConfig MD3SkinNameConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD3SkinNameConfig : StringPropertyConfig Constructors | Edit this page View Source MD3SkinNameConfig(string) Constructs a new MD3SkinNameConfig. Declaration public MD3SkinNameConfig(string skinName) Parameters Type Name Description string skinName The skin name. Properties | Edit this page View Source MD3SkinNameConfigName Gets the string name used by MD3SkinNameConfig. Declaration public static string MD3SkinNameConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MD5NoAnimationAutoLoadConfig.html": {
    "href": "api/SharpAssimp.Configs.MD5NoAnimationAutoLoadConfig.html",
    "title": "Class MD5NoAnimationAutoLoadConfig",
    "summary": "Class MD5NoAnimationAutoLoadConfig Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically. The default value is false. The default strategy is to look for a file with the same name but with the MD5ANIm extension in the same directory. If it is found it is loaded and combined with the MD5MESH file. This configuration option can be used to disable this behavior. Inheritance object PropertyConfig BooleanPropertyConfig MD5NoAnimationAutoLoadConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MD5NoAnimationAutoLoadConfig : BooleanPropertyConfig Constructors | Edit this page View Source MD5NoAnimationAutoLoadConfig(bool) Constructs a new MD5NoAnimationAutoLoadConfig. Declaration public MD5NoAnimationAutoLoadConfig(bool noAutoLoadAnim) Parameters Type Name Description bool noAutoLoadAnim True if animations should not be automatically loaded, false if they should be. Properties | Edit this page View Source MD5NoAnimationAutoLoadConfigName Gets the string name used by MD5NoAnimationAutoLoadConfig. Declaration public static string MD5NoAnimationAutoLoadConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MDLColorMapConfig.html": {
    "href": "api/SharpAssimp.Configs.MDLColorMapConfig.html",
    "title": "Class MDLColorMapConfig",
    "summary": "Class MDLColorMapConfig Configuration to set the colormap (palette) to be used to decode embedded textures in MDL (Quake or 3DG5) files. This must be a valid path to a file. The file is 768 (256 * 3) bytes alrge and contains RGB triplets for each of the 256 palette entries. If the file is not found, a default palette (from Quake 1) is used. The default value is \"colormap.lmp\". Inheritance object PropertyConfig StringPropertyConfig MDLColorMapConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MDLColorMapConfig : StringPropertyConfig Constructors | Edit this page View Source MDLColorMapConfig(string) Constructs a new MDLColorMapConfig. Declaration public MDLColorMapConfig(string fileName) Parameters Type Name Description string fileName Colormap filename Properties | Edit this page View Source MDLColorMapConfigName Gets the string name used by MDLColorMapConfig. Declaration public static string MDLColorMapConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MDLKeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.MDLKeyFrameImportConfig.html",
    "title": "Class MDLKeyFrameImportConfig",
    "summary": "Class MDLKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MDL format. Inheritance object PropertyConfig IntegerPropertyConfig MDLKeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MDLKeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source MDLKeyFrameImportConfig(int) Constructs a new MDLKeyFrameImportConfig. Declaration public MDLKeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source MDLKeyFrameImportConfigName Gets the string name used by MDLKeyFrameImportConfig. Declaration public static string MDLKeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MaterialExcludeListConfig.html": {
    "href": "api/SharpAssimp.Configs.MaterialExcludeListConfig.html",
    "title": "Class MaterialExcludeListConfig",
    "summary": "Class MaterialExcludeListConfig Configuration for the the RemoveRedundantMaterials step to determine what materials to keep. If a material matches one of these names it will not be modified or removed by the post processing step. Default is an empty string. Inheritance object PropertyConfig StringPropertyConfig MaterialExcludeListConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MaterialExcludeListConfig : StringPropertyConfig Constructors | Edit this page View Source MaterialExcludeListConfig(string[]) Constructs a new MaterialExcludeListConfig. Material names containing whitespace must be enclosed in single quotation marks. Declaration public MaterialExcludeListConfig(string[] materialNames) Parameters Type Name Description string[] materialNames List of material names that will not be modified or replaced by the remove redundant materials post process step. Properties | Edit this page View Source MaterialExcludeListConfigName Gets the string name used by MaterialExcludeListConfig. Declaration public static string MaterialExcludeListConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MatrixPropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.MatrixPropertyConfig.html",
    "title": "Class MatrixPropertyConfig",
    "summary": "Class MatrixPropertyConfig Describes a Matrix4x4 configuration property. Inheritance object PropertyConfig MatrixPropertyConfig RootTransformationConfig Inherited Members PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public class MatrixPropertyConfig : PropertyConfig Constructors | Edit this page View Source MatrixPropertyConfig(string, Matrix4x4) Constructs a new MatrixPropertyConfig. Declaration public MatrixPropertyConfig(string name, Matrix4x4 value) Parameters Type Name Description string name Name of the property Matrix4x4 value Property value | Edit this page View Source MatrixPropertyConfig(string, Matrix4x4, Matrix4x4) Constructs a new MatrixPropertyConfig. Declaration public MatrixPropertyConfig(string name, Matrix4x4 value, Matrix4x4 defaultValue) Parameters Type Name Description string name Name of the property Matrix4x4 value Property value Matrix4x4 defaultValue The default property value Properties | Edit this page View Source DefaultValue Gets the default property value. Declaration public Matrix4x4 DefaultValue { get; } Property Value Type Description Matrix4x4 | Edit this page View Source Value Gets the property value. Declaration public Matrix4x4 Value { get; set; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides PropertyConfig.OnApplyValue(nint) | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public override void SetDefaultValue() Overrides PropertyConfig.SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.MaxBoneCountConfig.html": {
    "href": "api/SharpAssimp.Configs.MaxBoneCountConfig.html",
    "title": "Class MaxBoneCountConfig",
    "summary": "Class MaxBoneCountConfig Configures the maximum bone count per mesh for the SplitByBoneCount step. Meshes are split until the maximum number of bones is reached. Inheritance object PropertyConfig IntegerPropertyConfig MaxBoneCountConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MaxBoneCountConfig : IntegerPropertyConfig Constructors | Edit this page View Source MaxBoneCountConfig(int) Constructs a new MaxBoneCountConfig. Declaration public MaxBoneCountConfig(int maxBones) Parameters Type Name Description int maxBones The maximum bone count. Properties | Edit this page View Source MaxBoneCountConfigName Gets the string name used by MaxBoneCountConfig. Declaration public static string MaxBoneCountConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MeasureTimeConfig.html": {
    "href": "api/SharpAssimp.Configs.MeasureTimeConfig.html",
    "title": "Class MeasureTimeConfig",
    "summary": "Class MeasureTimeConfig Configuration to enable time measurements. If enabled, each part of the loading process is timed and logged. Default value is false. Inheritance object PropertyConfig BooleanPropertyConfig MeasureTimeConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MeasureTimeConfig : BooleanPropertyConfig Constructors | Edit this page View Source MeasureTimeConfig(bool) Constructs a new MeasureTimeConfig. Declaration public MeasureTimeConfig(bool measureTime) Parameters Type Name Description bool measureTime True if the loading process should be timed or not. Properties | Edit this page View Source MeasureTimeConfigName Gets the string name used by MeasureTimeConfig. Declaration public static string MeasureTimeConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MeshTriangleLimitConfig.html": {
    "href": "api/SharpAssimp.Configs.MeshTriangleLimitConfig.html",
    "title": "Class MeshTriangleLimitConfig",
    "summary": "Class MeshTriangleLimitConfig Configuration for the SplitLargeMeshes step that specifies the maximum number of triangles a mesh can contain. The default value is MeshTriangleLimitConfigDefaultValue. Inheritance object PropertyConfig IntegerPropertyConfig MeshTriangleLimitConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MeshTriangleLimitConfig : IntegerPropertyConfig Constructors | Edit this page View Source MeshTriangleLimitConfig(int) Constructs a new MeshTriangleLimitConfig. Declaration public MeshTriangleLimitConfig(int maxTriangleLimit) Parameters Type Name Description int maxTriangleLimit Max number of triangles a mesh can contain. Properties | Edit this page View Source MeshTriangleLimitConfigDefaultValue Gets the defined default limit value, this corresponds to the AI_SLM_DEFAULT_MAX_TRIANGLES constant. Declaration public static int MeshTriangleLimitConfigDefaultValue { get; } Property Value Type Description int | Edit this page View Source MeshTriangleLimitConfigName Gets the string name used by MeshTriangleLimitConfig. Declaration public static string MeshTriangleLimitConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MeshVertexLimitConfig.html": {
    "href": "api/SharpAssimp.Configs.MeshVertexLimitConfig.html",
    "title": "Class MeshVertexLimitConfig",
    "summary": "Class MeshVertexLimitConfig Configuration for the SplitLargeMeshes step that specifies the maximum number of vertices a mesh can contain. The default value is MeshVertexLimitConfigDefaultValue. Inheritance object PropertyConfig IntegerPropertyConfig MeshVertexLimitConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MeshVertexLimitConfig : IntegerPropertyConfig Constructors | Edit this page View Source MeshVertexLimitConfig(int) Constructs a new MeshVertexLimitConfig. Declaration public MeshVertexLimitConfig(int maxVertexLimit) Parameters Type Name Description int maxVertexLimit Max number of vertices a mesh can contain. Properties | Edit this page View Source MeshVertexLimitConfigDefaultValue Gets the defined default limit value, this corresponds to the AI_SLM_DEFAULT_MAX_VERTICES constant. Declaration public static int MeshVertexLimitConfigDefaultValue { get; } Property Value Type Description int | Edit this page View Source MeshVertexLimitConfigName Gets the string name used by MeshVertexLimitConfig. Declaration public static string MeshVertexLimitConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.MultithreadingConfig.html": {
    "href": "api/SharpAssimp.Configs.MultithreadingConfig.html",
    "title": "Class MultithreadingConfig",
    "summary": "Class MultithreadingConfig Configuration to set Assimp's multithreading policy. Possible values are -1 to let Assimp decide, 0 to disable multithreading, or any number larger than zero to force a specific number of threads. This is only a hint and may be ignored by Assimp. Default value is -1. Inheritance object PropertyConfig IntegerPropertyConfig MultithreadingConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class MultithreadingConfig : IntegerPropertyConfig Constructors | Edit this page View Source MultithreadingConfig(int) Constructs a new MultithreadingConfig. Declaration public MultithreadingConfig(int value) Parameters Type Name Description int value A value of -1 will let Assimp decide, a value of zero to disable multithreading, and a value greater than zero to force a specific number of threads. Properties | Edit this page View Source MultithreadingConfigName Gets the string name used by MultithreadingConfig. Declaration public static string MultithreadingConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.NoSkeletonMeshesConfig.html": {
    "href": "api/SharpAssimp.Configs.NoSkeletonMeshesConfig.html",
    "title": "Class NoSkeletonMeshesConfig",
    "summary": "Class NoSkeletonMeshesConfig Global setting to disable generation of skeleton dummy meshes. These are generated as a visualization aid in cases which the input data contains no geometry, but only animation data. So the geometry are visualizing the bones. Default value is false. Inheritance object PropertyConfig BooleanPropertyConfig NoSkeletonMeshesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class NoSkeletonMeshesConfig : BooleanPropertyConfig Constructors | Edit this page View Source NoSkeletonMeshesConfig(bool) Constructs a new NoSkeletonMeshConfig. Declaration public NoSkeletonMeshesConfig(bool disableDummySkeletonMeshes) Parameters Type Name Description bool disableDummySkeletonMeshes True if dummy skeleton mesh generation should be disabled, false otherwise. Properties | Edit this page View Source NoSkeletonMeshesConfigName Gets the string name used by NoSkeletonMeshConfig. Declaration public static string NoSkeletonMeshesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.NodeExcludeListConfig.html": {
    "href": "api/SharpAssimp.Configs.NodeExcludeListConfig.html",
    "title": "Class NodeExcludeListConfig",
    "summary": "Class NodeExcludeListConfig Configuration for the OptimizeGraph step to preserve nodes matching a name in the given list. Nodes that match the names in the list will not be modified or removed. Identifiers containing whitespaces must be enclosed in single quotation marks. The default value is an empty string. Inheritance object PropertyConfig StringPropertyConfig NodeExcludeListConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class NodeExcludeListConfig : StringPropertyConfig Constructors | Edit this page View Source NodeExcludeListConfig(params string[]) Constructs a new NodeExcludeListConfig. Declaration public NodeExcludeListConfig(params string[] nodeNames) Parameters Type Name Description string[] nodeNames List of node names Properties | Edit this page View Source NodeExcludeListConfigName Gets the string name used by NodeExcludeListConfig. Declaration public static string NodeExcludeListConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.NormalSmoothingAngleConfig.html": {
    "href": "api/SharpAssimp.Configs.NormalSmoothingAngleConfig.html",
    "title": "Class NormalSmoothingAngleConfig",
    "summary": "Class NormalSmoothingAngleConfig Configuration to set the maximum angle between two face normals at a vertex when they are smoothed during the step to calculate smooth normals. This is frequently called the \"crease angle\". The maximum and default value is 175 degrees. Inheritance object PropertyConfig FloatPropertyConfig NormalSmoothingAngleConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class NormalSmoothingAngleConfig : FloatPropertyConfig Constructors | Edit this page View Source NormalSmoothingAngleConfig(float) Constructs a new NormalSmoothingAngleConfig. Declaration public NormalSmoothingAngleConfig(float angle) Parameters Type Name Description float angle Smoothing angle, in degrees. Properties | Edit this page View Source NormalSmoothingAngleConfigName Gets the string name used by NormalSmoothingAngleConfig. Declaration public static string NormalSmoothingAngleConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.NormalizeVertexComponentsConfig.html": {
    "href": "api/SharpAssimp.Configs.NormalizeVertexComponentsConfig.html",
    "title": "Class NormalizeVertexComponentsConfig",
    "summary": "Class NormalizeVertexComponentsConfig Configuration for the PreTransformVertices step to normalize all vertex components into the -1...1 range. The default value is false. Inheritance object PropertyConfig BooleanPropertyConfig NormalizeVertexComponentsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class NormalizeVertexComponentsConfig : BooleanPropertyConfig Constructors | Edit this page View Source NormalizeVertexComponentsConfig(bool) Constructs a new NormalizeVertexComponentsConfig. Declaration public NormalizeVertexComponentsConfig(bool normalizeVertexComponents) Parameters Type Name Description bool normalizeVertexComponents True if the post process step should normalize vertex components, false otherwise. Properties | Edit this page View Source NormalizeVertexComponentsConfigName Gets the string name used by NormalizeVertexComponentsConfig. Declaration public static string NormalizeVertexComponentsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.OgreMaterialFileConfig.html": {
    "href": "api/SharpAssimp.Configs.OgreMaterialFileConfig.html",
    "title": "Class OgreMaterialFileConfig",
    "summary": "Class OgreMaterialFileConfig The Ogre importer will try to load this MaterialFile. Ogre meshes reference with material names, this does not tell Assimp where the file is located. Assimp will try to find the source file in the following order: [material-name].material, [mesh-filename-base].material, and lastly the material name defined by this config property. The default value is \"Scene.Material\". Inheritance object PropertyConfig StringPropertyConfig OgreMaterialFileConfig Inherited Members StringPropertyConfig.Value StringPropertyConfig.DefaultValue StringPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class OgreMaterialFileConfig : StringPropertyConfig Constructors | Edit this page View Source OgreMaterialFileConfig(string) Constructs a new OgreMaterialFileConfig. Declaration public OgreMaterialFileConfig(string materialFileName) Parameters Type Name Description string materialFileName Material file name to load. Properties | Edit this page View Source OgreMaterialFileConfigName Gets the string name used by OgreMaterialFileConfig. Declaration public static string OgreMaterialFileConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.OgreTextureTypeFromFilenameConfig.html": {
    "href": "api/SharpAssimp.Configs.OgreTextureTypeFromFilenameConfig.html",
    "title": "Class OgreTextureTypeFromFilenameConfig",
    "summary": "Class OgreTextureTypeFromFilenameConfig The Ogre importer will detect the texture usage from the filename. Normally a texture is loaded as a color map, if no target is specified in the material file. If this is enabled, then Assimp will try to detect the type from the texture filename postfix: Normal Maps: _n, _nrm, _nrml, _normal, _normals, _normalmap Specular Maps: _s, _spec, _specular, _specularmap Light Maps: _l, _light, _lightmap, _occ, _occlusion Displacement Maps: _dis, _displacement The matching is case insensitive. Postfix is taken between the last \"_\" and last \".\". The default behavior is to detect type from lower cased texture unit name by matching against: normalmap, specularmap, lightmap, and displacementmap. For both cases if no match is found then, Diffuse is used. The default value is false. Inheritance object PropertyConfig BooleanPropertyConfig OgreTextureTypeFromFilenameConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class OgreTextureTypeFromFilenameConfig : BooleanPropertyConfig Constructors | Edit this page View Source OgreTextureTypeFromFilenameConfig(bool) Constructs a new OgreTextureTypeFromFilenameConfig. Declaration public OgreTextureTypeFromFilenameConfig(bool fileNameDefinesTextureUsage) Parameters Type Name Description bool fileNameDefinesTextureUsage True if the filename defines texture usage, false otherwise. Properties | Edit this page View Source OgreTextureTypeFromFilenameConfigName Gets the string name used by OgreTextureTypeFromFilenameConfig. Declaration public static string OgreTextureTypeFromFilenameConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.PropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.PropertyConfig.html",
    "title": "Class PropertyConfig",
    "summary": "Class PropertyConfig Base property config. Inheritance object PropertyConfig BooleanPropertyConfig FloatPropertyConfig IntegerPropertyConfig MatrixPropertyConfig StringPropertyConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public abstract class PropertyConfig Constructors | Edit this page View Source PropertyConfig(string) Creates a new property config that has no active Assimp property store. Declaration protected PropertyConfig(string name) Parameters Type Name Description string name Name of the property. Properties | Edit this page View Source Name Gets the property name. Declaration public string Name { get; } Property Value Type Description string Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected abstract void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public abstract void SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.RemoveComponentConfig.html": {
    "href": "api/SharpAssimp.Configs.RemoveComponentConfig.html",
    "title": "Class RemoveComponentConfig",
    "summary": "Class RemoveComponentConfig Configuration for the RemoveComponent step that specifies which parts of the data structure is to be removed. If no valid mesh remains after the step, the import fails. The default value i None. Inheritance object PropertyConfig IntegerPropertyConfig RemoveComponentConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class RemoveComponentConfig : IntegerPropertyConfig Constructors | Edit this page View Source RemoveComponentConfig(ExcludeComponent) Constructs a new RemoveComponentConfig. Declaration public RemoveComponentConfig(ExcludeComponent componentsToExclude) Parameters Type Name Description ExcludeComponent componentsToExclude Bit-wise combination of components to exclude. Properties | Edit this page View Source RemoveComponentConfigName Gets the string name used by RemoveComponentConfig. Declaration public static string RemoveComponentConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.RemoveDegeneratePrimitivesCheckAreaConfig.html": {
    "href": "api/SharpAssimp.Configs.RemoveDegeneratePrimitivesCheckAreaConfig.html",
    "title": "Class RemoveDegeneratePrimitivesCheckAreaConfig",
    "summary": "Class RemoveDegeneratePrimitivesCheckAreaConfig Configuration for the FindDegenerates step. If true, the area of the triangles are checked to see if they are greater than 1e-6. If so, the triangle is removed if RemoveDegeneratePrimitivesConfig is set to true. Inheritance object PropertyConfig BooleanPropertyConfig RemoveDegeneratePrimitivesCheckAreaConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class RemoveDegeneratePrimitivesCheckAreaConfig : BooleanPropertyConfig Constructors | Edit this page View Source RemoveDegeneratePrimitivesCheckAreaConfig(bool) Constructs a new RemoveDegeneratePrimitivesCheckAreaConfig. Declaration public RemoveDegeneratePrimitivesCheckAreaConfig(bool checkArea) Parameters Type Name Description bool checkArea True if the post process step should check the area of triangles when finding degenerate primitives, false otherwise. Properties | Edit this page View Source RemoveDegeneratePrimitivesCheckAreaConfigName Gets the string name used by RemoveDegeneratePrimitivesCheckAreaConfig. Declaration public static string RemoveDegeneratePrimitivesCheckAreaConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.RemoveDegeneratePrimitivesConfig.html": {
    "href": "api/SharpAssimp.Configs.RemoveDegeneratePrimitivesConfig.html",
    "title": "Class RemoveDegeneratePrimitivesConfig",
    "summary": "Class RemoveDegeneratePrimitivesConfig Configuration for the FindDegenerates step to remove degenerted primitives from the import immediately. The default value is false, where degenerated triangles are converted to lines, and degenerated lines to points. Inheritance object PropertyConfig BooleanPropertyConfig RemoveDegeneratePrimitivesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class RemoveDegeneratePrimitivesConfig : BooleanPropertyConfig Constructors | Edit this page View Source RemoveDegeneratePrimitivesConfig(bool) Constructs a new RemoveDegeneratePrimitivesConfig. Declaration public RemoveDegeneratePrimitivesConfig(bool removeDegenerates) Parameters Type Name Description bool removeDegenerates True if the post process step should remove degenerate primitives, false otherwise. Properties | Edit this page View Source RemoveDegeneratePrimitivesConfigName Gets the string name used by RemoveDegeneratePrimitivesConfig. Declaration public static string RemoveDegeneratePrimitivesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.RemoveEmptyBonesConfig.html": {
    "href": "api/SharpAssimp.Configs.RemoveEmptyBonesConfig.html",
    "title": "Class RemoveEmptyBonesConfig",
    "summary": "Class RemoveEmptyBonesConfig Specifies whether the importer removes empty bones or not. Empty bones are often used to define connections for other models (e.g. attachment points). Default value is true. Inheritance object PropertyConfig BooleanPropertyConfig RemoveEmptyBonesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class RemoveEmptyBonesConfig : BooleanPropertyConfig Constructors | Edit this page View Source RemoveEmptyBonesConfig(bool) Constructs a new RemoveEmptyBonesConfig. Declaration public RemoveEmptyBonesConfig(bool removeEmptyBones) Parameters Type Name Description bool removeEmptyBones True if the importer should remove empty bones, false if they should be kept. Properties | Edit this page View Source RemoveEmptyBonesConfigName Gets the string name used by RemoveEmptyBonesConfig. Declaration public static string RemoveEmptyBonesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.RootTransformationConfig.html": {
    "href": "api/SharpAssimp.Configs.RootTransformationConfig.html",
    "title": "Class RootTransformationConfig",
    "summary": "Class RootTransformationConfig Configuration for PreTransformVertices that sets a user defined matrix as the scene root node transformation before transforming vertices. Default value is the identity matrix. Inheritance object PropertyConfig MatrixPropertyConfig RootTransformationConfig Inherited Members MatrixPropertyConfig.Value MatrixPropertyConfig.DefaultValue MatrixPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class RootTransformationConfig : MatrixPropertyConfig Constructors | Edit this page View Source RootTransformationConfig(Matrix4x4) Constructs a new RootTransformationConfig. Declaration public RootTransformationConfig(Matrix4x4 rootTransform) Parameters Type Name Description Matrix4x4 rootTransform Root transformation matrix to be set to the root scene node during the pretransform post process step. Properties | Edit this page View Source RootTransformationConfigName Gets the string name used by RootTransformationConfig. Declaration public static string RootTransformationConfigName { get; } Property Value Type Description string Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides MatrixPropertyConfig.OnApplyValue(nint)"
  },
  "api/SharpAssimp.Configs.SMDKeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.SMDKeyFrameImportConfig.html",
    "title": "Class SMDKeyFrameImportConfig",
    "summary": "Class SMDKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the SMD format. Inheritance object PropertyConfig IntegerPropertyConfig SMDKeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class SMDKeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source SMDKeyFrameImportConfig(int) Constructs a new SMDKeyFrameImportConfig. Declaration public SMDKeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source SMDKeyFrameImportConfigName Gets the string name used by SMDKeyFrameImportConfig. Declaration public static string SMDKeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.SmdLoadAnimationListConfig.html": {
    "href": "api/SharpAssimp.Configs.SmdLoadAnimationListConfig.html",
    "title": "Class SmdLoadAnimationListConfig",
    "summary": "Class SmdLoadAnimationListConfig Specifies whether the importer will load multiple animations. Default value is true. Inheritance object PropertyConfig BooleanPropertyConfig SmdLoadAnimationListConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class SmdLoadAnimationListConfig : BooleanPropertyConfig Constructors | Edit this page View Source SmdLoadAnimationListConfig(bool) Constructs a new SmdLoadAnimationListConfig. Declaration public SmdLoadAnimationListConfig(bool loadAnimList) Parameters Type Name Description bool loadAnimList True if the importer should load multiple animations, false if only one animation should be loaded. Properties | Edit this page View Source SmdLoadAnimationListConfigName Gets the string name used by SmdLoadAnimationListConfig. Declaration public static string SmdLoadAnimationListConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.SortByPrimitiveTypeConfig.html": {
    "href": "api/SharpAssimp.Configs.SortByPrimitiveTypeConfig.html",
    "title": "Class SortByPrimitiveTypeConfig",
    "summary": "Class SortByPrimitiveTypeConfig Configuration for the SortByPrimitiveType step that specifies which primitive types are to be removed by the step. Specifying all primitive types is illegal. The default value is zero specifying none. Inheritance object PropertyConfig IntegerPropertyConfig SortByPrimitiveTypeConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class SortByPrimitiveTypeConfig : IntegerPropertyConfig Constructors | Edit this page View Source SortByPrimitiveTypeConfig(PrimitiveType) Constructs a new SortByPrimitiveTypeConfig. Declaration public SortByPrimitiveTypeConfig(PrimitiveType typesToRemove) Parameters Type Name Description PrimitiveType typesToRemove Bit-wise combination of primitive types to remove Properties | Edit this page View Source SortByPrimitiveTypeConfigName Gets the string name used by SortByPrimitiveTypeConfig. Declaration public static string SortByPrimitiveTypeConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.StringPropertyConfig.html": {
    "href": "api/SharpAssimp.Configs.StringPropertyConfig.html",
    "title": "Class StringPropertyConfig",
    "summary": "Class StringPropertyConfig Describes a string configuration property. Inheritance object PropertyConfig StringPropertyConfig MD3ShaderSourceConfig MD3SkinNameConfig MDLColorMapConfig MaterialExcludeListConfig NodeExcludeListConfig OgreMaterialFileConfig Inherited Members PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public class StringPropertyConfig : PropertyConfig Constructors | Edit this page View Source StringPropertyConfig(string, string) Constructs a new StringPropertyConfig. Declaration public StringPropertyConfig(string name, string value) Parameters Type Name Description string name Name of the property string value Property value | Edit this page View Source StringPropertyConfig(string, string, string) Constructs a new StringPropertyConfig with a default value. Declaration public StringPropertyConfig(string name, string value, string defaultValue) Parameters Type Name Description string name Name of the property string value Property value string defaultValue The default property value Properties | Edit this page View Source DefaultValue Gets the default property value. Declaration public string DefaultValue { get; } Property Value Type Description string | Edit this page View Source Value Gets the property value. Declaration public string Value { get; set; } Property Value Type Description string Methods | Edit this page View Source OnApplyValue(nint) Applies the property value to the given Assimp property store. Declaration protected override void OnApplyValue(nint propStore) Parameters Type Name Description nint propStore Assimp property store Overrides PropertyConfig.OnApplyValue(nint) | Edit this page View Source ProcessNames(string[]) Convience method for constructing a whitespace delimited name list. Declaration protected static string ProcessNames(string[] names) Parameters Type Name Description string[] names Array of names Returns Type Description string White-space delimited list as a string | Edit this page View Source SetDefaultValue() Sets the current value to the default value. Declaration public override void SetDefaultValue() Overrides PropertyConfig.SetDefaultValue()"
  },
  "api/SharpAssimp.Configs.TangentSmoothingAngleConfig.html": {
    "href": "api/SharpAssimp.Configs.TangentSmoothingAngleConfig.html",
    "title": "Class TangentSmoothingAngleConfig",
    "summary": "Class TangentSmoothingAngleConfig Configuration to set the maximum angle that may be between two vertex tangents/bitangents when they are smoothed during the step to calculate the tangent basis. The default value is 45 degrees. Inheritance object PropertyConfig FloatPropertyConfig TangentSmoothingAngleConfig Inherited Members FloatPropertyConfig.Value FloatPropertyConfig.DefaultValue FloatPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class TangentSmoothingAngleConfig : FloatPropertyConfig Constructors | Edit this page View Source TangentSmoothingAngleConfig(float) Constructs a new TangentSmoothingAngleConfig. Declaration public TangentSmoothingAngleConfig(float angle) Parameters Type Name Description float angle Smoothing angle, in degrees. Properties | Edit this page View Source TangentSmoothingAngleConfigName Gets the string name used by TangentSmoothingAngleConfig. Declaration public static string TangentSmoothingAngleConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.TangentTextureChannelIndexConfig.html": {
    "href": "api/SharpAssimp.Configs.TangentTextureChannelIndexConfig.html",
    "title": "Class TangentTextureChannelIndexConfig",
    "summary": "Class TangentTextureChannelIndexConfig Configures which texture channel is used for tangent space computations. The channel must exist or an error will be raised. Inheritance object PropertyConfig IntegerPropertyConfig TangentTextureChannelIndexConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class TangentTextureChannelIndexConfig : IntegerPropertyConfig Constructors | Edit this page View Source TangentTextureChannelIndexConfig(int) Constructs a new TangentTextureChannelIndexConfig. Declaration public TangentTextureChannelIndexConfig(int textureChannelIndex) Parameters Type Name Description int textureChannelIndex The zero-based texture channel index. Properties | Edit this page View Source TangentTextureChannelIndexConfigName Gets the string name used by TangentTextureChannelIndexConfig. Declaration public static string TangentTextureChannelIndexConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.TerragenComputeTexCoordsConfig.html": {
    "href": "api/SharpAssimp.Configs.TerragenComputeTexCoordsConfig.html",
    "title": "Class TerragenComputeTexCoordsConfig",
    "summary": "Class TerragenComputeTexCoordsConfig Configures the terragen import plugin to compute UV's for terrains, if they are not given. Furthermore, a default texture is assigned. The default value is false. UV coordinates for terrains are so simple to compute that you'll usually want to compute them on your own, if you need them. This option is intended for model viewers which want to offer an easy way to apply textures to terrains. Inheritance object PropertyConfig BooleanPropertyConfig TerragenComputeTexCoordsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class TerragenComputeTexCoordsConfig : BooleanPropertyConfig Constructors | Edit this page View Source TerragenComputeTexCoordsConfig(bool) Constructs a new TerragenComputeTexCoordsConfig. Declaration public TerragenComputeTexCoordsConfig(bool computeTexCoords) Parameters Type Name Description bool computeTexCoords True if terran UV coordinates should be computed, false otherwise. Properties | Edit this page View Source TerragenComputeTexCoordsConfigName Gets the string name used by TerragenComputeTexCoordsConfig. Declaration public static string TerragenComputeTexCoordsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.TransformUVConfig.html": {
    "href": "api/SharpAssimp.Configs.TransformUVConfig.html",
    "title": "Class TransformUVConfig",
    "summary": "Class TransformUVConfig Configuration for the TransformUVCoords step that specifies which UV transformations are to be evaluated. The default value is for all combinations (scaling, rotation, translation). Inheritance object PropertyConfig IntegerPropertyConfig TransformUVConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class TransformUVConfig : IntegerPropertyConfig Constructors | Edit this page View Source TransformUVConfig(UVTransformFlags) Constructs a new TransformUVConfig. Declaration public TransformUVConfig(UVTransformFlags transformFlags) Parameters Type Name Description UVTransformFlags transformFlags Bit-wise combination specifying which UV transforms that should be evaluated. Properties | Edit this page View Source TransformUVConfigName Gets the string name used by TransformUVConfig. Declaration public static string TransformUVConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.UnrealHandleFlagsConfig.html": {
    "href": "api/SharpAssimp.Configs.UnrealHandleFlagsConfig.html",
    "title": "Class UnrealHandleFlagsConfig",
    "summary": "Class UnrealHandleFlagsConfig Configures the UNREAL 3D loader to separate faces with different surface flags (e.g. two-sided vs single-sided). The default value is true. Inheritance object PropertyConfig BooleanPropertyConfig UnrealHandleFlagsConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class UnrealHandleFlagsConfig : BooleanPropertyConfig Constructors | Edit this page View Source UnrealHandleFlagsConfig(bool) Constructs a new UnrealHandleFlagsConfig. Declaration public UnrealHandleFlagsConfig(bool handleFlags) Parameters Type Name Description bool handleFlags True if the unreal loader should separate faces with different surface flags, false otherwise. Properties | Edit this page View Source UnrealHandleFlagsConfigName Gets the string name used by UnrealHandleFlagsConfig. Declaration public static string UnrealHandleFlagsConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.UnrealKeyFrameImportConfig.html": {
    "href": "api/SharpAssimp.Configs.UnrealKeyFrameImportConfig.html",
    "title": "Class UnrealKeyFrameImportConfig",
    "summary": "Class UnrealKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the Unreal format. Inheritance object PropertyConfig IntegerPropertyConfig UnrealKeyFrameImportConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class UnrealKeyFrameImportConfig : IntegerPropertyConfig Constructors | Edit this page View Source UnrealKeyFrameImportConfig(int) Constructs a new UnrealKeyFrameImportConfig. Declaration public UnrealKeyFrameImportConfig(int keyFrame) Parameters Type Name Description int keyFrame Keyframe index Properties | Edit this page View Source UnrealKeyFrameImportConfigName Gets the string name used by UnrealKeyFrameImportConfig. Declaration public static string UnrealKeyFrameImportConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.VertexBoneWeightLimitConfig.html": {
    "href": "api/SharpAssimp.Configs.VertexBoneWeightLimitConfig.html",
    "title": "Class VertexBoneWeightLimitConfig",
    "summary": "Class VertexBoneWeightLimitConfig Configuration for the LimitBoneWeights step that specifies the maximum number of bone weights per vertex. The default value is VertexBoneWeightLimitConfigDefaultValue. Inheritance object PropertyConfig IntegerPropertyConfig VertexBoneWeightLimitConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class VertexBoneWeightLimitConfig : IntegerPropertyConfig Constructors | Edit this page View Source VertexBoneWeightLimitConfig(int) Constructs a new VertexBoneWeightLimitConfig. Declaration public VertexBoneWeightLimitConfig(int maxBoneWeights) Parameters Type Name Description int maxBoneWeights Max number of bone weights per vertex. Properties | Edit this page View Source VertexBoneWeightLimitConfigDefaultValue Gets the defined default limit value, this corresponds to the AI_LBW_MAX_WEIGHTS constant. Declaration public static int VertexBoneWeightLimitConfigDefaultValue { get; } Property Value Type Description int | Edit this page View Source VertexBoneWeightLimitConfigName gets the string name used by VertexBoneWeightLimitConfig. Declaration public static string VertexBoneWeightLimitConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.VertexCacheSizeConfig.html": {
    "href": "api/SharpAssimp.Configs.VertexCacheSizeConfig.html",
    "title": "Class VertexCacheSizeConfig",
    "summary": "Class VertexCacheSizeConfig Configuration for the ImproveCacheLocality step that specifies the size of the post-transform vertex cache. The size is given in number of vertices and the default value is VertexCacheSizeConfigDefaultValue. Inheritance object PropertyConfig IntegerPropertyConfig VertexCacheSizeConfig Inherited Members IntegerPropertyConfig.Value IntegerPropertyConfig.DefaultValue IntegerPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class VertexCacheSizeConfig : IntegerPropertyConfig Constructors | Edit this page View Source VertexCacheSizeConfig(int) Constructs a new VertexCacheSizeConfig. Declaration public VertexCacheSizeConfig(int vertexCacheSize) Parameters Type Name Description int vertexCacheSize Size of the post-transform vertex cache, in number of vertices. Properties | Edit this page View Source VertexCacheSizeConfigDefaultValue Gets the defined default vertex cache size, this corresponds to the PP_ICL_PTCACHE_SIZE. Declaration public static int VertexCacheSizeConfigDefaultValue { get; } Property Value Type Description int | Edit this page View Source VertexCacheSizeConfigName Gets the string name used by VertexCacheConfig. Declaration public static string VertexCacheSizeConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.XFileUseDoublesConfig.html": {
    "href": "api/SharpAssimp.Configs.XFileUseDoublesConfig.html",
    "title": "Class XFileUseDoublesConfig",
    "summary": "Class XFileUseDoublesConfig Specifies if the X-file exporter should use 64-bit doubles rather than 32-bit floats. Inheritance object PropertyConfig BooleanPropertyConfig XFileUseDoublesConfig Inherited Members BooleanPropertyConfig.Value BooleanPropertyConfig.DefaultValue BooleanPropertyConfig.SetDefaultValue() PropertyConfig.Name object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Configs Assembly: SharpAssimp.dll Syntax public sealed class XFileUseDoublesConfig : BooleanPropertyConfig Constructors | Edit this page View Source XFileUseDoublesConfig(bool) Constructs a new XFileUseDoublesConfig. Declaration public XFileUseDoublesConfig(bool useDoubles) Parameters Type Name Description bool useDoubles True if the x file uses 64-bit double values rather than 32-bit float values. Properties | Edit this page View Source XFileUseDoublesConfigName Gets the string name used by XFileUseDoublesConfig. Declaration public static string XFileUseDoublesConfigName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Configs.html": {
    "href": "api/SharpAssimp.Configs.html",
    "title": "Namespace SharpAssimp.Configs",
    "summary": "Namespace SharpAssimp.Configs Classes ACEvaluateSubdivisionConfig Configures whether the AC loader evaluates subdivision surfaces (indicated by the presence of the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using the standard Catmull-Clark algorithm. The default value is true. ACSeparateBackfaceCullConfig Configures the AC loader to collect all surfaces which have the \"Backface cull\" flag set in separate meshes. The default value is true. ASEReconstructNormalsConfig Configures the ASE loader to always reconstruct normal vectors basing on the smoothing groups loaded from the file. Some ASE files carry invalid normals, others don't. The default value is true. AnimationAccuracyConfig Configuration for the FindInvalidData step that specifies the floating point accuracy for animation values, specifically the episilon during comparisons. The default value is 0.0f. AppScaleConfig Applies an application-specific scaling to the GlobalScaleConfig to allow for backwards compatibility. Default is 1.0. BooleanPropertyConfig Describes a boolean configuration property. ColladaIgnoreUpDirectionConfig Specifies whether the collada loader will ignore the up direction. Default is false. ColladaUseColladaNamesConfig Specifies whether the Collada loader should use Collada names as node names. If this property is set to true, the Collada names will be used as the node name. The behavior is to use the id tag (resp. sid tag, if no id tag is present) instead. Default is false. DeboneAllOrNoneConfig Configuration that requires all bones to qualify for deboning before any are removed. DeboneThresholdConfig Configures the Debone threshold that is used to determine what bones are removed. ExportPointCloudsConfig Specifies if the export process should disable a validation step that would remove data that does not contain faces. This will enable point cloud data to be exported, since the 3D data is a collection of vertices without face data. FBXConvertToMetersConfig Specifies whether the importer shall convert the unit from centimeter (cm) to meter (m). Default value is false. FBXImportAllGeometryLayersConfig Specifies whether the FBX importer will merge all geometry layers present in the source file or import only the first. Default is true. FBXImportAllMaterialsConfig Specifies whether the FBX importer will import all materials present in the source file or take only the referenced materials, if the importer is configured to import materials at all. Otherwise this will have no effect. Default is false. FBXImportAnimationsConfig Specifies whether the FBX importer will import animations. Default is true. FBXImportCamerasConfig Specifies whether the FBX importer will import cameras. Default is true. FBXImportEmbeddedTexturesConfig Specifies whether the FBX importer will import embedded textures. Default is true. FBXImportEmbeddedTexturesLegacyNamingConfig Specifies if the FBX importer should search for embedded loaded textures, where no embedded texture data is provided. Default is false. FBXImportLightsConfig Specifies whether the FBX importer will import lights. Default is true. FBXImportMaterialsConfig Specifies whether the FBX importer will import materials. Default is true. FBXOptimizeEmptyAnimationCurvesConfig Specifies whether the importer will drop empty animation curves or animation curves which match the bind pose transformation over their entire defined range. Default value is true. FBXPreservePivotsConfig Specifies whether the FBX importer will preserve pivot points for transformations (as extra nodes). If set to false, pivots and offsets will be evaluated whenever possible. Default value is true. FBXStrictModeConfig Specifies whether the FBX importer will act in strict mode in which only the FBX 2013 format is supported and any other sub formats are rejected. FBX 2013 is the primary target for the importer, so this format is best supported and well-tested. Default is false. FavorSpeedConfig Configuration that is a hint to Assimp to favor speed against import quality. Enabling this option may result in faster loading, or it may not. It is just a hint to loaders and post-process steps to use faster code paths if possible. The default value is false. FloatPropertyConfig Describes a float configuration property. GlobalKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the \"global\" keyframe that will be imported. There are other configs for specific importers that will override the global setting. GlobalScaleConfig Configures the GlobalScale step to scale the entire scene by a certain amount. Some importers provide a mechanism to define a scaling unit for the model, which this processing step can utilize. Default is 1.0. IFCCylindricalTessellationConfig Specifies the tessellation for IFC cylindrical shapes. E.g. the number of segments used to approximate a circle. Accepted range of values is between [3, 180]. IFCSkipSpaceRepresentationsConfig Specifies whether the IFC loader skips over IfcSpace elements. IfcSpace elements (and their geometric representations) are used to represent free space in a building story. IFCSmoothingAngleConfig Specifies the tessellation conic angle for IFC smoothing curves. Accepted range of values is between [5, 120] IFCUseCustomTriangulationConfig Specifies whether the IFC loader will use its own, custom triangulation algorithm to triangulate wall and floor meshes. If this is set to false, walls will be either triangulated by the post process triangulation or will be passed through as huge polygons with faked holes (e.g. holes that are connected with the outer boundary using a dummy edge). It is highly recommended to leave this property set to true as the default post process has some known issues with these kind of polygons. IRRAnimationFrameRateConfig Defines the output frame rate of the IRR loader. IRR animations are difficult to convert for Assimp and there will always be a loss of quality. This setting defines how many keys per second are returned by the converter. The default value is 100 frames per second. IgnoreTextureCoordinatesConfig Configuration for the FindInvalidData step. Set to true to ignore texture coordinates. This may be useful if you have to assign different kinds of textures, like seasonally variable ones - one for summer and one for winter. Default is false. IntegerPropertyConfig Describes an integer configuration property. KeepSceneHierarchyConfig Configuration for the PreTransformVertices step to keep the scene hierarchy. Meshes are moved to worldspace, but no optimization is performed where meshes with the same materials are not joined. This option can be useful if you have a scene hierarchy that contains important additional information which you intend to parse. The default value is false. LWOImportOneLayerConfig Configures the LWO loader to load just one layer from the model. LWO files consist of layers and in some cases it could be useful to load only one of them. This property can be either a string - which specifies the name of the layer - or an integer - the index of the layer. If the property is not set then the whole LWO model is loaded. Loading fails if the requested layer is not vailable. The layer index is zero-based and the layer name may not be empty The default value is false (all layers are loaded). LWSAnimationEndConfig Defines the ending of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. The default value is the one taken from the file Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the end time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation end from the input LWS file. LWSAnimationStartConfig Defines the beginning of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. The default value is the one taken from the file. Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the start time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation start from the input LWS file ('FirstFrame' line) MD2KeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MD2 format. MD3HandleMultiPartConfig Configures the M3D loader to detect and process multi-part Quake player models. These models usually consit of three files, lower.md3, upper.md3 and head.md3. If this propery is set to true, Assimp will try to load and combine all three files if one of them is loaded. The default value is true. MD3KeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MD3 format. MD3ShaderSourceConfig Specifies the Quake 3 shader file to be used for a particular MD3 file. This can be a full path or relative to where all MD3 shaders reside. the default string value is an empty string. MD3SkinNameConfig Tells the MD3 loader which skin files to load. When loading MD3 files, Assimp checks whether a file named \"md3_file_name\"_\"skin_name\".skin exists. These files are used by Quake III to be able to assign different skins (e.g. red and blue team) to models. 'default', 'red', 'blue' are typical skin names. The default string value is \"default\". MD5NoAnimationAutoLoadConfig Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically. The default value is false. The default strategy is to look for a file with the same name but with the MD5ANIm extension in the same directory. If it is found it is loaded and combined with the MD5MESH file. This configuration option can be used to disable this behavior. MDLColorMapConfig Configuration to set the colormap (palette) to be used to decode embedded textures in MDL (Quake or 3DG5) files. This must be a valid path to a file. The file is 768 (256 * 3) bytes alrge and contains RGB triplets for each of the 256 palette entries. If the file is not found, a default palette (from Quake 1) is used. The default value is \"colormap.lmp\". MDLKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the MDL format. MaterialExcludeListConfig Configuration for the the RemoveRedundantMaterials step to determine what materials to keep. If a material matches one of these names it will not be modified or removed by the post processing step. Default is an empty string. MatrixPropertyConfig Describes a Matrix4x4 configuration property. MaxBoneCountConfig Configures the maximum bone count per mesh for the SplitByBoneCount step. Meshes are split until the maximum number of bones is reached. MeasureTimeConfig Configuration to enable time measurements. If enabled, each part of the loading process is timed and logged. Default value is false. MeshTriangleLimitConfig Configuration for the SplitLargeMeshes step that specifies the maximum number of triangles a mesh can contain. The default value is MeshTriangleLimitConfigDefaultValue. MeshVertexLimitConfig Configuration for the SplitLargeMeshes step that specifies the maximum number of vertices a mesh can contain. The default value is MeshVertexLimitConfigDefaultValue. MultithreadingConfig Configuration to set Assimp's multithreading policy. Possible values are -1 to let Assimp decide, 0 to disable multithreading, or any number larger than zero to force a specific number of threads. This is only a hint and may be ignored by Assimp. Default value is -1. NoSkeletonMeshesConfig Global setting to disable generation of skeleton dummy meshes. These are generated as a visualization aid in cases which the input data contains no geometry, but only animation data. So the geometry are visualizing the bones. Default value is false. NodeExcludeListConfig Configuration for the OptimizeGraph step to preserve nodes matching a name in the given list. Nodes that match the names in the list will not be modified or removed. Identifiers containing whitespaces must be enclosed in single quotation marks. The default value is an empty string. NormalSmoothingAngleConfig Configuration to set the maximum angle between two face normals at a vertex when they are smoothed during the step to calculate smooth normals. This is frequently called the \"crease angle\". The maximum and default value is 175 degrees. NormalizeVertexComponentsConfig Configuration for the PreTransformVertices step to normalize all vertex components into the -1...1 range. The default value is false. OgreMaterialFileConfig The Ogre importer will try to load this MaterialFile. Ogre meshes reference with material names, this does not tell Assimp where the file is located. Assimp will try to find the source file in the following order: [material-name].material, [mesh-filename-base].material, and lastly the material name defined by this config property. The default value is \"Scene.Material\". OgreTextureTypeFromFilenameConfig The Ogre importer will detect the texture usage from the filename. Normally a texture is loaded as a color map, if no target is specified in the material file. If this is enabled, then Assimp will try to detect the type from the texture filename postfix: Normal Maps: _n, _nrm, _nrml, _normal, _normals, _normalmap Specular Maps: _s, _spec, _specular, _specularmap Light Maps: _l, _light, _lightmap, _occ, _occlusion Displacement Maps: _dis, _displacement The matching is case insensitive. Postfix is taken between the last \"_\" and last \".\". The default behavior is to detect type from lower cased texture unit name by matching against: normalmap, specularmap, lightmap, and displacementmap. For both cases if no match is found then, Diffuse is used. The default value is false. PropertyConfig Base property config. RemoveComponentConfig Configuration for the RemoveComponent step that specifies which parts of the data structure is to be removed. If no valid mesh remains after the step, the import fails. The default value i None. RemoveDegeneratePrimitivesCheckAreaConfig Configuration for the FindDegenerates step. If true, the area of the triangles are checked to see if they are greater than 1e-6. If so, the triangle is removed if RemoveDegeneratePrimitivesConfig is set to true. RemoveDegeneratePrimitivesConfig Configuration for the FindDegenerates step to remove degenerted primitives from the import immediately. The default value is false, where degenerated triangles are converted to lines, and degenerated lines to points. RemoveEmptyBonesConfig Specifies whether the importer removes empty bones or not. Empty bones are often used to define connections for other models (e.g. attachment points). Default value is true. RootTransformationConfig Configuration for PreTransformVertices that sets a user defined matrix as the scene root node transformation before transforming vertices. Default value is the identity matrix. SMDKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the SMD format. SmdLoadAnimationListConfig Specifies whether the importer will load multiple animations. Default value is true. SortByPrimitiveTypeConfig Configuration for the SortByPrimitiveType step that specifies which primitive types are to be removed by the step. Specifying all primitive types is illegal. The default value is zero specifying none. StringPropertyConfig Describes a string configuration property. TangentSmoothingAngleConfig Configuration to set the maximum angle that may be between two vertex tangents/bitangents when they are smoothed during the step to calculate the tangent basis. The default value is 45 degrees. TangentTextureChannelIndexConfig Configures which texture channel is used for tangent space computations. The channel must exist or an error will be raised. TerragenComputeTexCoordsConfig Configures the terragen import plugin to compute UV's for terrains, if they are not given. Furthermore, a default texture is assigned. The default value is false. UV coordinates for terrains are so simple to compute that you'll usually want to compute them on your own, if you need them. This option is intended for model viewers which want to offer an easy way to apply textures to terrains. TransformUVConfig Configuration for the TransformUVCoords step that specifies which UV transformations are to be evaluated. The default value is for all combinations (scaling, rotation, translation). UnrealHandleFlagsConfig Configures the UNREAL 3D loader to separate faces with different surface flags (e.g. two-sided vs single-sided). The default value is true. UnrealKeyFrameImportConfig Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). the library reads only one keyframe with vertex animations. By default this is the first frame. This config sets the global override for the Unreal format. VertexBoneWeightLimitConfig Configuration for the LimitBoneWeights step that specifies the maximum number of bone weights per vertex. The default value is VertexBoneWeightLimitConfigDefaultValue. VertexCacheSizeConfig Configuration for the ImproveCacheLocality step that specifies the size of the post-transform vertex cache. The size is given in number of vertices and the default value is VertexCacheSizeConfigDefaultValue. XFileUseDoublesConfig Specifies if the X-file exporter should use 64-bit doubles rather than 32-bit floats."
  },
  "api/SharpAssimp.ConsoleLogStream.html": {
    "href": "api/SharpAssimp.ConsoleLogStream.html",
    "title": "Class ConsoleLogStream",
    "summary": "Class ConsoleLogStream Log stream that writes messages to the Console. Inheritance object LogStream ConsoleLogStream Implements IDisposable Inherited Members LogStream.IsVerboseLoggingEnabled LogStream.UserData LogStream.IsDisposed LogStream.IsAttached LogStream.DetachAllLogstreams() LogStream.GetAttachedLogStreams() LogStream.Attach() LogStream.Detach() LogStream.Log(string) LogStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class ConsoleLogStream : LogStream, IDisposable Constructors | Edit this page View Source ConsoleLogStream() Constructs a new console logstream. Declaration public ConsoleLogStream() | Edit this page View Source ConsoleLogStream(string) Constructs a new console logstream. Declaration public ConsoleLogStream(string userData) Parameters Type Name Description string userData User supplied data Methods | Edit this page View Source LogMessage(string, string) Log a message to the console. Declaration protected override void LogMessage(string msg, string userData) Parameters Type Name Description string msg Message string userData Userdata Overrides LogStream.LogMessage(string, string) Implements IDisposable"
  },
  "api/SharpAssimp.DefaultLogStream.html": {
    "href": "api/SharpAssimp.DefaultLogStream.html",
    "title": "Enum DefaultLogStream",
    "summary": "Enum DefaultLogStream Enumerates predefined log streaming destinations. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum DefaultLogStream Fields Name Description Debugger MSVC only: Stream the log to the debugger (this relies on OutputDebugString from the Win32 SDK). File Stream log to a file StdErr Stream log to the standard error output. StdOut Stream log to the standard output"
  },
  "api/SharpAssimp.EmbeddedTexture.html": {
    "href": "api/SharpAssimp.EmbeddedTexture.html",
    "title": "Class EmbeddedTexture",
    "summary": "Class EmbeddedTexture Represents an embedded texture. Some file formats directly embed texture assets. Embedded textures may be uncompressed, where the data is given in an uncompressed format. Or it may be compressed in a format like png or jpg. In the latter case, the raw file bytes are given so the application must utilize an image decoder (e.g. DevIL) to get access to the actual color data. This object represents both types, so some properties may or may not be valid depending if it is compressed or not. Inheritance object EmbeddedTexture Implements IMarshalable<EmbeddedTexture, AiTexture> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class EmbeddedTexture : IMarshalable<EmbeddedTexture, AiTexture> Constructors | Edit this page View Source EmbeddedTexture() Constructs a new instance of the EmbeddedTexture class. Should use only if reading from a native value. Declaration public EmbeddedTexture() | Edit this page View Source EmbeddedTexture(int, int, Texel[], string) Constructs a new instance of the EmbeddedTexture class. This creates an uncompressed embedded texture. Declaration public EmbeddedTexture(int width, int height, Texel[] uncompressedData, string originalFileName = \"\") Parameters Type Name Description int width Width of the texture int height Height of the texture Texel[] uncompressedData Color data string originalFileName Optional file name for the texture. Exceptions Type Condition ArgumentException Thrown if the data size does not match width * height. | Edit this page View Source EmbeddedTexture(string, byte[], string) Constructs a new instance of the EmbeddedTexture class. This creates a compressed embedded texture. Declaration public EmbeddedTexture(string compressedFormatHint, byte[] compressedData, string originalFileName = \"\") Parameters Type Name Description string compressedFormatHint The 3 character format hint. byte[] compressedData The compressed data. string originalFileName Optional file name for the texture. Properties | Edit this page View Source CompressedData Gets the raw byte data representing the compressed texture. Only valid for compressed textures. Declaration public byte[]? CompressedData { get; } Property Value Type Description byte[] | Edit this page View Source CompressedDataSize Gets the size of the compressed data. Only valid for compressed textures. Declaration public int CompressedDataSize { get; } Property Value Type Description int | Edit this page View Source CompressedFormatHint Gets the format hint to determine the type of compressed data. This hint is a three-character lower-case hint like \"dds\", \"jpg\", \"png\". Declaration public string? CompressedFormatHint { get; } Property Value Type Description string | Edit this page View Source Filename Gets or sets the texture's original filename. Declaration public string Filename { get; set; } Property Value Type Description string | Edit this page View Source HasCompressedData Gets if the embedded texture has compressed data. Only valid for compressed textures. Declaration public bool HasCompressedData { get; } Property Value Type Description bool | Edit this page View Source HasNonCompressedData Gets if the texture has non-compressed texel data. Only valid for non-compressed textures. Declaration public bool HasNonCompressedData { get; } Property Value Type Description bool | Edit this page View Source Height Gets the height of the texture in pixels. Only valid for non-compressed textures. Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source IsCompressed Gets if the texture is compressed or not. Declaration public bool IsCompressed { get; } Property Value Type Description bool | Edit this page View Source NonCompressedData Gets the non-compressed texel data, the array is of size Width * Height. Only valid for non-compressed textures. Declaration public Texel[]? NonCompressedData { get; } Property Value Type Description Texel[] | Edit this page View Source NonCompressedDataSize Gets the size of the non-compressed texel data. Only valid for non-compressed textures. Declaration public int NonCompressedDataSize { get; } Property Value Type Description int | Edit this page View Source Width Gets the width of the texture in pixels. Only valid for non-compressed textures. Declaration public int Width { get; } Property Value Type Description int Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.ExcludeComponent.html": {
    "href": "api/SharpAssimp.ExcludeComponent.html",
    "title": "Enum ExcludeComponent",
    "summary": "Enum ExcludeComponent Enumerates components of the scene or mesh data that can be excluded from the import using the post process step RemoveComponent. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum ExcludeComponent Fields Name Description Animations Removes all node animations. Coressponding scenegraph nodes are NOT removed. Use OptimizeGraph step to remove them. Boneweights Remove all boneweights from all meshes. Scenegraph nodes corresponding to the bones are NOT removed. Use OptimizeGraph step to remove them. Cameras Removes all cameras. The corresponding scenegraph nodes are NOT removed. Use the OptimizeGraph step to do this. Colors Removes all color sets. Lights Removes all light sources. The corresponding scenegraph nodes are NOT removed. Use the OptimizeGraph step to do this. Materials Removes all materials. One default material will be generated. Meshes Removes all meshes. None No components to be excluded. Normals Removes normal vectors TangentBasis Removes tangents/binormals TexCoords Removes all texture UV sets. Textures Removes all embedded textures."
  },
  "api/SharpAssimp.ExportDataBlob.html": {
    "href": "api/SharpAssimp.ExportDataBlob.html",
    "title": "Class ExportDataBlob",
    "summary": "Class ExportDataBlob Describes a blob of exported scene data. Blobs can be nested - each blob may reference another blob, which in turn can reference another and so on. This is used to allow exporters to write more than one output for a given scene, such as material files. Existence of such files depends on the format. Inheritance object ExportDataBlob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class ExportDataBlob Remarks The stream representation of an ExportDataBlob is as follows: String: Name of the Blob int: Length of Binary Data byte[]: Binary Data bool: If has next data blob String: Name of nested blob int: Length of nested blob binary data byte[]: Nested blob binary data bool: If nested blob has next data blob .... Properties | Edit this page View Source Data Get the blob data. Declaration public byte[]? Data { get; } Property Value Type Description byte[] | Edit this page View Source HasData Gets if the blob data is valid. Declaration public bool HasData { get; } Property Value Type Description bool | Edit this page View Source Name Gets the name of the blob. The first and primary blob always has an empty string for a name. Auxillary files that are nested will have names. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source NextBlob Gets the next data blob. Declaration public ExportDataBlob? NextBlob { get; } Property Value Type Description ExportDataBlob Methods | Edit this page View Source FromStream(Stream?) Reads a data blob from the specified stream. Declaration public static ExportDataBlob? FromStream(Stream? stream) Parameters Type Name Description Stream stream Input stream Returns Type Description ExportDataBlob Data blob | Edit this page View Source ToStream(Stream) Writes the data blob to the specified stream. Declaration public void ToStream(Stream stream) Parameters Type Name Description Stream stream Output stream"
  },
  "api/SharpAssimp.ExportFormatDescription.html": {
    "href": "api/SharpAssimp.ExportFormatDescription.html",
    "title": "Class ExportFormatDescription",
    "summary": "Class ExportFormatDescription Describes a file format which Assimp can export to. Inheritance object ExportFormatDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class ExportFormatDescription Properties | Edit this page View Source Description Gets a short description of the file format to present to users. Declaration public string Description { get; } Property Value Type Description string | Edit this page View Source FileExtension Gets the recommended file extension for the exported file in lower case. Declaration public string FileExtension { get; } Property Value Type Description string | Edit this page View Source FormatId Gets a short string ID to uniquely identify the export format. E.g. \"collada\" or \"obj\". Declaration public string FormatId { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Face.html": {
    "href": "api/SharpAssimp.Face.html",
    "title": "Class Face",
    "summary": "Class Face A single face in a mesh, referring to multiple vertices. This can be a triangle if the index count is equal to three, or a polygon if the count is greater than three. Since multiple primitive types can be contained in a single mesh, this approach allows you to better examine how the mesh is constructed. If you use the SortByPrimitiveType post process step flag during import, then each mesh will be homogenous where primitive type is concerned. Inheritance object Face Implements IMarshalable<Face, AiFace> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Face : IMarshalable<Face, AiFace> Constructors | Edit this page View Source Face() Constructs a new instance of the Face class. Declaration public Face() | Edit this page View Source Face(int[]) Constructs a new instance of the Face class. Declaration public Face(int[] indices) Parameters Type Name Description int[] indices Face indices Properties | Edit this page View Source HasIndices Gets if the face has faces (should always be true). Declaration public bool HasIndices { get; } Property Value Type Description bool | Edit this page View Source IndexCount Gets the number of indices defined in the face. Declaration public int IndexCount { get; } Property Value Type Description int | Edit this page View Source Indices Gets or sets the indices that refer to positions of vertex data in the mesh's vertex arrays. Declaration public List<int> Indices { get; } Property Value Type Description List<int> Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.FileIOMode.html": {
    "href": "api/SharpAssimp.FileIOMode.html",
    "title": "Enum FileIOMode",
    "summary": "Enum FileIOMode Defines the desired file I/O mode is when opening a new file. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum FileIOMode Fields Name Description Read Open the file for reading. ReadBinary Open the file for reading binary data from it. ReadText Open the file for reading text data from it. Write Open the file for writing. WriteBinary Open the file for writing binary data to it. WriteText Open the file for writing text data to it."
  },
  "api/SharpAssimp.FileIOSystem.html": {
    "href": "api/SharpAssimp.FileIOSystem.html",
    "title": "Class FileIOSystem",
    "summary": "Class FileIOSystem Simple implementation of an IOSystem that searches for files on the disk. This implementation can be given a number of search directories that it will attempt to locate the file in first, before using the file path given by Assimp. That way, you can load models that have files distributed in a number of other directories besides the root model's. Inheritance object IOSystem FileIOSystem Implements IDisposable Inherited Members IOSystem.IsDisposed IOSystem.OpenFileCount IOSystem.Initialize(AiFileOpenProc, AiFileCloseProc, nint) IOSystem.CloseFile(IOStream) IOSystem.CloseAllFiles() IOSystem.Dispose() IOSystem.Dispose(bool) IOSystem.OnAiFileOpenProc(nint, string, string) IOSystem.OnAiFileCloseProc(nint, nint) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public class FileIOSystem : IOSystem, IDisposable Constructors | Edit this page View Source FileIOSystem() Constructs a new FileIOSystem that does not have any search directories. Declaration public FileIOSystem() | Edit this page View Source FileIOSystem(params string[]?) Constructs a new FileIOSystem that uses the specified search directories. Declaration public FileIOSystem(params string[]? searchPaths) Parameters Type Name Description string[] searchPaths Search directories to search for files in Methods | Edit this page View Source FindFile(string, out string?) Finds the first file that matches the file name (name + extension) in the search paths. Declaration public bool FindFile(string fileName, out string? pathToFile) Parameters Type Name Description string fileName File name (+ extension) to search for string pathToFile Found file path Returns Type Description bool True if the file was found, false otherwise | Edit this page View Source GetSearchDirectories() Gets the search directories the FileIOSystem is using. Declaration public IEnumerable<string> GetSearchDirectories() Returns Type Description IEnumerable<string> Directory paths | Edit this page View Source OpenFile(string, FileIOMode) Opens a stream to a file. Declaration public override IOStream OpenFile(string pathToFile, FileIOMode fileMode) Parameters Type Name Description string pathToFile Path to the file FileIOMode fileMode Desired file access mode Returns Type Description IOStream The IO stream Overrides IOSystem.OpenFile(string, FileIOMode) | Edit this page View Source SetSearchDirectories(params string[]?) Sets the search directories the FileIOSystem will use when searching for files. Declaration public void SetSearchDirectories(params string[]? searchPaths) Parameters Type Name Description string[] searchPaths Directory paths Implements IDisposable"
  },
  "api/SharpAssimp.FreeNativeDelegate.html": {
    "href": "api/SharpAssimp.FreeNativeDelegate.html",
    "title": "Delegate FreeNativeDelegate",
    "summary": "Delegate FreeNativeDelegate Delegate for performing unmanaged memory cleanup. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public delegate void FreeNativeDelegate(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Location in unmanaged memory of the value to cleanup bool freeNative True if the unmanaged memory should be freed, false otherwise"
  },
  "api/SharpAssimp.IMarshalable-2.html": {
    "href": "api/SharpAssimp.IMarshalable-2.html",
    "title": "Interface IMarshalable<Managed, Native>",
    "summary": "Interface IMarshalable<Managed, Native> Represents an object that can be marshaled to and from a native representation. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public interface IMarshalable<Managed, Native> where Managed : class, new() where Native : struct Type Parameters Name Description Managed Managed object type Native Native value type Properties | Edit this page View Source IsNativeBlittable Gets if the native value type is blittable (that is, does not require marshaling by the runtime, e.g. has MarshalAs attributes). Declaration bool IsNativeBlittable { get; } Property Value Type Description bool Methods | Edit this page View Source FromNative(in Native) Reads the unmanaged data from the native value. Declaration void FromNative(in Native nativeValue) Parameters Type Name Description Native nativeValue Input native value | Edit this page View Source ToNative(nint, out Native) Writes the managed data to the native value. Declaration void ToNative(nint thisPtr, out Native nativeValue) Parameters Type Name Description nint thisPtr Optional pointer to the memory that will hold the native value. Native nativeValue Output native value"
  },
  "api/SharpAssimp.INativeCustomMarshaler.html": {
    "href": "api/SharpAssimp.INativeCustomMarshaler.html",
    "title": "Interface INativeCustomMarshaler",
    "summary": "Interface INativeCustomMarshaler Custom marshaler for usage with the MemoryHelper for performing marshaling to-and-from unmanaged memory for non-blittable types. A type must be attributed with NativeCustomMarshalerAttribute to automatically have an instance of its marshaler be utilized. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public interface INativeCustomMarshaler Properties | Edit this page View Source NativeDataSize Gets the native data size in bytes. Declaration int NativeDataSize { get; } Property Value Type Description int Methods | Edit this page View Source MarshalManagedToNative(object, nint) Marshals the managed object to the unmanaged chunk of memory. Declaration void MarshalManagedToNative(object managedObj, nint nativeData) Parameters Type Name Description object managedObj Managed object to marshal. nint nativeData Unmanaged chunk of memory to write to. | Edit this page View Source MarshalNativeToManaged(nint) Marshals the managed object from the unmanaged chunk of memory. Declaration object MarshalNativeToManaged(nint nativeData) Parameters Type Name Description nint nativeData Unmanaged chunk of memory to read from. Returns Type Description object Managed object marshaled."
  },
  "api/SharpAssimp.IOStream.html": {
    "href": "api/SharpAssimp.IOStream.html",
    "title": "Class IOStream",
    "summary": "Class IOStream Defines a stream to some file input or output source. This object is responsible for reading/writing data that is used by Assimp. Inheritance object IOStream Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public abstract class IOStream : IDisposable Constructors | Edit this page View Source IOStream(string, FileIOMode) Constructs a new IOStream. Declaration public IOStream(string pathToFile, FileIOMode fileMode) Parameters Type Name Description string pathToFile Path to file given by Assimp FileIOMode fileMode Desired file access mode | Edit this page View Source IOStream(string, FileIOMode, bool) Constructs a new IOStream. Declaration protected IOStream(string pathToFile, FileIOMode fileMode, bool initialize = true) Parameters Type Name Description string pathToFile Path to file given by Assimp FileIOMode fileMode Desired file access mode bool initialize True if initialize should be immediately called with the default callbacks. Set this to false if your subclass requires a different way to setup the function pointers. Properties | Edit this page View Source FileMode Gets the original desired file access mode. Declaration public FileIOMode FileMode { get; } Property Value Type Description FileIOMode | Edit this page View Source IsDisposed Gets whether or not this IOStream has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsValid Gets whether the stream is in fact valid - that is, the input/output has been properly located and can be read/written. Declaration public abstract bool IsValid { get; } Property Value Type Description bool | Edit this page View Source PathToFile Gets the original path to file given by Assimp. Declaration public string PathToFile { get; } Property Value Type Description string Methods | Edit this page View Source Close() Closes the stream - flushing any data not yet read/written and disposes of resources. Declaration public virtual void Close() | Edit this page View Source Dispose() Disposes of resources held by the IOStream. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True to release both managed and unmanaged resources; False to release only unmanaged resources. | Edit this page View Source ~IOStream() Finalizes an instance of the IOStream class. Declaration protected ~IOStream() | Edit this page View Source Flush() Flushes all data currently in the stream buffers. Declaration public abstract void Flush() | Edit this page View Source GetFileSize() Gets the total file size (in bytes). Declaration public abstract long GetFileSize() Returns Type Description long File size in bytes | Edit this page View Source GetPosition() Gets the current file position pointer (in bytes). Declaration public abstract long GetPosition() Returns Type Description long Current file position pointer (in bytes) | Edit this page View Source Initialize(AiFileWriteProc, AiFileReadProc, AiFileTellProc, AiFileTellProc, AiFileSeek, AiFileFlushProc, nint) Initializes the system by setting up native pointers for Assimp to the specified functions. A reference to each supplied callback is held on to avoid it being GC'ed. Declaration protected void Initialize(AiFileWriteProc aiFileWriteProc, AiFileReadProc aiFileReadProc, AiFileTellProc aiFileTellProc, AiFileTellProc aiFileSizeProc, AiFileSeek aiFileSeek, AiFileFlushProc aiFileFlushProc, nint userData = 0) Parameters Type Name Description AiFileWriteProc aiFileWriteProc Handles write requests. AiFileReadProc aiFileReadProc Handles read requests. AiFileTellProc aiFileTellProc Handles tell requests. AiFileTellProc aiFileSizeProc Handles size requests. AiFileSeek aiFileSeek Handles seek requests. AiFileFlushProc aiFileFlushProc Handles flush requests. nint userData Additional user data, if any. | Edit this page View Source OnAiFileFlushProc(nint) Callback for Assimp that handles flushes. Declaration protected void OnAiFileFlushProc(nint file) Parameters Type Name Description nint file | Edit this page View Source OnAiFileReadProc(nint, nint, nuint, nuint) Callback for Assimp that handles reads. Declaration protected nuint OnAiFileReadProc(nint file, nint dataRead, nuint sizeOfElemInBytes, nuint numElements) Parameters Type Name Description nint file nint dataRead nuint sizeOfElemInBytes nuint numElements Returns Type Description nuint | Edit this page View Source OnAiFileSeekProc(nint, nuint, Origin) Callback for Assimp that handles seeks. Declaration protected ReturnCode OnAiFileSeekProc(nint file, nuint offset, Origin seekOrigin) Parameters Type Name Description nint file nuint offset Origin seekOrigin Returns Type Description ReturnCode | Edit this page View Source OnAiFileSizeProc(nint) Callback for Assimp that handles size requests. Declaration protected nuint OnAiFileSizeProc(nint file) Parameters Type Name Description nint file Returns Type Description nuint | Edit this page View Source OnAiFileTellProc(nint) Callback for Assimp that handles tell requests. Declaration protected nuint OnAiFileTellProc(nint file) Parameters Type Name Description nint file Returns Type Description nuint | Edit this page View Source OnAiFileWriteProc(nint, nint, nuint, nuint) Callback for Assimp that handles writes. Declaration protected nuint OnAiFileWriteProc(nint file, nint dataToWrite, nuint sizeOfElemInBytes, nuint numElements) Parameters Type Name Description nint file nint dataToWrite nuint sizeOfElemInBytes nuint numElements Returns Type Description nuint | Edit this page View Source Read(byte[], long) Reads data from the stream. Declaration public abstract long Read(byte[] dataRead, long count) Parameters Type Name Description byte[] dataRead Byte buffer to store the read data in long count Number of bytes to read Returns Type Description long Number of bytes actually read. Should be equal to the specified count, unless if EoF was hit or an error occured. | Edit this page View Source Seek(long, Origin) Sets the current file position pointer. Declaration public abstract ReturnCode Seek(long offset, Origin seekOrigin) Parameters Type Name Description long offset Offset in bytes from the origin Origin seekOrigin Origin reference Returns Type Description ReturnCode ReturnCode indicating success or failure. | Edit this page View Source Write(byte[], long) Writes data to the stream. Declaration public abstract long Write(byte[] dataToWrite, long count) Parameters Type Name Description byte[] dataToWrite Data to write long count Number of bytes to write Returns Type Description long Number of bytes actually written. Should be equal to the specified count, unless if EoF was hit or an error occured. Implements IDisposable"
  },
  "api/SharpAssimp.IOSystem.html": {
    "href": "api/SharpAssimp.IOSystem.html",
    "title": "Class IOSystem",
    "summary": "Class IOSystem Defines a custom IO handler that can be registered to an importer that will handle I/O for assimp. This includes searching/opening files to read during import, and creating/writing to files during export. Inheritance object IOSystem FileIOSystem Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public abstract class IOSystem : IDisposable Constructors | Edit this page View Source IOSystem() Constructs a new IOSystem. Declaration public IOSystem() | Edit this page View Source IOSystem(bool) Constructs a new IOSystem. Declaration protected IOSystem(bool initialize = true) Parameters Type Name Description bool initialize True if initialize should be immediately called with the default callbacks. Set this to false if your subclass requires a different way to setup the function pointers. Properties | Edit this page View Source IsDisposed Gets whether or not this IOSystem has been disposed. Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source OpenFileCount Gets the number of currently opened streams. Declaration public int OpenFileCount { get; } Property Value Type Description int Methods | Edit this page View Source CloseAllFiles() Closes all outstanding streams owned by this IOSystem. Declaration public virtual void CloseAllFiles() | Edit this page View Source CloseFile(IOStream) Closes a stream that is owned by this IOSystem. Declaration public virtual void CloseFile(IOStream stream) Parameters Type Name Description IOStream stream Stream to close | Edit this page View Source Dispose() Disposes of all resources held by this object. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True to release both managed and unmanaged resources; False to release only unmanaged resources. | Edit this page View Source ~IOSystem() Finalizes an instance of the IOSystem class. Declaration protected ~IOSystem() | Edit this page View Source Initialize(AiFileOpenProc, AiFileCloseProc, nint) Initializes the system by setting up native pointers for Assimp to the specified functions. Declaration protected void Initialize(AiFileOpenProc fileOpenProc, AiFileCloseProc fileCloseProc, nint userData = 0) Parameters Type Name Description AiFileOpenProc fileOpenProc Handles open file requests. AiFileCloseProc fileCloseProc Handles close file requests. nint userData Additional user data, if any. | Edit this page View Source OnAiFileCloseProc(nint, nint) Callback for Assimp that handles a file being closed. Declaration protected void OnAiFileCloseProc(nint fileIO, nint file) Parameters Type Name Description nint fileIO nint file | Edit this page View Source OnAiFileOpenProc(nint, string, string) Callback for Assimp that handles a file being opened. Declaration protected nint OnAiFileOpenProc(nint fileIO, string pathToFile, string mode) Parameters Type Name Description nint fileIO string pathToFile string mode Returns Type Description nint | Edit this page View Source OpenFile(string, FileIOMode) Opens a stream to a file. Declaration public abstract IOStream OpenFile(string pathToFile, FileIOMode fileMode) Parameters Type Name Description string pathToFile Path to the file FileIOMode fileMode Desired file access mode Returns Type Description IOStream The IO stream Implements IDisposable"
  },
  "api/SharpAssimp.ImporterDescription.html": {
    "href": "api/SharpAssimp.ImporterDescription.html",
    "title": "Class ImporterDescription",
    "summary": "Class ImporterDescription Metadata and feature support information for a given importer. Inheritance object ImporterDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class ImporterDescription Properties | Edit this page View Source Author Gets the original author (blank if unknown or assimp team). Declaration public string Author { get; } Property Value Type Description string | Edit this page View Source Comments Gets any implementation comments. Declaration public string Comments { get; } Property Value Type Description string | Edit this page View Source FeatureFlags Gets the features supported by the importer. Declaration public ImporterFeatureFlags FeatureFlags { get; } Property Value Type Description ImporterFeatureFlags | Edit this page View Source FileExtensions Gets the list of file extensions the importer can handle. All entries are lower case and do NOT have a leading dot. Declaration public string[] FileExtensions { get; } Property Value Type Description string[] | Edit this page View Source Maintainer Gets the name of the current maintainer, if empty then the author maintains. Declaration public string Maintainer { get; } Property Value Type Description string | Edit this page View Source MaxVersion Gets the maximum version of the file format supported. If no version scheme, forwards compatible, or importer doesn't care, major/min will be zero. Declaration public Version MaxVersion { get; } Property Value Type Description Version | Edit this page View Source MinVersion Gets the minimum version of the file format supported. If no version scheme, forwards compatible, or importer doesn't care, major/min will be zero. Declaration public Version MinVersion { get; } Property Value Type Description Version | Edit this page View Source Name Gets the name of the importer (e.g. Blender3D Importer) Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.ImporterFeatureFlags.html": {
    "href": "api/SharpAssimp.ImporterFeatureFlags.html",
    "title": "Enum ImporterFeatureFlags",
    "summary": "Enum ImporterFeatureFlags Defines flags that indicate level of support for common features for a given importer. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum ImporterFeatureFlags Fields Name Description Experimental Indicates that the importer is experimental and used with caution - this is only reserved for importers still in development, and not typically yet in released production code. LimitedSupport Indicates that the importer reads only a very particular subset of the file format. This is common for formats that cannot easily be mapped to the Scene data structure. SupportsBinary Indicates there is a binary encoding of the file format and it is supported. SupportsCompressed Indicates there is a compressed encoding of the file format and it is supported. SupportsText Indicates there is a textual encoding of the file format and it is supported."
  },
  "api/SharpAssimp.Light.html": {
    "href": "api/SharpAssimp.Light.html",
    "title": "Class Light",
    "summary": "Class Light Describes a light source in the scene. Assimp supports multiple light sources including spot, point, and directional lights. All are defined by a single structure and distinguished by their parameters. Lights have corresponding nodes in the scenegraph. Some file formats such as 3DS and ASE export a \"target point\", e.g. the point a spot light is looking at (it can even be animated). Assimp writes the target point as a subnode of a spotlight's main node called \"spotName.Target\". However, this is just additional information then, the transform tracks of the main node make the spot light already point in the right direction. Inheritance object Light Implements IMarshalable<Light, AiLight> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Light : IMarshalable<Light, AiLight> Constructors | Edit this page View Source Light() Constructs a new instance of the Light class. Declaration public Light() Properties | Edit this page View Source AngleInnerCone Gets or sets the inner angle of a spot light's light cone. The spot light has maximum influence on objects inside this angle. The angle is given in radians, it is 2PI for point lights and defined for directional lights. Declaration public float AngleInnerCone { get; set; } Property Value Type Description float | Edit this page View Source AngleOuterCone Gets or sets the outer angle of a spot light's light cone. The spot light does not affect objects outside this angle. The angle is given in radians. It is 2PI for point lights and undefined for directional lights. The outer angle must be greater than or equal to the inner angle. Declaration public float AngleOuterCone { get; set; } Property Value Type Description float | Edit this page View Source AreaSize Gets or sets the Width (X) and Height (Y) of the area that represents an Area light. Declaration public Vector2 AreaSize { get; set; } Property Value Type Description Vector2 | Edit this page View Source AttenuationConstant Gets or sets the constant light attenuation factor. The intensity of the light source at a given distance 'd' from the light position is Atten = 1 / (att0 + att1 * d + att2 * d*d) . This member corresponds to the att0 variable in the equation and is undefined for directional lights. Declaration public float AttenuationConstant { get; set; } Property Value Type Description float | Edit this page View Source AttenuationLinear Gets or sets the linear light attenuation factor. The intensity of the light source at a given distance 'd' from the light position is Atten = 1 / (att0 + att1 * d + att2 * d*d) This member corresponds to the att1 variable in the equation and is undefined for directional lights. Declaration public float AttenuationLinear { get; set; } Property Value Type Description float | Edit this page View Source AttenuationQuadratic Gets or sets the quadratic light attenuation factor. The intensity of the light source at a given distance 'd' from the light position is Atten = 1 / (att0 + att1 * d + att2 * d*d) . This member corresponds to the att2 variable in the equation and is undefined for directional lights. Declaration public float AttenuationQuadratic { get; set; } Property Value Type Description float | Edit this page View Source ColorAmbient Gets or sets the ambient color of the light source. The ambient light color is multiplied with the ambient material color to obtain the final color that contributes to the ambient shading term. Declaration public Vector3 ColorAmbient { get; set; } Property Value Type Description Vector3 | Edit this page View Source ColorDiffuse Gets or sets the diffuse color of the light source. The diffuse light color is multiplied with the diffuse material color to obtain the final color that contributes to the diffuse shading term. Declaration public Vector3 ColorDiffuse { get; set; } Property Value Type Description Vector3 | Edit this page View Source ColorSpecular Gets or sets the specular color of the light source. The specular light color is multiplied with the specular material color to obtain the final color that contributes to the specular shading term. Declaration public Vector3 ColorSpecular { get; set; } Property Value Type Description Vector3 | Edit this page View Source Direction Gets or sets the direction of the light source in space, relative to the transformation of the node corresponding to the light. This is undefined for point lights. Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 | Edit this page View Source LightType Gets or sets the type of light source. This should never be undefined. Declaration public LightSourceType LightType { get; set; } Property Value Type Description LightSourceType | Edit this page View Source Name Gets or sets the name of the light source. This corresponds to a node present in the scenegraph. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Position Gets or sets the position of the light source in space, relative to the transformation of the node corresponding to the light. This is undefined for directional lights. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source Up Gets or sets the up vector of the light source in space, relative to the transformation of the node corresponding to the light. This is undefined for point lights. Declaration public Vector3 Up { get; set; } Property Value Type Description Vector3 Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.LightSourceType.html": {
    "href": "api/SharpAssimp.LightSourceType.html",
    "title": "Enum LightSourceType",
    "summary": "Enum LightSourceType Enumerates all supported light sources. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum LightSourceType Fields Name Description Ambient Generic light level of the world, including the bounces of all other light sources. Typically, there's at most one ambient light in a scene and is usually just a constant color. This light does not have a valid position, direction, or other properties - just the color. Area An area light is a rectangle with a predefined size that uniformly emits light from one of its sides. The position is center of the rectangle and the direction is its normal vector. Directional Directional light source that has a well-defined direction but is infinitely far away, e.g. the sun. Point Point light source that has a well-defined position in space but is omni-directional, e.g. a light bulb. Spot Spot light source emits light from a position in space, in a certain direction that is limited by an angle, like a cone. Undefined Unknown light."
  },
  "api/SharpAssimp.LogStream.html": {
    "href": "api/SharpAssimp.LogStream.html",
    "title": "Class LogStream",
    "summary": "Class LogStream Represents a log stream, which receives all log messages and streams them somewhere. Inheritance object LogStream ConsoleLogStream Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public class LogStream : IDisposable Constructors | Edit this page View Source LogStream(LoggingCallback) Constructs a new LogStream. Declaration public LogStream(LoggingCallback callback) Parameters Type Name Description LoggingCallback callback Logging callback that is called when messages are received by the log stream. | Edit this page View Source LogStream(LoggingCallback, string) Constructs a new LogStream. Declaration public LogStream(LoggingCallback callback, string userData) Parameters Type Name Description LoggingCallback callback Logging callback that is called when messages are received by the log stream. string userData User-supplied data | Edit this page View Source LogStream(bool) Constructs a new LogStream. Declaration protected LogStream(bool initialize = true) Parameters Type Name Description bool initialize Whether to immediately initialize the system by setting up native pointers. Set this to false if you want to manually initialize and use custom function pointers for advanced use cases. | Edit this page View Source LogStream(string, bool) Constructs a new LogStream. Declaration protected LogStream(string userData, bool initialize = true) Parameters Type Name Description string userData User-supplied data bool initialize True if initialize should be immediately called with the default callbacks. Set this to false if your subclass requires a different way to setup the function pointers. Properties | Edit this page View Source IsAttached Gets whether or not the logstream is currently attached to the library. Declaration public bool IsAttached { get; } Property Value Type Description bool | Edit this page View Source IsDisposed Gets whether the logstream has been disposed or not. Declaration public bool IsDisposed { get; } Property Value Type Description bool | Edit this page View Source IsVerboseLoggingEnabled Gets or sets, if verbose logging is enabled globally. Declaration public static bool IsVerboseLoggingEnabled { get; set; } Property Value Type Description bool | Edit this page View Source UserData Gets or sets the user data to be passed to the callback. Declaration public string UserData { get; set; } Property Value Type Description string Methods | Edit this page View Source Attach() Attaches the logstream to the library. Declaration public void Attach() | Edit this page View Source Detach() Detaches the logstream from the library. Declaration public void Detach() | Edit this page View Source DetachAllLogstreams() Detaches all active logstreams from the library. Declaration public static void DetachAllLogstreams() | Edit this page View Source Dispose() Releases unmanaged resources held by the LogStream. This should not be called by the user if the logstream is currently attached to an assimp importer. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True to release both managed and unmanaged resources; False to release only unmanaged resources. | Edit this page View Source ~LogStream() Finalizes an instance of the LogStream class. Declaration protected ~LogStream() | Edit this page View Source GetAttachedLogStreams() Gets all active logstreams that are currently attached to the library. Declaration public static IEnumerable<LogStream> GetAttachedLogStreams() Returns Type Description IEnumerable<LogStream> Collection of active logstreams attached to the library. | Edit this page View Source Initialize(AiLogStreamCallback, LoggingCallback?, string, nint) Initializes the stream by setting up native pointers for Assimp to the specified functions. Declaration protected void Initialize(AiLogStreamCallback aiLogStreamCallback, LoggingCallback? callback = null, string userData = \"\", nint assimpUserData = 0) Parameters Type Name Description AiLogStreamCallback aiLogStreamCallback Callback that is marshaled to native code, a reference is held on to avoid it being GC'ed. LoggingCallback callback User callback, if any. Defaults to console if null. string userData User data, or empty. nint assimpUserData Additional assimp user data, if any. | Edit this page View Source Log(string) Logs a message. Declaration public void Log(string msg) Parameters Type Name Description string msg Message contents | Edit this page View Source LogMessage(string, string) Override this method to log a message for a subclass of Logstream, if no callback was set. Declaration protected virtual void LogMessage(string msg, string userData) Parameters Type Name Description string msg Message string userData User data | Edit this page View Source OnAiLogStreamCallback(string, nint) Callback for Assimp that handles a message being logged. Declaration protected void OnAiLogStreamCallback(string msg, nint userData) Parameters Type Name Description string msg nint userData | Edit this page View Source OnAttach() Called when the log stream has been attached to the assimp importer. At this point it may start receiving messages. Declaration protected virtual void OnAttach() | Edit this page View Source OnDetach() Called when the log stream has been detatched from the assimp importer. After this point it will stop receiving messages until it is re-attached. Declaration protected virtual void OnDetach() Implements IDisposable"
  },
  "api/SharpAssimp.LoggingCallback.html": {
    "href": "api/SharpAssimp.LoggingCallback.html",
    "title": "Delegate LoggingCallback",
    "summary": "Delegate LoggingCallback Callback delegate for Assimp's LogStream. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public delegate void LoggingCallback(string msg, string userData) Parameters Type Name Description string msg Log message string userData Supplied user data"
  },
  "api/SharpAssimp.Material.PBRMaterialProperties.html": {
    "href": "api/SharpAssimp.Material.PBRMaterialProperties.html",
    "title": "Class Material.PBRMaterialProperties",
    "summary": "Class Material.PBRMaterialProperties Groups all PBR workflow properties into a single accessor. Inheritance object Material.PBRMaterialProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Material.PBRMaterialProperties Properties | Edit this page View Source HasTextureBaseColor Gets if the material has a base color map (albedo/diffuse) texture in the first texture index. Declaration public bool HasTextureBaseColor { get; } Property Value Type Description bool | Edit this page View Source HasTextureEmissionColor Gets if the material has an emission color map texture in the first texture index. Declaration public bool HasTextureEmissionColor { get; } Property Value Type Description bool | Edit this page View Source HasTextureMetalness Gets if the material has a metalness map texture in the first texture index. Declaration public bool HasTextureMetalness { get; } Property Value Type Description bool | Edit this page View Source HasTextureNormalCamera Gets if the material has a normal map texture in the first texture index. Declaration public bool HasTextureNormalCamera { get; } Property Value Type Description bool | Edit this page View Source HasTextureRoughness Gets if the material has a roughness map texture in the first texture index. Declaration public bool HasTextureRoughness { get; } Property Value Type Description bool | Edit this page View Source TextureBaseColor Gets or sets the base color map (albedo/diffuse) texture properties in the first texture index. Declaration public TextureSlot TextureBaseColor { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureEmissionColor Gets or sets the emission color map texture properties in the first texture index. Declaration public TextureSlot TextureEmissionColor { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureMetalness Gets or sets the metalness map texture properties in the first texture index. Declaration public TextureSlot TextureMetalness { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureNormalCamera Gets or sets the normal map texture properties in the first texture index. Declaration public TextureSlot TextureNormalCamera { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureRoughness Gets or sets the roughness map texture properties in the first texture index. Declaration public TextureSlot TextureRoughness { get; set; } Property Value Type Description TextureSlot"
  },
  "api/SharpAssimp.Material.ShaderMaterialProperties.html": {
    "href": "api/SharpAssimp.Material.ShaderMaterialProperties.html",
    "title": "Class Material.ShaderMaterialProperties",
    "summary": "Class Material.ShaderMaterialProperties Groups all the properties for shader sources in a single accessor. Inheritance object Material.ShaderMaterialProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Material.ShaderMaterialProperties Properties | Edit this page View Source ComputeShader Gets or sets compute shader source code. Declaration public string ComputeShader { get; set; } Property Value Type Description string | Edit this page View Source FragmentShader Gets or sets fragment (pixel) shader source code. Declaration public string FragmentShader { get; set; } Property Value Type Description string | Edit this page View Source GeometryShader Gets or sets geometry shader source code. Declaration public string GeometryShader { get; set; } Property Value Type Description string | Edit this page View Source HasComputeShader Gets if the material has a property for compute shader source code. Declaration public bool HasComputeShader { get; } Property Value Type Description bool | Edit this page View Source HasFragmentShader Gets if the material has a property for fragment (pixel) shader source code. Declaration public bool HasFragmentShader { get; } Property Value Type Description bool | Edit this page View Source HasGeometryShader Gets if the material has a property for geometry shader source code. Declaration public bool HasGeometryShader { get; } Property Value Type Description bool | Edit this page View Source HasPrimitiveShader Gets if the material has a property for primitive (domain) shader source code. Declaration public bool HasPrimitiveShader { get; } Property Value Type Description bool | Edit this page View Source HasShaderLanguageType Gets if the material has a property for shader language type. Declaration public bool HasShaderLanguageType { get; } Property Value Type Description bool | Edit this page View Source HasTesselationShader Gets if the material has a property for tesselation shader source code. Declaration public bool HasTesselationShader { get; } Property Value Type Description bool | Edit this page View Source HasVertexShader Gets if the material has a property for vertex shader source code. Declaration public bool HasVertexShader { get; } Property Value Type Description bool | Edit this page View Source PrimitiveShader Gets or sets primitive (domain) shader source code. Declaration public string PrimitiveShader { get; set; } Property Value Type Description string | Edit this page View Source ShaderLanguageType Gets or sets what language (HLSL, GLSL, etc) any shader source code in this material is of. Declaration public string ShaderLanguageType { get; set; } Property Value Type Description string | Edit this page View Source TesselationShader Gets or sets tesselation shader source code. Declaration public string TesselationShader { get; set; } Property Value Type Description string | Edit this page View Source VertexShader Gets or sets vertex shader source code. Declaration public string VertexShader { get; set; } Property Value Type Description string"
  },
  "api/SharpAssimp.Material.html": {
    "href": "api/SharpAssimp.Material.html",
    "title": "Class Material",
    "summary": "Class Material A material contains all the information that describes how to render a mesh. E.g. textures, colors, and render states. Internally all this information is stored as key-value pair properties. The class contains many convienence methods and properties for accessing non-texture/texture properties without having to know the Assimp material key names. Not all properties may be present, and if they aren't a default value will be returned. Inheritance object Material Implements IMarshalable<Material, AiMaterial> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Material : IMarshalable<Material, AiMaterial> Constructors | Edit this page View Source Material() Constructs a new instance of the Material class. Declaration public Material() Properties | Edit this page View Source BlendMode Gets the blending mode. Default value is Default. Declaration public BlendMode BlendMode { get; set; } Property Value Type Description BlendMode | Edit this page View Source BumpScaling Gets the bump scaling. Default value is 0.0f; Declaration public float BumpScaling { get; set; } Property Value Type Description float | Edit this page View Source ColorAmbient Gets the color ambient. Default value is (.2f, .2f, .2f, 1.0f). Declaration public Vector4 ColorAmbient { get; set; } Property Value Type Description Vector4 | Edit this page View Source ColorDiffuse Gets the color diffuse. Default value is white. Declaration public Vector4 ColorDiffuse { get; set; } Property Value Type Description Vector4 | Edit this page View Source ColorEmissive Gets the color emissive. Default value is black. Declaration public Vector4 ColorEmissive { get; set; } Property Value Type Description Vector4 | Edit this page View Source ColorReflective Gets the color reflective. Default value is black. Declaration public Vector4 ColorReflective { get; set; } Property Value Type Description Vector4 | Edit this page View Source ColorSpecular Gets the color specular. Default value is black. Declaration public Vector4 ColorSpecular { get; set; } Property Value Type Description Vector4 | Edit this page View Source ColorTransparent Gets the color transparent. Default value is black. Declaration public Vector4 ColorTransparent { get; set; } Property Value Type Description Vector4 | Edit this page View Source HasBlendMode Checks if the material has a blend mode property. Declaration public bool HasBlendMode { get; } Property Value Type Description bool | Edit this page View Source HasBumpScaling Checks if the material has a bump scaling property. Declaration public bool HasBumpScaling { get; } Property Value Type Description bool | Edit this page View Source HasColorAmbient Checks if the material has a color ambient property. Declaration public bool HasColorAmbient { get; } Property Value Type Description bool | Edit this page View Source HasColorDiffuse Checks if the material has a color diffuse property. Declaration public bool HasColorDiffuse { get; } Property Value Type Description bool | Edit this page View Source HasColorEmissive Checks if the material has a color emissive property. Declaration public bool HasColorEmissive { get; } Property Value Type Description bool | Edit this page View Source HasColorReflective Checks if the material has a color reflective property. Declaration public bool HasColorReflective { get; } Property Value Type Description bool | Edit this page View Source HasColorSpecular Checks if the material has a color specular property. Declaration public bool HasColorSpecular { get; } Property Value Type Description bool | Edit this page View Source HasColorTransparent Checks if the material has a color transparent property. Declaration public bool HasColorTransparent { get; } Property Value Type Description bool | Edit this page View Source HasName Checks if the material has a name property. Declaration public bool HasName { get; } Property Value Type Description bool | Edit this page View Source HasOpacity Checks if the material has an opacity property. Declaration public bool HasOpacity { get; } Property Value Type Description bool | Edit this page View Source HasReflectivity Checks if the material has a reflectivty property. Declaration public bool HasReflectivity { get; } Property Value Type Description bool | Edit this page View Source HasShaders Gets if the material has embedded shader source code. Declaration public bool HasShaders { get; } Property Value Type Description bool | Edit this page View Source HasShadingMode Checks if the material has a shading-mode property. Declaration public bool HasShadingMode { get; } Property Value Type Description bool | Edit this page View Source HasShininess Checks if the material has a shininess property. Declaration public bool HasShininess { get; } Property Value Type Description bool | Edit this page View Source HasShininessStrength Checks if the material has a shininess strength property. Declaration public bool HasShininessStrength { get; } Property Value Type Description bool | Edit this page View Source HasTextureAmbient Gets if the material has a ambient texture in the first texture index. Declaration public bool HasTextureAmbient { get; } Property Value Type Description bool | Edit this page View Source HasTextureAmbientOcclusion Gets if the material has an ambient occlusion map in in the first texture index. Declaration public bool HasTextureAmbientOcclusion { get; } Property Value Type Description bool | Edit this page View Source HasTextureDiffuse Gets if the material has a diffuse texture in the first texture index. Declaration public bool HasTextureDiffuse { get; } Property Value Type Description bool | Edit this page View Source HasTextureDisplacement Gets if the material has a displacement texture in the first texture index. Declaration public bool HasTextureDisplacement { get; } Property Value Type Description bool | Edit this page View Source HasTextureEmissive Gets if the material has a emissive texture in the first texture index. Declaration public bool HasTextureEmissive { get; } Property Value Type Description bool | Edit this page View Source HasTextureHeight Gets if the material has a height texture in the first texture index. Declaration public bool HasTextureHeight { get; } Property Value Type Description bool | Edit this page View Source HasTextureLightMap Gets if the material has a light map texture in the first texture index. Declaration public bool HasTextureLightMap { get; } Property Value Type Description bool | Edit this page View Source HasTextureNormal Gets if the material has a normal texture in the first texture index. Declaration public bool HasTextureNormal { get; } Property Value Type Description bool | Edit this page View Source HasTextureOpacity Gets if the material has an opacity texture in the first texture index. Declaration public bool HasTextureOpacity { get; } Property Value Type Description bool | Edit this page View Source HasTextureReflection Gets if the material has a reflection texture in the first texture index. Declaration public bool HasTextureReflection { get; } Property Value Type Description bool | Edit this page View Source HasTextureSpecular Gets if the material has a specular texture in the first texture index. Declaration public bool HasTextureSpecular { get; } Property Value Type Description bool | Edit this page View Source HasTransparencyFactor Checks if the material has a transparency factor property. Declaration public bool HasTransparencyFactor { get; } Property Value Type Description bool | Edit this page View Source HasTwoSided Checks if the material has a two-sided property. Declaration public bool HasTwoSided { get; } Property Value Type Description bool | Edit this page View Source HasWireFrame Checks if the material has a wireframe property. Declaration public bool HasWireFrame { get; } Property Value Type Description bool | Edit this page View Source IsPBRMaterial Determines if the material is part of a PBR workflow or not. Declaration public bool IsPBRMaterial { get; } Property Value Type Description bool | Edit this page View Source IsTwoSided Gets if the material should be rendered as two-sided. Default value is false. Declaration public bool IsTwoSided { get; set; } Property Value Type Description bool | Edit this page View Source IsWireFrameEnabled Gets if wireframe should be enabled. Default value is false. Declaration public bool IsWireFrameEnabled { get; set; } Property Value Type Description bool | Edit this page View Source Name Gets the material name value, if any. Default value is an empty string. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Opacity Gets the opacity. Default value is 1.0f. Declaration public float Opacity { get; set; } Property Value Type Description float | Edit this page View Source PBR Gets a group accessor for any PBR properties in the material. Declaration public Material.PBRMaterialProperties PBR { get; } Property Value Type Description Material.PBRMaterialProperties | Edit this page View Source PropertyCount Gets the number of properties contained in the material. Declaration public int PropertyCount { get; } Property Value Type Description int | Edit this page View Source Reflectivity Gets the reflectivity. Default value is 0.0f; Declaration public float Reflectivity { get; set; } Property Value Type Description float | Edit this page View Source Shaders Gets a group accessor for any embedded shader source code in the material. Declaration public Material.ShaderMaterialProperties Shaders { get; } Property Value Type Description Material.ShaderMaterialProperties | Edit this page View Source ShadingMode Gets the shading mode. Default value is None, meaning it is not defined. Declaration public ShadingMode ShadingMode { get; set; } Property Value Type Description ShadingMode | Edit this page View Source Shininess Gets the shininess. Default value is 0.0f; Declaration public float Shininess { get; set; } Property Value Type Description float | Edit this page View Source ShininessStrength Gets the shininess strength. Default vaulue is 1.0f. Declaration public float ShininessStrength { get; set; } Property Value Type Description float | Edit this page View Source TextureAmbient Gets or sets ambient texture properties in the first texture index. Declaration public TextureSlot TextureAmbient { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureAmbientOcclusion Gets or sets ambient occlusion texture properties in the first texture index. Declaration public TextureSlot TextureAmbientOcclusion { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureDiffuse Gets or sets diffuse texture properties in the first texture index. Declaration public TextureSlot TextureDiffuse { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureDisplacement Gets or sets displacement texture properties in the first texture index. Declaration public TextureSlot TextureDisplacement { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureEmissive Gets or sets emissive texture properties in the first texture index. Declaration public TextureSlot TextureEmissive { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureHeight Gets or sets height texture properties in the first texture index. Declaration public TextureSlot TextureHeight { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureLightMap Gets or sets light map texture properties in the first texture index. Declaration public TextureSlot TextureLightMap { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureNormal Gets or sets normal texture properties in the first texture index. Declaration public TextureSlot TextureNormal { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureOpacity Gets or sets opacity texture properties in the first texture index. Declaration public TextureSlot TextureOpacity { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureReflection Gets or sets reflection texture properties in the first texture index. Declaration public TextureSlot TextureReflection { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TextureSpecular Gets or sets specular texture properties in the first texture index. Declaration public TextureSlot TextureSpecular { get; set; } Property Value Type Description TextureSlot | Edit this page View Source TransparencyFactor Gets the transparency factor. This is used to make a surface more or less opaque (0 = opaque, 1 = transparent). Default value is 0.0f. Declaration public float TransparencyFactor { get; set; } Property Value Type Description float Methods | Edit this page View Source AddMaterialTexture(in TextureSlot) Adds a texture to the material - this bulk creates a property for each field. This will either create properties or overwrite existing properties. If the texture has no file path, nothing is added. Declaration public bool AddMaterialTexture(in TextureSlot texture) Parameters Type Name Description TextureSlot texture Texture to add Returns Type Description bool True if the texture properties were added or modified | Edit this page View Source AddMaterialTexture(in TextureSlot, bool) Adds a texture to the material - this bulk creates a property for each field. This will either create properties or overwrite existing properties. If the texture has no file path, nothing is added. Declaration public bool AddMaterialTexture(in TextureSlot texture, bool onlySetFilePath) Parameters Type Name Description TextureSlot texture Texture to add bool onlySetFilePath True to only set the texture's file path, false otherwise Returns Type Description bool True if the texture properties were added or modified | Edit this page View Source AddProperty(MaterialProperty) Adds a property to this material. Declaration public bool AddProperty(MaterialProperty matProp) Parameters Type Name Description MaterialProperty matProp Material property Returns Type Description bool True if the property was successfully added, false otherwise (e.g. null or key already present). | Edit this page View Source Clear() Removes all properties from the material; Declaration public void Clear() | Edit this page View Source CreateFullyQualifiedName(string, TextureType, int) Helper method to construct a fully qualified name from the input parameters. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g. \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". This is the name that is used as the material dictionary key. Declaration public static string CreateFullyQualifiedName(string baseName, TextureType texType, int texIndex) Parameters Type Name Description string baseName Key basename, this must not be null or empty TextureType texType Texture type; non-texture properties should leave this None int texIndex Texture index; non-texture properties should leave this zero. Returns Type Description string The fully qualified name | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. | Edit this page View Source GetAllMaterialTextures() Gets all textures in the material. Declaration public IEnumerable<TextureSlot> GetAllMaterialTextures() Returns Type Description IEnumerable<TextureSlot> The array of textures | Edit this page View Source GetAllProperties() Gets -all- properties contained in the Material. Declaration public MaterialProperty[] GetAllProperties() Returns Type Description MaterialProperty[] All properties in the material property map. | Edit this page View Source GetMaterialTexture(TextureType, int, out TextureSlot) Gets a texture that corresponds to the type/index. Declaration public bool GetMaterialTexture(TextureType texType, int texIndex, out TextureSlot texture) Parameters Type Name Description TextureType texType Texture type int texIndex Texture index TextureSlot texture Texture description Returns Type Description bool True if the texture was found in the material | Edit this page View Source GetMaterialTextureCount(TextureType) Gets all the number of textures that are of the specified texture type. Declaration public int GetMaterialTextureCount(TextureType texType) Parameters Type Name Description TextureType texType Texture type Returns Type Description int Texture count | Edit this page View Source GetMaterialTextures(TextureType) Gets all textures that correspond to the type. Declaration public TextureSlot[] GetMaterialTextures(TextureType type) Parameters Type Name Description TextureType type Texture type Returns Type Description TextureSlot[] The array of textures | Edit this page View Source GetNonTextureProperty(string) Gets the non-texture properties contained in this Material. The name should be the \"base name\", as in it should not contain texture type/texture index information. E.g. \"$clr.diffuse\" rather than \"$clr.diffuse,0,0\". The extra data will be filled in automatically. Declaration public MaterialProperty? GetNonTextureProperty(string baseName) Parameters Type Name Description string baseName Key basename Returns Type Description MaterialProperty The material property, if it exists | Edit this page View Source GetProperty(string) Gets the material property by its fully qualified name. The format is: {baseName},{texType},{texIndex}. E.g. \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". Declaration public MaterialProperty? GetProperty(string fullyQualifiedName) Parameters Type Name Description string fullyQualifiedName Fully qualified name of the property Returns Type Description MaterialProperty The material property, if it exists | Edit this page View Source GetProperty(string, TextureType, int) Gets the material property. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g. \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". Declaration public MaterialProperty? GetProperty(string baseName, TextureType texType, int texIndex) Parameters Type Name Description string baseName Key basename TextureType texType Texture type; non-texture properties should leave this None int texIndex Texture index; non-texture properties should leave this zero. Returns Type Description MaterialProperty The material property, if it exists | Edit this page View Source HasNonTextureProperty(string) Checks if the material has the specified non-texture property. The name should be the \"base name\", as in it should not contain texture type/texture index information. E.g. \"$clr.diffuse\" rather than \"$clr.diffuse,0,0\". The extra data will be filled in automatically. Declaration public bool HasNonTextureProperty(string baseName) Parameters Type Name Description string baseName Key basename Returns Type Description bool True if the property exists, false otherwise. | Edit this page View Source HasProperty(string) Checks if the material has the specified property by looking up its fully qualified name. The format is: {baseName},{texType},{texIndex}. E.g. \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". Declaration public bool HasProperty(string fullyQualifiedName) Parameters Type Name Description string fullyQualifiedName Fully qualified name of the property Returns Type Description bool True if the property exists, false otherwise. | Edit this page View Source HasProperty(string, TextureType, int) Checks if the material has the specified property. All the input parameters are combined into the fully qualified name: {baseName},{texType},{texIndex}. E.g. \"$clr.diffuse,0,0\" or \"$tex.file,1,0\". Declaration public bool HasProperty(string baseName, TextureType texType, int texIndex) Parameters Type Name Description string baseName Key basename TextureType texType Texture type; non-texture properties should leave this None int texIndex Texture index; non-texture properties should leave this zero. Returns Type Description bool True if the property exists, false otherwise. | Edit this page View Source RemoveMaterialTexture(in TextureSlot) Removes a texture from the material - this bulk removes a property for each field. If the texture has no file path, nothing is removed Declaration public bool RemoveMaterialTexture(in TextureSlot texture) Parameters Type Name Description TextureSlot texture Texture to remove Returns Type Description bool True if the texture was removed, false otherwise. | Edit this page View Source RemoveNonTextureProperty(string) Removes a non-texture property from the material. Declaration public bool RemoveNonTextureProperty(string baseName) Parameters Type Name Description string baseName Property name Returns Type Description bool True if the property was removed, false otherwise | Edit this page View Source RemoveProperty(string) Removes a property from the material. Declaration public bool RemoveProperty(string fullyQualifiedName) Parameters Type Name Description string fullyQualifiedName Fully qualified name of the property ({basename},{texType},{texIndex}) Returns Type Description bool True if the property was removed, false otherwise | Edit this page View Source RemoveProperty(string, TextureType, int) Removes a property from the material. Declaration public bool RemoveProperty(string baseName, TextureType texType, int texIndex) Parameters Type Name Description string baseName Name of the property TextureType texType Property texture type int texIndex Property texture index Returns Type Description bool True if the property was removed, false otherwise Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MaterialProperty.html": {
    "href": "api/SharpAssimp.MaterialProperty.html",
    "title": "Class MaterialProperty",
    "summary": "Class MaterialProperty A key-value pairing that represents some material property. Inheritance object MaterialProperty Implements IMarshalable<MaterialProperty, AiMaterialProperty> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class MaterialProperty : IMarshalable<MaterialProperty, AiMaterialProperty> Constructors | Edit this page View Source MaterialProperty() Constructs a new instance of the MaterialProperty class. Declaration public MaterialProperty() | Edit this page View Source MaterialProperty(string, bool) Constructs a new instance of the MaterialProperty class. Constructs a boolean property. Declaration public MaterialProperty(string baseName, bool value) Parameters Type Name Description string baseName Name of the property bool value Property value | Edit this page View Source MaterialProperty(string, byte[]) Constructs a new instance of the MaterialProperty class. Constructs a buffer property. Declaration public MaterialProperty(string baseName, byte[] buffer) Parameters Type Name Description string baseName Base name of the property byte[] buffer Property value | Edit this page View Source MaterialProperty(string, int) Constructs a new instance of the MaterialProperty class. Constructs an integer property. Declaration public MaterialProperty(string baseName, int value) Parameters Type Name Description string baseName Base name of the property int value Property value | Edit this page View Source MaterialProperty(string, int[]) Constructs a new instance of the MaterialProperty class. Creates a int array property. Declaration public MaterialProperty(string baseName, int[] values) Parameters Type Name Description string baseName Base name of the property int[] values Property values | Edit this page View Source MaterialProperty(string, Vector3) Constructs a new instance of the MaterialProperty class. Creates a Vector3 property. Declaration public MaterialProperty(string baseName, Vector3 value) Parameters Type Name Description string baseName Base name of the property Vector3 value Property value | Edit this page View Source MaterialProperty(string, Vector4) Constructs a new instance of the MaterialProperty class. Creates a Vector4 property. Declaration public MaterialProperty(string baseName, Vector4 value) Parameters Type Name Description string baseName Base name of the property Vector4 value Property value | Edit this page View Source MaterialProperty(string, float) Constructs a new instance of the MaterialProperty class. Constructs a float property. Declaration public MaterialProperty(string baseName, float value) Parameters Type Name Description string baseName Base name of the property float value Property value | Edit this page View Source MaterialProperty(string, float[]) Constructs a new instance of the MaterialProperty class. Creates a float array property. Declaration public MaterialProperty(string baseName, float[] values) Parameters Type Name Description string baseName Base name of the property float[] values Property values | Edit this page View Source MaterialProperty(string, string) Constructs a new instance of the MaterialProperty class. Creates a string property. Declaration public MaterialProperty(string baseName, string value) Parameters Type Name Description string baseName Base name of the property string value Property value | Edit this page View Source MaterialProperty(string, string, TextureType, int) Constructs a new instance of the MaterialProperty class. Creates a texture property. Declaration public MaterialProperty(string baseName, string value, TextureType texType, int textureIndex) Parameters Type Name Description string baseName Base name of the property string value Property value TextureType texType Texture type int textureIndex Texture index Properties | Edit this page View Source ByteCount Gets the raw byte data count. Declaration public int ByteCount { get; } Property Value Type Description int | Edit this page View Source FullyQualifiedName Gets the property's fully qualified name. Format: \"{base name},{texture type semantic},{texture index}\". E.g. \"$clr.diffuse,0,0\". This is the key that is used to index the property in the material property map. Declaration public string FullyQualifiedName { get; } Property Value Type Description string | Edit this page View Source HasRawData Checks if the property has data. Declaration public bool HasRawData { get; } Property Value Type Description bool | Edit this page View Source Name Gets or sets the property key name. E.g. $tex.file. This corresponds to the \"AiMatKeys\" base name constants. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source PropertyType Gets or sets the type of property. Declaration public PropertyType PropertyType { get; set; } Property Value Type Description PropertyType | Edit this page View Source RawData Gets the raw byte data. To modify/read this data, see the Get/SetXXXValue methods. Declaration public byte[]? RawData { get; } Property Value Type Description byte[] | Edit this page View Source TextureIndex Gets or sets the texture index, for non-texture properties this is always zero. Declaration public int TextureIndex { get; set; } Property Value Type Description int | Edit this page View Source TextureType Gets or sets the texture type semantic, for non-texture properties this is always None. Declaration public TextureType TextureType { get; set; } Property Value Type Description TextureType Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. | Edit this page View Source GetBooleanValue() Gets the property raw data as a boolean. Declaration public bool GetBooleanValue() Returns Type Description bool Boolean | Edit this page View Source GetDoubleArrayValue() Gets the property raw data as a double array. Declaration public double[]? GetDoubleArrayValue() Returns Type Description double[] Double array | Edit this page View Source GetDoubleValue() Gets the property raw data as a double. Declaration public double GetDoubleValue() Returns Type Description double Double | Edit this page View Source GetFloatArrayValue() Gets the property raw data as a float array. Declaration public float[]? GetFloatArrayValue() Returns Type Description float[] Float array | Edit this page View Source GetFloatArrayValue(int) Gets the property raw data as a float array. Declaration public float[]? GetFloatArrayValue(int count) Parameters Type Name Description int count Number of elements to get Returns Type Description float[] Float array | Edit this page View Source GetFloatValue() Gets the property raw data as a float. Declaration public float GetFloatValue() Returns Type Description float Float | Edit this page View Source GetIntegerArrayValue() Gets the property raw data as an integer array. Declaration public int[]? GetIntegerArrayValue() Returns Type Description int[] Integer array | Edit this page View Source GetIntegerArrayValue(int) Gets the property raw data as an integer array. Declaration public int[]? GetIntegerArrayValue(int count) Parameters Type Name Description int count Number of elements to get Returns Type Description int[] Integer array | Edit this page View Source GetIntegerValue() Gets the property raw data as an integer. Declaration public int GetIntegerValue() Returns Type Description int Integer | Edit this page View Source GetStringValue() Gets the property raw data as a string. Declaration public string? GetStringValue() Returns Type Description string String | Edit this page View Source GetVector3Value() Gets the property raw data as a Vector3. Declaration public Vector3 GetVector3Value() Returns Type Description Vector3 Vector3 | Edit this page View Source GetVector4Value() Gets the property raw data as a Vector4. Declaration public Vector4 GetVector4Value() Returns Type Description Vector4 Vector4 | Edit this page View Source SetBooleanValue(bool) Sets the property raw data as a boolean. Declaration public bool SetBooleanValue(bool value) Parameters Type Name Description bool value Boolean value Returns Type Description bool True if successful, false otherwise | Edit this page View Source SetDoubleArrayValue(double[]) Sets the property raw data as a double array. Declaration public bool SetDoubleArrayValue(double[] values) Parameters Type Name Description double[] values Values to set Returns Type Description bool True if successful, otherwise false | Edit this page View Source SetDoubleValue(double) Sets the property raw data with a double. Declaration public bool SetDoubleValue(double value) Parameters Type Name Description double value Double. Returns Type Description bool True if successful, false otherwise. | Edit this page View Source SetFloatArrayValue(float[]) Sets the property raw data as a float array. Declaration public bool SetFloatArrayValue(float[] values) Parameters Type Name Description float[] values Values to set Returns Type Description bool True if successful, otherwise false | Edit this page View Source SetFloatValue(float) Sets the property raw data with a float. Declaration public bool SetFloatValue(float value) Parameters Type Name Description float value Float. Returns Type Description bool True if successful, false otherwise | Edit this page View Source SetIntegerArrayValue(int[]) Sets the property raw data as an integer array. Declaration public bool SetIntegerArrayValue(int[] values) Parameters Type Name Description int[] values Values to set Returns Type Description bool True if successful, otherwise false | Edit this page View Source SetIntegerValue(int) Sets the property raw data as an integer. Declaration public bool SetIntegerValue(int value) Parameters Type Name Description int value Integer Returns Type Description bool True if successful, false otherwise | Edit this page View Source SetStringValue(string) Sets the property raw data as string. Declaration public bool SetStringValue(string value) Parameters Type Name Description string value String Returns Type Description bool True if successful, false otherwise | Edit this page View Source SetVector3Value(Vector3) Sets the property raw data as a Vector3. Declaration public bool SetVector3Value(Vector3 value) Parameters Type Name Description Vector3 value Vector3 Returns Type Description bool True if successful, false otherwise | Edit this page View Source SetVector4Value(Vector4) Sets the property raw data as a Vector4. Declaration public bool SetVector4Value(Vector4 value) Parameters Type Name Description Vector4 value Vector4 Returns Type Description bool True if successful, false otherwise Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.Matrix3x3.html": {
    "href": "api/SharpAssimp.Matrix3x3.html",
    "title": "Struct Matrix3x3",
    "summary": "Struct Matrix3x3 Represents a 3x3 matrix. Assimp docs say their matrices are always row-major, and it looks like they're only describing the memory layout. Matrices are treated as column vectors however (X base in the first column, Y base the second, and Z base the third) Implements IEquatable<Matrix3x3> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct Matrix3x3 : IEquatable<Matrix3x3> Constructors | Edit this page View Source Matrix3x3(Matrix4x4) Constructs a new Matrix3x3. Declaration public Matrix3x3(Matrix4x4 rotMatrix) Parameters Type Name Description Matrix4x4 rotMatrix A 4x4 matrix to construct from, only taking the rotation/scaling part. | Edit this page View Source Matrix3x3(float, float, float, float, float, float, float, float, float) Represents a 3x3 matrix. Assimp docs say their matrices are always row-major, and it looks like they're only describing the memory layout. Matrices are treated as column vectors however (X base in the first column, Y base the second, and Z base the third) Declaration public Matrix3x3(float A1, float A2, float A3, float B1, float B2, float B3, float C1, float C2, float C3) Parameters Type Name Description float A1 Value at row 1, column 1 of the matrix. float A2 Value at row 1, column 2 of the matrix. float A3 Value at row 1, column 3 of the matrix. float B1 Value at row 2, column 1 of the matrix. float B2 Value at row 2, column 2 of the matrix. float B3 Value at row 2, column 3 of the matrix. float C1 Value at row 3, column 1 of the matrix. float C2 Value at row 3, column 2 of the matrix. float C3 Value at row 3, column 3 of the matrix. Properties | Edit this page View Source A1 Value at row 1, column 1 of the matrix. Declaration public float A1 { readonly get; set; } Property Value Type Description float | Edit this page View Source A2 Value at row 1, column 2 of the matrix. Declaration public float A2 { readonly get; set; } Property Value Type Description float | Edit this page View Source A3 Value at row 1, column 3 of the matrix. Declaration public float A3 { readonly get; set; } Property Value Type Description float | Edit this page View Source B1 Value at row 2, column 1 of the matrix. Declaration public float B1 { readonly get; set; } Property Value Type Description float | Edit this page View Source B2 Value at row 2, column 2 of the matrix. Declaration public float B2 { readonly get; set; } Property Value Type Description float | Edit this page View Source B3 Value at row 2, column 3 of the matrix. Declaration public float B3 { readonly get; set; } Property Value Type Description float | Edit this page View Source C1 Value at row 3, column 1 of the matrix. Declaration public float C1 { readonly get; set; } Property Value Type Description float | Edit this page View Source C2 Value at row 3, column 2 of the matrix. Declaration public float C2 { readonly get; set; } Property Value Type Description float | Edit this page View Source C3 Value at row 3, column 3 of the matrix. Declaration public float C3 { readonly get; set; } Property Value Type Description float | Edit this page View Source Identity Gets the identity matrix. Declaration public static Matrix3x3 Identity { get; } Property Value Type Description Matrix3x3 | Edit this page View Source IsIdentity Gets if this matrix is an identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description bool | Edit this page View Source this[int, int] Gets or sets the value at the specific one-based row, column index. E.g. i = 1, j = 2 gets the value in row 1, column 2 (MA2). Indices out of range return a value of zero. Declaration public float this[int i, int j] { get; set; } Parameters Type Name Description int i One-based Row index int j One-based Column index Property Value Type Description float Matrix value Methods | Edit this page View Source Determinant() Compute the determinant of this matrix. Declaration public float Determinant() Returns Type Description float The determinant | Edit this page View Source FromAngleAxis(float, Vector3) Creates a rotation matrix for a rotation about an arbitrary axis. Declaration public static Matrix3x3 FromAngleAxis(float radians, Vector3 axis) Parameters Type Name Description float radians Rotation angle, in radians Vector3 axis Rotation axis, which should be a normalized vector. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromEulerAnglesXYZ(Vector3) Creates a rotation matrix from a set of euler angles. Declaration public static Matrix3x3 FromEulerAnglesXYZ(Vector3 angles) Parameters Type Name Description Vector3 angles Vector containing the rotation angles about the x, y, z axes, in radians. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromEulerAnglesXYZ(float, float, float) Creates a rotation matrix from a set of euler angles. Declaration public static Matrix3x3 FromEulerAnglesXYZ(float x, float y, float z) Parameters Type Name Description float x Rotation angle about the x-axis, in radians. float y Rotation angle about the y-axis, in radians. float z Rotation angle about the z-axis, in radians. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromRotationX(float) Creates a rotation matrix for a rotation about the x-axis. Declaration public static Matrix3x3 FromRotationX(float radians) Parameters Type Name Description float radians Rotation angle in radians. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromRotationY(float) Creates a rotation matrix for a rotation about the y-axis. Declaration public static Matrix3x3 FromRotationY(float radians) Parameters Type Name Description float radians Rotation angle in radians. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromRotationZ(float) Creates a rotation matrix for a rotation about the z-axis. Declaration public static Matrix3x3 FromRotationZ(float radians) Parameters Type Name Description float radians Rotation angle in radians. Returns Type Description Matrix3x3 The rotation matrix | Edit this page View Source FromScaling(Vector3) Creates a scaling matrix. Declaration public static Matrix3x3 FromScaling(Vector3 scaling) Parameters Type Name Description Vector3 scaling Scaling vector Returns Type Description Matrix3x3 The scaling vector | Edit this page View Source FromToMatrix(Vector3, Vector3) Creates a rotation matrix that rotates a vector called \"from\" into another vector called \"to\". Based on an algorithm by Tomas Moller and John Hudges: \"Efficiently Building a Matrix to Rotate One Vector to Another\" Journal of Graphics Tools, 4(4):1-4, 1999 Declaration public static Matrix3x3 FromToMatrix(Vector3 from, Vector3 to) Parameters Type Name Description Vector3 from Starting vector Vector3 to Ending vector Returns Type Description Matrix3x3 Rotation matrix to rotate from the start to end. | Edit this page View Source Inverse() Inverts the matrix. If the matrix is not invertible all elements are set to NaN. Declaration public void Inverse() | Edit this page View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides ValueType.ToString() | Edit this page View Source Transform(Vector3) Performs matrix-vector multiplication identical to the way Assimp does it. Declaration public Vector3 Transform(Vector3 v) Parameters Type Name Description Vector3 v Vector to transform Returns Type Description Vector3 Transformed vector | Edit this page View Source Transpose() Transposes this matrix (rows become columns, vice versa). Declaration public void Transpose() Operators | Edit this page View Source implicit operator Matrix4x4(Matrix3x3) Implicit conversion from a 3x3 matrix to a 4x4 matrix. Declaration public static implicit operator Matrix4x4(Matrix3x3 mat) Parameters Type Name Description Matrix3x3 mat 3x3 matrix Returns Type Description Matrix4x4 4x4 matrix | Edit this page View Source implicit operator Matrix3x3(Matrix4x4) Implicit conversion from a 4x4 matrix to a 3x3 matrix. Declaration public static implicit operator Matrix3x3(Matrix4x4 mat) Parameters Type Name Description Matrix4x4 mat 4x4 matrix Returns Type Description Matrix3x3 3x3 matrix | Edit this page View Source operator *(Matrix3x3, Matrix3x3) Performs matrix multiplication.Multiplication order is B x A. That way, SRT concatenations are left to right. Declaration public static Matrix3x3 operator *(Matrix3x3 a, Matrix3x3 b) Parameters Type Name Description Matrix3x3 a First matrix Matrix3x3 b Second matrix Returns Type Description Matrix3x3 Multiplied matrix Implements IEquatable<T>"
  },
  "api/SharpAssimp.MemoryHelper.html": {
    "href": "api/SharpAssimp.MemoryHelper.html",
    "title": "Class MemoryHelper",
    "summary": "Class MemoryHelper Helper static class containing functions that aid dealing with unmanaged memory to managed memory conversions. Inheritance object MemoryHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public static class MemoryHelper Methods | Edit this page View Source AllocateMemory(int, int) Allocates unmanaged memory. This memory should only be freed by this helper. Declaration public static nint AllocateMemory(int sizeInBytes, int alignment = 16) Parameters Type Name Description int sizeInBytes Size to allocate int alignment Alignment of the memory, by default aligned along 16-byte boundary. Returns Type Description nint Pointer to the allocated unmanaged memory. | Edit this page View Source AsRef<T>(nint) Casts the pointer into a by-ref value of the specified type. Declaration public static ref T AsRef<T>(nint pSrc) where T : struct Parameters Type Name Description nint pSrc Memory location. Returns Type Description T By-ref value. Type Parameters Name Description T Struct type. | Edit this page View Source ClearMemory(nint, int) Clears the memory to zero. Declaration public static void ClearMemory(nint memoryPtr, int sizeInBytesToClear) Parameters Type Name Description nint memoryPtr Pointer to the memory. int sizeInBytesToClear Number of bytes, starting from the memory pointer, to clear. | Edit this page View Source CopyMemory(nint, nint, int) Performs a memcopy that copies data from the memory pointed to by the source pointer to the memory pointer by the destination pointer. Declaration public static void CopyMemory(nint pDest, nint pSrc, int sizeInBytesToCopy) Parameters Type Name Description nint pDest Destination memory location nint pSrc Source memory location int sizeInBytesToCopy Number of bytes to copy | Edit this page View Source FreeMemory(nint) Frees unmanaged memory that was allocated by this helper. Declaration public static void FreeMemory(nint memoryPtr) Parameters Type Name Description nint memoryPtr Pointer to unmanaged memory to free. | Edit this page View Source FreeNativeArray<T>(nint, int, FreeNativeDelegate, bool) Frees an unmanaged array and performs cleanup for each value. Optionally can free an array of pointers. This can be used on any type that can be marshaled into unmanaged memory. Declaration public static void FreeNativeArray<T>(nint nativeArray, int length, FreeNativeDelegate action, bool arrayOfPointers = false) where T : struct Parameters Type Name Description nint nativeArray Pointer to unmanaged memory int length Number of elements to free FreeNativeDelegate action Delegate that performs the necessary cleanup bool arrayOfPointers True if the pointer is an array of pointers, false otherwise. Type Parameters Name Description T Struct type | Edit this page View Source FromNativeArray<T>(nint, int) Marshals an array of blittable structs from a c-style unmanaged array (void*). This should not be used on non-blittable types that require marshaling by the runtime (e.g. has MarshalAs attributes). Declaration public static T[] FromNativeArray<T>(nint nativeArray, int length) where T : struct Parameters Type Name Description nint nativeArray Pointer to unmanaged memory int length Number of elements to read Returns Type Description T[] Managed array Type Parameters Name Description T Struct type | Edit this page View Source FromNativeArray<Managed, Native>(nint, int, bool) Marshals an array of managed values from a c-style unmanaged array (void*). This also can optionally marshal from an unmanaged array of pointers (void**). Declaration public static Managed[] FromNativeArray<Managed, Native>(nint nativeArray, int length, bool arrayOfPointers = false) where Managed : class, IMarshalable<Managed, Native>, new() where Native : struct Parameters Type Name Description nint nativeArray Pointer to unmanaged memory int length Number of elements to marshal bool arrayOfPointers True if the pointer is an array of pointers, false otherwise. Returns Type Description Managed[] Marshaled managed values Type Parameters Name Description Managed Managed type Native Native type | Edit this page View Source FromNativePointer<Managed, Native>(nint) Marshals a managed value from unmanaged memory. Declaration public static Managed? FromNativePointer<Managed, Native>(nint ptr) where Managed : class, IMarshalable<Managed, Native>, new() where Native : struct Parameters Type Name Description nint ptr Pointer to unmanaged memory Returns Type Description Managed The marshaled managed value Type Parameters Name Description Managed Managed type Native Unmanaged type | Edit this page View Source MarshalPointer<T>(in T, nint) Convienence method for marshaling a structure to a pointer. Only use if the type is not blittable, otherwise use the write methods for blittable types. Declaration public static void MarshalPointer<T>(in T value, nint ptr) where T : struct Parameters Type Name Description T value Struct to marshal nint ptr Pointer to unmanaged chunk of memory which must be allocated prior to this call Type Parameters Name Description T Struct type | Edit this page View Source MarshalSizeOf<T>() Computes the size of the struct type using Marshal SizeOf. Only use if the type is not blittable, thus requiring marshaling by the runtime, (e.g. has MarshalAs attributes), otherwise use the SizeOf methods for blittable types. Declaration public static int MarshalSizeOf<T>() where T : struct Returns Type Description int Size of the struct in bytes. Type Parameters Name Description T Struct type | Edit this page View Source MarshalStructure<T>(nint) Convienence method for marshaling a pointer to a structure. Only use if the type is not blittable, otherwise use the read methods for blittable types. Declaration public static T MarshalStructure<T>(nint ptr) where T : struct Parameters Type Name Description nint ptr Pointer to marshal Returns Type Description T The marshaled structure Type Parameters Name Description T Struct type | Edit this page View Source MarshalStructure<T>(nint, out T) Convienence method for marshaling a pointer to a structure. Only use if the type is not blittable, otherwise use the read methods for blittable types. Declaration public static void MarshalStructure<T>(nint ptr, out T value) where T : struct Parameters Type Name Description nint ptr Pointer to marshal T value The marshaled structure Type Parameters Name Description T Struct type | Edit this page View Source ReadStreamFully(Stream, int) Reads a stream until the end is reached into a byte array. Based on Jon Skeet's implementation. It is up to the caller to dispose of the stream. Declaration public static byte[] ReadStreamFully(Stream stream, int initialLength) Parameters Type Name Description Stream stream Stream to read all bytes from int initialLength Initial buffer length, default is 32K Returns Type Description byte[] The byte array containing all the bytes from the stream | Edit this page View Source Read<T>(nint) Reads a single element from the memory location. Declaration public static T Read<T>(nint pSrc) where T : struct Parameters Type Name Description nint pSrc Pointer to memory location Returns Type Description T The read value Type Parameters Name Description T Struct type | Edit this page View Source Read<T>(nint, out T) Reads a single element from the memory location. Declaration public static void Read<T>(nint pSrc, out T value) where T : struct Parameters Type Name Description nint pSrc Pointer to memory location T value The read value. Type Parameters Name Description T Struct type | Edit this page View Source Read<T>(nint, T[], int, int) Reads data from the memory location into the array. Declaration public static void Read<T>(nint pSrc, T[] data, int startIndexInArray, int count) where T : struct Parameters Type Name Description nint pSrc Pointer to memory location T[] data Array to store the copied data int startIndexInArray Zero-based element index to start writing data to in the element array. int count Number of elements to copy Type Parameters Name Description T Struct type | Edit this page View Source SizeOf<T>() Computes the size of the struct type. Declaration public static int SizeOf<T>() where T : struct Returns Type Description int Size of the struct in bytes. Type Parameters Name Description T Struct type | Edit this page View Source SizeOf<T>(T[]) Computes the size of the struct array. Declaration public static int SizeOf<T>(T[] array) where T : struct Parameters Type Name Description T[] array Array of structs Returns Type Description int Total size, in bytes, of the array's contents. Type Parameters Name Description T Struct type | Edit this page View Source ToNativeArray<T>(List<T>) Marshals a list of blittable structs to a c-style unmanaged array (void*). This should not be used on non-blittable types that require marshaling by the runtime (e.g. has MarshalAs attributes). Declaration public static nint ToNativeArray<T>(List<T> managedArray) where T : struct Parameters Type Name Description List<T> managedArray Managed list of structs Returns Type Description nint Pointer to unmanaged memory Type Parameters Name Description T Struct type | Edit this page View Source ToNativeArray<T>(T[]?) Marshals an array of blittable structs to a c-style unmanaged array (void*). This should not be used on non-blittable types that require marshaling by the runtime (e.g. has MarshalAs attributes). Declaration public static nint ToNativeArray<T>(T[]? managedArray) where T : struct Parameters Type Name Description T[] managedArray Managed array of structs Returns Type Description nint Pointer to unmanaged memory Type Parameters Name Description T Struct type | Edit this page View Source ToNativeArray<Managed, Native>(IReadOnlyCollection<Managed>?, bool) Marshals an array of managed values to a c-style unmanaged array (void*). This also can optionally marshal to an unmanaged array of pointers (void**). Declaration public static nint ToNativeArray<Managed, Native>(IReadOnlyCollection<Managed>? managedColl, bool arrayOfPointers = false) where Managed : class, IMarshalable<Managed, Native>, new() where Native : struct Parameters Type Name Description IReadOnlyCollection<Managed> managedColl Collection of managed values bool arrayOfPointers True if the pointer is an array of pointers, false otherwise. Returns Type Description nint Pointer to unmanaged memory Type Parameters Name Description Managed Managed type Native Native type | Edit this page View Source ToNativePointer<Managed, Native>(Managed) Marshals a managed value to unmanaged memory. Declaration public static nint ToNativePointer<Managed, Native>(Managed managedValue) where Managed : class, IMarshalable<Managed, Native>, new() where Native : struct Parameters Type Name Description Managed managedValue Managed value to marshal Returns Type Description nint Pointer to unmanaged memory Type Parameters Name Description Managed Managed type Native Unmanaged type | Edit this page View Source Write<T>(nint, List<T>, int, int) Writes data from the list to the memory location. Declaration public static void Write<T>(nint pDest, List<T> data, int startIndexInArray, int count) where T : struct Parameters Type Name Description nint pDest Pointer to memory location List<T> data List containing data to write int startIndexInArray Zero-based element index to start reading data from in the element array. int count Number of elements to copy Type Parameters Name Description T Struct type | Edit this page View Source Write<T>(nint, in T) Writes a single element to the memory location. Declaration public static void Write<T>(nint pDest, in T data) where T : struct Parameters Type Name Description nint pDest Pointer to memory location T data The value to write Type Parameters Name Description T Struct type | Edit this page View Source Write<T>(nint, T[], int, int) Writes data from the array to the memory location. Declaration public static void Write<T>(nint pDest, T[] data, int startIndexInArray, int count) where T : struct Parameters Type Name Description nint pDest Pointer to memory location T[] data Array containing data to write int startIndexInArray Zero-based element index to start reading data from in the element array. int count Number of elements to copy Type Parameters Name Description T Struct type"
  },
  "api/SharpAssimp.Mesh.html": {
    "href": "api/SharpAssimp.Mesh.html",
    "title": "Class Mesh",
    "summary": "Class Mesh A mesh represents geometry with a single material. Inheritance object Mesh Implements IMarshalable<Mesh, AiMesh> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Mesh : IMarshalable<Mesh, AiMesh> Constructors | Edit this page View Source Mesh() Constructs a new instance of the Mesh class. Declaration public Mesh() | Edit this page View Source Mesh(PrimitiveType) Constructs a new instance of the Mesh class. Declaration public Mesh(PrimitiveType primType) Parameters Type Name Description PrimitiveType primType Primitive types contained in the mesh. | Edit this page View Source Mesh(string) Constructs a new instance of the Mesh class. Declaration public Mesh(string name) Parameters Type Name Description string name Name of the mesh. | Edit this page View Source Mesh(string, PrimitiveType) Constructs a new instance of the Mesh class. Declaration public Mesh(string name, PrimitiveType primType) Parameters Type Name Description string name Name of the mesh PrimitiveType primType Primitive types contained in the mesh. Properties | Edit this page View Source BiTangents Gets the vertex bitangent list. Declaration public List<Vector3> BiTangents { get; } Property Value Type Description List<Vector3> | Edit this page View Source BoneCount Gets the number of bones that influence this mesh. Declaration public int BoneCount { get; } Property Value Type Description int | Edit this page View Source Bones Gets the bones that influence this mesh. Declaration public List<Bone> Bones { get; } Property Value Type Description List<Bone> | Edit this page View Source BoundingBox Gets or sets the axis aligned bounding box that contains the extents of the mesh. Declaration public BoundingBox BoundingBox { get; set; } Property Value Type Description BoundingBox | Edit this page View Source FaceCount Gets the number of faces contained in the mesh. Declaration public int FaceCount { get; } Property Value Type Description int | Edit this page View Source Faces Gets the mesh's faces. Each face will contain indices to the vertices. Declaration public List<Face> Faces { get; } Property Value Type Description List<Face> | Edit this page View Source HasBones Gets if this mesh has bones. Declaration public bool HasBones { get; } Property Value Type Description bool | Edit this page View Source HasFaces Gets if the mesh contains faces. If no special scene flags are set, this should always return true. Declaration public bool HasFaces { get; } Property Value Type Description bool | Edit this page View Source HasMeshAnimationAttachments Gets if this mesh has mesh animation attachments. Declaration public bool HasMeshAnimationAttachments { get; } Property Value Type Description bool | Edit this page View Source HasNormals Gets if the mesh as normals. If it does exist, the count should be the same as the vertex count. Declaration public bool HasNormals { get; } Property Value Type Description bool | Edit this page View Source HasTangentBasis Gets if the mesh has tangents and bitangents. It is not possible for one to be without the other. If it does exist, the count should be the same as the vertex count. Declaration public bool HasTangentBasis { get; } Property Value Type Description bool | Edit this page View Source HasVertices Gets if the mesh has a vertex array. This should always return true provided no special scene flags are set. Declaration public bool HasVertices { get; } Property Value Type Description bool | Edit this page View Source MaterialIndex Gets or sets the index of the material associated with this mesh. Declaration public int MaterialIndex { get; set; } Property Value Type Description int | Edit this page View Source MeshAnimationAttachmentCount Gets the number of mesh animation attachments that influence this mesh. Declaration public int MeshAnimationAttachmentCount { get; } Property Value Type Description int | Edit this page View Source MeshAnimationAttachments Gets the mesh animation attachments that influence this mesh. Declaration public List<MeshAnimationAttachment> MeshAnimationAttachments { get; } Property Value Type Description List<MeshAnimationAttachment> | Edit this page View Source MorphMethod Gets or sets the morph method used when animation attachments are used. Declaration public MeshMorphingMethod MorphMethod { get; set; } Property Value Type Description MeshMorphingMethod | Edit this page View Source Name Gets or sets the mesh name. This tends to be used when formats name nodes and meshes independently, vertex animations refer to meshes by their names, or importers split meshes up, each mesh will reference the same (dummy) name. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Normals Gets the vertex normal list. Declaration public List<Vector3> Normals { get; } Property Value Type Description List<Vector3> | Edit this page View Source PrimitiveType Gets or sets the primitive type. This may contain more than one type unless if SortByPrimitiveType option is not set. Declaration public PrimitiveType PrimitiveType { get; set; } Property Value Type Description PrimitiveType | Edit this page View Source Tangents Gets the vertex tangent list. Declaration public List<Vector3> Tangents { get; } Property Value Type Description List<Vector3> | Edit this page View Source TextureCoordinateChannelCount Gets the number of valid texture coordinate channels contained in the mesh (list is not empty/not null). This can be a value between zero and the maximum texture coordinate count. Each individual channel should be the size of VertexCount. Declaration public int TextureCoordinateChannelCount { get; } Property Value Type Description int | Edit this page View Source TextureCoordinateChannels Gets the array that contains each texture coordinate channel, by default all are lists of zero (but can be set to null). Each index in the array corresponds to the texture coordinate channel. The length of the array corresponds to Assimp's maximum UV channel limit. Declaration public List<Vector3>[] TextureCoordinateChannels { get; } Property Value Type Description List<Vector3>[] | Edit this page View Source UVComponentCount Gets the array that contains the count of UV(W) components for each texture coordinate channel, usually 2 (UV) or 3 (UVW). A component value of zero means the texture coordinate channel does not exist. The channel index (index in the array) corresponds to the texture coordinate channel index. Declaration public int[] UVComponentCount { get; } Property Value Type Description int[] | Edit this page View Source VertexColorChannelCount Gets the number of valid vertex color channels contained in the mesh (list is not empty/not null). This can be a value between zero and the maximum vertex color count. Each individual channel should be the size of VertexCount. Declaration public int VertexColorChannelCount { get; } Property Value Type Description int | Edit this page View Source VertexColorChannels Gets the array that contains each vertex color channels, by default all are lists of zero (but can be set to null). Each index in the array corresponds to the texture coordinate channel. The length of the array corresponds to Assimp's maximum vertex color channel limit. Declaration public List<Vector4>[] VertexColorChannels { get; } Property Value Type Description List<Vector4>[] | Edit this page View Source VertexCount Gets the number of vertices in this mesh. This is the count that all per-vertex lists should be the size of. Declaration public int VertexCount { get; } Property Value Type Description int | Edit this page View Source Vertices Gets the vertex position list. Declaration public List<Vector3> Vertices { get; } Property Value Type Description List<Vector3> Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. | Edit this page View Source GetIndices() Convenience method for accumulating all face indices into a single index array. Declaration public IEnumerable<int> GetIndices() Returns Type Description IEnumerable<int> int index array | Edit this page View Source GetShortIndices() Convenience method for accumulating all face indices into a single index array. Declaration public IEnumerable<short> GetShortIndices() Returns Type Description IEnumerable<short> short index enumerable | Edit this page View Source GetUnsignedIndices() Convenience method for accumulating all face indices into a single index array as unsigned integers (the default from Assimp, if you need them). Declaration public IEnumerable<uint> GetUnsignedIndices() Returns Type Description IEnumerable<uint> uint index enumerable | Edit this page View Source HasTextureCoords(int) Checks if the mesh has texture coordinates for the specified channel. This returns false if the list is null or empty. The channel, if it exists, should contain the same number of entries as VertexCount. Declaration public bool HasTextureCoords(int channelIndex) Parameters Type Name Description int channelIndex Channel index Returns Type Description bool True if texture coordinates are present in the channel. | Edit this page View Source HasVertexColors(int) Checks if the mesh has vertex colors for the specified channel. This returns false if the list is null or empty. The channel, if it exists, should contain the same number of entries as VertexCount. Declaration public bool HasVertexColors(int channelIndex) Parameters Type Name Description int channelIndex Channel index Returns Type Description bool True if vertex colors are present in the channel. | Edit this page View Source SetIndices(int[], int) Convienence method for setting this meshe's face list from an index buffer. Declaration public bool SetIndices(int[] indices, int indicesPerFace) Parameters Type Name Description int[] indices Index buffer int indicesPerFace Indices per face Returns Type Description bool True if the operation succeeded, false otherwise (e.g. not enough data) Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MeshAnimationAttachment.html": {
    "href": "api/SharpAssimp.MeshAnimationAttachment.html",
    "title": "Class MeshAnimationAttachment",
    "summary": "Class MeshAnimationAttachment A mesh attachment store per-vertex animations for a particular frame. You may think of this as a 'patch' for the host mesh, since the mesh attachment replaces only certain vertex data streams at a particular time. Each mesh stores 'n' attached meshes. The actual relationship between the time line and mesh attachments is established by the mesh animation channel, which references singular mesh attachments by their ID and binds them to a time offset. Inheritance object MeshAnimationAttachment Implements IMarshalable<MeshAnimationAttachment, AiAnimMesh> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class MeshAnimationAttachment : IMarshalable<MeshAnimationAttachment, AiAnimMesh> Constructors | Edit this page View Source MeshAnimationAttachment() Constructs a new instance of the MeshAnimationAttachment class. Declaration public MeshAnimationAttachment() Properties | Edit this page View Source BiTangents Gets the vertex bitangent list. Declaration public List<Vector3> BiTangents { get; } Property Value Type Description List<Vector3> | Edit this page View Source HasNormals Checks whether the attachment mesh overrides the vertex normals of its host mesh. Declaration public bool HasNormals { get; } Property Value Type Description bool | Edit this page View Source HasTangentBasis Checks whether the attachment mesh overrides the vertex tangents and bitangents of its host mesh. Declaration public bool HasTangentBasis { get; } Property Value Type Description bool | Edit this page View Source HasVertices Checks whether the attachment mesh overrides the vertex positions of its host mesh. Declaration public bool HasVertices { get; } Property Value Type Description bool | Edit this page View Source Name Gets or sets the mesh animation name. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Normals Gets the vertex normal list. Declaration public List<Vector3> Normals { get; } Property Value Type Description List<Vector3> | Edit this page View Source Tangents Gets the vertex tangent list. Declaration public List<Vector3> Tangents { get; } Property Value Type Description List<Vector3> | Edit this page View Source TextureCoordinateChannelCount Gets the number of valid texture coordinate channels contained in the mesh (list is not empty/not null). This can be a value between zero and the maximum texture coordinate count. Each individual channel should be the size of VertexCount. Declaration public int TextureCoordinateChannelCount { get; } Property Value Type Description int | Edit this page View Source TextureCoordinateChannels Gets the array that contains each texture coordinate channel that override a specific channel in the host mesh, by default all are lists of zero (but can be set to null). Each index in the array corresponds to the texture coordinate channel. The length of the array corresponds to Assimp's maximum UV channel limit. Declaration public List<Vector3>[] TextureCoordinateChannels { get; } Property Value Type Description List<Vector3>[] | Edit this page View Source VertexColorChannelCount Gets the number of valid vertex color channels contained in the mesh (list is not empty/not null). This can be a value between zero and the maximum vertex color count. Each individual channel should be the size of VertexCount. Declaration public int VertexColorChannelCount { get; } Property Value Type Description int | Edit this page View Source VertexColorChannels Gets the array that contains each vertex color channels that override a specific channel in the host mesh, by default all are lists of zero (but can be set to null). Each index in the array corresponds to the texture coordinate channel. The length of the array corresponds to Assimp's maximum vertex color channel limit. Declaration public List<Vector4>[] VertexColorChannels { get; } Property Value Type Description List<Vector4>[] | Edit this page View Source VertexCount Gets the number of vertices in this mesh. This is a replacement for the host mesh's vertex count. Likewise, a mesh attachment cannot add or remove per-vertex attributes, therefore the existance of vertex data will match the existance of data in the mesh. Declaration public int VertexCount { get; } Property Value Type Description int | Edit this page View Source Vertices Gets the vertex position list. Declaration public List<Vector3> Vertices { get; } Property Value Type Description List<Vector3> | Edit this page View Source Weight Gets or sets the weight of the mesh animation. Declaration public float Weight { get; set; } Property Value Type Description float Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. | Edit this page View Source HasTextureCoords(int) Checks if the mesh attachment overrides a particular set of texture coordinates on the host mesh. This returns false if the list is null or empty. The index is between zero and the maximum number of texture coordinate channels. Declaration public bool HasTextureCoords(int channelIndex) Parameters Type Name Description int channelIndex Channel index Returns Type Description bool True if texture coordinates are present in the channel. | Edit this page View Source HasVertexColors(int) Checks if the mesh attachment overrides a particular set of vertex colors on the host mesh. This returns false if the list is null or empty. The index is between zero and the maximumb number of vertex color channels. Declaration public bool HasVertexColors(int channelIndex) Parameters Type Name Description int channelIndex Channel index Returns Type Description bool True if vertex colors are present in the channel. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MeshAnimationChannel.html": {
    "href": "api/SharpAssimp.MeshAnimationChannel.html",
    "title": "Class MeshAnimationChannel",
    "summary": "Class MeshAnimationChannel Describes vertex-based animations for a single mesh or a group of meshes. Meshes carry the animation data for each frame. The purpose of this object is to define keyframes, linking each mesh attachment to a particular point in a time. Inheritance object MeshAnimationChannel Implements IMarshalable<MeshAnimationChannel, AiMeshAnim> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class MeshAnimationChannel : IMarshalable<MeshAnimationChannel, AiMeshAnim> Constructors | Edit this page View Source MeshAnimationChannel() Constructs a new instance of the MeshAnimationChannel class. Declaration public MeshAnimationChannel() Properties | Edit this page View Source HasMeshKeys Gets if this animation channel has mesh keys - this should always be true. Declaration public bool HasMeshKeys { get; } Property Value Type Description bool | Edit this page View Source MeshKeyCount Gets the number of meshkeys in this animation channel. There will always be at least one key. Declaration public int MeshKeyCount { get; } Property Value Type Description int | Edit this page View Source MeshKeys Gets the mesh keyframes of the animation. This should not be null. Declaration public List<MeshKey> MeshKeys { get; } Property Value Type Description List<MeshKey> | Edit this page View Source MeshName Gets or sets the name of the mesh to be animated. Empty strings are not allowed, animation meshes need to be named (not necessarily uniquely, the name can basically serve as a wildcard to select a group of meshes with similar animation setup). Declaration public string MeshName { get; set; } Property Value Type Description string Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MeshKey.html": {
    "href": "api/SharpAssimp.MeshKey.html",
    "title": "Struct MeshKey",
    "summary": "Struct MeshKey Binds an anim mesh (referenced by an index) to a specific point in time. Implements IEquatable<MeshKey> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct MeshKey : IEquatable<MeshKey> Constructors | Edit this page View Source MeshKey(double, int) Binds an anim mesh (referenced by an index) to a specific point in time. Declaration public MeshKey(double Time, int Value) Parameters Type Name Description double Time The time of this key. int Value Index of the anim mesh that corresponds to this keyframe. Properties | Edit this page View Source Time The time of this key. Declaration public double Time { readonly get; set; } Property Value Type Description double | Edit this page View Source Value Index of the anim mesh that corresponds to this keyframe. Declaration public int Value { readonly get; set; } Property Value Type Description int Methods | Edit this page View Source Equals(MeshKey) Tests equality between this key and another. Declaration public bool Equals(MeshKey key) Parameters Type Name Description MeshKey key Other key to test Returns Type Description bool True if their indices are equal | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator >(MeshKey, MeshKey) Tests inequality between two keys. Declaration public static bool operator >(MeshKey a, MeshKey b) Parameters Type Name Description MeshKey a The first key MeshKey b The second key Returns Type Description bool True if the first key's time is greater than the second key's. | Edit this page View Source operator <(MeshKey, MeshKey) Tests inequality between two keys. Declaration public static bool operator <(MeshKey a, MeshKey b) Parameters Type Name Description MeshKey a The first key MeshKey b The second key Returns Type Description bool True if the first key's time is less than the second key's. Implements IEquatable<T>"
  },
  "api/SharpAssimp.MeshMorphAnimationChannel.html": {
    "href": "api/SharpAssimp.MeshMorphAnimationChannel.html",
    "title": "Class MeshMorphAnimationChannel",
    "summary": "Class MeshMorphAnimationChannel Describes morph-based keyframe animations for a single mesh or a group of meshes. Inheritance object MeshMorphAnimationChannel Implements IMarshalable<MeshMorphAnimationChannel, AiMeshMorphAnim> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class MeshMorphAnimationChannel : IMarshalable<MeshMorphAnimationChannel, AiMeshMorphAnim> Constructors | Edit this page View Source MeshMorphAnimationChannel() Constructs a new instance of the MeshMorphAnimationChannel class. Declaration public MeshMorphAnimationChannel() Properties | Edit this page View Source HasMeshMorphKeys Gets if this animation channel has mesh keys - this should always be true. Declaration public bool HasMeshMorphKeys { get; } Property Value Type Description bool | Edit this page View Source MeshMorphKeyCount Gets the number of mesh morph keys in this animation channel. There will always be at least one key. Declaration public int MeshMorphKeyCount { get; } Property Value Type Description int | Edit this page View Source MeshMorphKeys Gets the mesh morph keyframes of the animation. This should not be null. Declaration public List<MeshMorphKey> MeshMorphKeys { get; } Property Value Type Description List<MeshMorphKey> | Edit this page View Source Name Gets or sets the name of the mesh to be animated. Empty strings are not allowed, animation meshes need to be named (not necessarily uniquely, the name can basically serve as a wildcard to select a group of meshes with similar animation setup). Declaration public string Name { get; set; } Property Value Type Description string Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MeshMorphKey.html": {
    "href": "api/SharpAssimp.MeshMorphKey.html",
    "title": "Class MeshMorphKey",
    "summary": "Class MeshMorphKey Binds a morph animation mesh to a specific point in time. Inheritance object MeshMorphKey Implements IMarshalable<MeshMorphKey, AiMeshMorphKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class MeshMorphKey : IMarshalable<MeshMorphKey, AiMeshMorphKey> Constructors | Edit this page View Source MeshMorphKey() Constructs a new instance of the MeshMorphKey class. Declaration public MeshMorphKey() Properties | Edit this page View Source Time Gets or sets the time of this keyframe. Declaration public double Time { get; set; } Property Value Type Description double | Edit this page View Source Values Gets the values at the time of this keyframe. Number of values must equal number of weights. Declaration public List<int> Values { get; } Property Value Type Description List<int> | Edit this page View Source Weights Gets the weights at the time of this keyframe. Number of weights must equal number of values. Declaration public List<double> Weights { get; } Property Value Type Description List<double> Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.MeshMorphingMethod.html": {
    "href": "api/SharpAssimp.MeshMorphingMethod.html",
    "title": "Enum MeshMorphingMethod",
    "summary": "Enum MeshMorphingMethod Defines the methods of mesh morphing supported. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum MeshMorphingMethod Fields Name Description MorphNormalized Normalized morphing between morph targets. MorphRelative Relative morphing between morph targets. Unknown Morphing method to be determined. VertexBlend Interpolation between morph targets."
  },
  "api/SharpAssimp.MetaDataType.html": {
    "href": "api/SharpAssimp.MetaDataType.html",
    "title": "Enum MetaDataType",
    "summary": "Enum MetaDataType Enumerates metadata data types. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum MetaDataType Fields Name Description Bool Metadata is a boolean. Double Metadata is a double. Float Metadata is a float. Int32 Metadata is an integer. Int64 Metadata is a signed 64-bit integer. String Metadata is a string. UInt32 Metadata is an unsigned 32-bit integer. UInt64 Metadata is an unsigned 64-bit integer. Vector3 Metadata is a Vector3."
  },
  "api/SharpAssimp.Metadata.Entry.html": {
    "href": "api/SharpAssimp.Metadata.Entry.html",
    "title": "Struct Metadata.Entry",
    "summary": "Struct Metadata.Entry Represents an entry in a metadata container. Implements IEquatable<Metadata.Entry> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public readonly record struct Metadata.Entry : IEquatable<Metadata.Entry> Constructors | Edit this page View Source Entry(MetaDataType, object) Represents an entry in a metadata container. Declaration public Entry(MetaDataType DataType, object Data) Parameters Type Name Description MetaDataType DataType Type of metadata. object Data Metadata data stored in this entry. Properties | Edit this page View Source Data Metadata data stored in this entry. Declaration public object Data { get; init; } Property Value Type Description object | Edit this page View Source DataType Type of metadata. Declaration public MetaDataType DataType { get; init; } Property Value Type Description MetaDataType Methods | Edit this page View Source DataAs<T>() Gets the data as the specified type. If it cannot be casted to the type, then null is returned. Declaration public T? DataAs<T>() where T : struct Returns Type Description T? Casted data or null. Type Parameters Name Description T Type to cast the data to. Implements IEquatable<T>"
  },
  "api/SharpAssimp.Metadata.html": {
    "href": "api/SharpAssimp.Metadata.html",
    "title": "Class Metadata",
    "summary": "Class Metadata Represents a container for holding metadata, representing as key-value pairs. Inheritance object Dictionary<string, Metadata.Entry> Metadata Implements IDictionary<string, Metadata.Entry> ICollection<KeyValuePair<string, Metadata.Entry>> IReadOnlyDictionary<string, Metadata.Entry> IReadOnlyCollection<KeyValuePair<string, Metadata.Entry>> IEnumerable<KeyValuePair<string, Metadata.Entry>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IMarshalable<Metadata, AiMetadata> Inherited Members Dictionary<string, Metadata.Entry>.Add(string, Metadata.Entry) Dictionary<string, Metadata.Entry>.Clear() Dictionary<string, Metadata.Entry>.ContainsKey(string) Dictionary<string, Metadata.Entry>.ContainsValue(Metadata.Entry) Dictionary<string, Metadata.Entry>.EnsureCapacity(int) Dictionary<string, Metadata.Entry>.GetAlternateLookup<TAlternateKey>() Dictionary<string, Metadata.Entry>.GetEnumerator() Dictionary<string, Metadata.Entry>.OnDeserialization(object) Dictionary<string, Metadata.Entry>.Remove(string) Dictionary<string, Metadata.Entry>.Remove(string, out Metadata.Entry) Dictionary<string, Metadata.Entry>.TrimExcess() Dictionary<string, Metadata.Entry>.TrimExcess(int) Dictionary<string, Metadata.Entry>.TryAdd(string, Metadata.Entry) Dictionary<string, Metadata.Entry>.TryGetAlternateLookup<TAlternateKey>(out Dictionary<string, Metadata.Entry>.AlternateLookup<TAlternateKey>) Dictionary<string, Metadata.Entry>.TryGetValue(string, out Metadata.Entry) Dictionary<string, Metadata.Entry>.Comparer Dictionary<string, Metadata.Entry>.Count Dictionary<string, Metadata.Entry>.Capacity Dictionary<string, Metadata.Entry>.this[string] Dictionary<string, Metadata.Entry>.Keys Dictionary<string, Metadata.Entry>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Metadata : Dictionary<string, Metadata.Entry>, IDictionary<string, Metadata.Entry>, ICollection<KeyValuePair<string, Metadata.Entry>>, IReadOnlyDictionary<string, Metadata.Entry>, IReadOnlyCollection<KeyValuePair<string, Metadata.Entry>>, IEnumerable<KeyValuePair<string, Metadata.Entry>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IMarshalable<Metadata, AiMetadata> Constructors | Edit this page View Source Metadata() Constructs a new instance of the Metadata class. Declaration public Metadata() Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.NativeCustomMarshalerAttribute.html": {
    "href": "api/SharpAssimp.NativeCustomMarshalerAttribute.html",
    "title": "Class NativeCustomMarshalerAttribute",
    "summary": "Class NativeCustomMarshalerAttribute Attribute for assocating a type with an INativeCustomMarshaler instance. Inheritance object Attribute NativeCustomMarshalerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [AttributeUsage(AttributeTargets.Struct)] public sealed class NativeCustomMarshalerAttribute : Attribute Constructors | Edit this page View Source NativeCustomMarshalerAttribute(Type?) Constructs a new instance of the NativeCustomMarshalerAttribute class. Declaration public NativeCustomMarshalerAttribute(Type? type) Parameters Type Name Description Type type Type that implements INativeCustomMarshaler Exceptions Type Condition NullReferenceException Thrown if the type is null. ArgumentException Thrown if the type does not implement INativeCustomMarshaler. Properties | Edit this page View Source Marshaler Gets the associated marshaler. Declaration public INativeCustomMarshaler? Marshaler { get; } Property Value Type Description INativeCustomMarshaler"
  },
  "api/SharpAssimp.Node.html": {
    "href": "api/SharpAssimp.Node.html",
    "title": "Class Node",
    "summary": "Class Node A node in the imported model hierarchy. Inheritance object Node Implements IMarshalable<Node, AiNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Node : IMarshalable<Node, AiNode> Constructors | Edit this page View Source Node() Constructs a new instance of the Node class. Declaration public Node() | Edit this page View Source Node(string) Constructs a new instance of the Node class. Declaration public Node(string name) Parameters Type Name Description string name Name of the node | Edit this page View Source Node(string, Node?) Constructs a new instance of the Node class. Declaration public Node(string name, Node? parent) Parameters Type Name Description string name Name of the node Node parent Parent of the node Properties | Edit this page View Source ChildCount Gets the number of children that is owned by this node. Declaration public int ChildCount { get; } Property Value Type Description int | Edit this page View Source Children Gets the node's children. Declaration public NodeCollection Children { get; } Property Value Type Description NodeCollection | Edit this page View Source HasChildren Gets if the node contains children. Declaration public bool HasChildren { get; } Property Value Type Description bool | Edit this page View Source HasMeshes Gets if the node contains mesh references. Declaration public bool HasMeshes { get; } Property Value Type Description bool | Edit this page View Source MeshCount Gets the number of meshes referenced by this node. Declaration public int MeshCount { get; } Property Value Type Description int | Edit this page View Source MeshIndices Gets the indices of the meshes referenced by this node. Meshes can be shared between nodes, so there is a mesh collection owned by the scene that each node can reference. Declaration public List<int> MeshIndices { get; } Property Value Type Description List<int> | Edit this page View Source Metadata Gets the node's metadata container. Declaration public Metadata Metadata { get; } Property Value Type Description Metadata | Edit this page View Source Name Gets or sets the name of the node. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source Parent Gets the node's parent, if it exists. Declaration public Node? Parent { get; } Property Value Type Description Node | Edit this page View Source Transform Gets or sets the transformation of the node relative to its parent. Declaration public Matrix4x4 Transform { get; set; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source FindNode(string) Finds a node with the specific name, which may be this node or any children or children's children, and so on, if it exists. Declaration public Node? FindNode(string name) Parameters Type Name Description string name Node name Returns Type Description Node The node or null if it does not exist | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.NodeAnimationChannel.html": {
    "href": "api/SharpAssimp.NodeAnimationChannel.html",
    "title": "Class NodeAnimationChannel",
    "summary": "Class NodeAnimationChannel Describes the animation of a single node. The name specifies the bone/node which is affected by this animation chanenl. The keyframes are given in three separate seties of values, one for each position, rotation, and scaling. The transformation matrix is computed from these values and replaces the node's original transformation matrix at a specific time. This means all keys are absolute and not relative to the bone default pose. The order which the transformations are to be applied is scaling, rotation, and translation (SRT). Keys are in chronological order and duplicate keys do not pass the validation step. There most likely will be no negative time values, but they are not forbidden. Inheritance object NodeAnimationChannel Implements IMarshalable<NodeAnimationChannel, AiNodeAnim> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class NodeAnimationChannel : IMarshalable<NodeAnimationChannel, AiNodeAnim> Constructors | Edit this page View Source NodeAnimationChannel() Constructs a new instance of the NodeAnimationChannel class. Declaration public NodeAnimationChannel() Properties | Edit this page View Source HasPositionKeys Gets if this animation channel contains position keys. Declaration public bool HasPositionKeys { get; } Property Value Type Description bool | Edit this page View Source HasRotationKeys Gets if the animation channel contains rotation keys. Declaration public bool HasRotationKeys { get; } Property Value Type Description bool | Edit this page View Source HasScalingKeys Gets if the animation channel contains scaling keys. Declaration public bool HasScalingKeys { get; } Property Value Type Description bool | Edit this page View Source NodeName Gets or sets the name of the node affected by this animation. It must exist and it must be unique. Declaration public string NodeName { get; set; } Property Value Type Description string | Edit this page View Source PositionKeyCount Gets the number of position keys in the animation channel. Declaration public int PositionKeyCount { get; } Property Value Type Description int | Edit this page View Source PositionKeys Gets the position keys of this animation channel. Positions are specified as a 3D vector. If there are position keys, there should also be -at least- one scaling and one rotation key. Declaration public List<VectorKey> PositionKeys { get; } Property Value Type Description List<VectorKey> | Edit this page View Source PostState Gets or sets how the animation behaves after the last key was processed. By default the original transformation matrix of the affected node is taken. Declaration public AnimationBehaviour PostState { get; set; } Property Value Type Description AnimationBehaviour | Edit this page View Source PreState Gets or sets how the animation behaves before the first key is encountered. By default the original transformation matrix of the affected node is used. Declaration public AnimationBehaviour PreState { get; set; } Property Value Type Description AnimationBehaviour | Edit this page View Source RotationKeyCount Gets the number of rotation keys in the animation channel. Declaration public int RotationKeyCount { get; } Property Value Type Description int | Edit this page View Source RotationKeys Gets the rotation keys of this animation channel. Rotations are given as quaternions. If this exists, there should be -at least- one scaling and one position key. Declaration public List<QuaternionKey> RotationKeys { get; } Property Value Type Description List<QuaternionKey> | Edit this page View Source ScalingKeyCount Gets the number of scaling keys in the animation channel. Declaration public int ScalingKeyCount { get; } Property Value Type Description int | Edit this page View Source ScalingKeys Gets the scaling keys of this animation channel. Scalings are specified in a 3D vector. If there are scaling keys, there should also be -at least- one position and one rotation key. Declaration public List<VectorKey> ScalingKeys { get; } Property Value Type Description List<VectorKey> Methods | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.NodeCollection.html": {
    "href": "api/SharpAssimp.NodeCollection.html",
    "title": "Class NodeCollection",
    "summary": "Class NodeCollection A collection of child nodes owned by a parent node. Manages access to the collection while maintaing parent-child linkage. Inheritance object NodeCollection Implements IList<Node> ICollection<Node> IEnumerable<Node> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class NodeCollection : IList<Node?>, ICollection<Node?>, IEnumerable<Node?>, IEnumerable Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public Node? this[int index] { get; set; } Parameters Type Name Description int index The child index Property Value Type Description Node Methods | Edit this page View Source Add(Node?) Adds an item to the ICollection<T>. Declaration public void Add(Node? item) Parameters Type Name Description Node item The object to add to the ICollection<T>. | Edit this page View Source AddRange(Node[]) Adds a range of items to the list. Declaration public void AddRange(Node[] items) Parameters Type Name Description Node[] items Item array | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() | Edit this page View Source Contains(Node?) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(Node? item) Parameters Type Name Description Node item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source CopyTo(Node?[], int) Copies collection contents to the array Declaration public void CopyTo(Node?[] array, int arrayIndex) Parameters Type Name Description Node[] array The array to copy to. int arrayIndex Index of the array to start copying. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<Node> GetEnumerator() Returns Type Description IEnumerator<Node> A IEnumerator<T> that can be used to iterate through the collection. | Edit this page View Source IndexOf(Node?) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(Node? item) Parameters Type Name Description Node item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, Node?) Inserts an item to the IList<T> at the specified index. Declaration public void Insert(int index, Node? item) Parameters Type Name Description int index The zero-based index at which item should be inserted. Node item The object to insert into the IList<T>. | Edit this page View Source Remove(Node?) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(Node? item) Parameters Type Name Description Node item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. | Edit this page View Source RemoveAt(int) Removes the IList<T> item at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the item to remove. Implements IList<T> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/SharpAssimp.Origin.html": {
    "href": "api/SharpAssimp.Origin.html",
    "title": "Enum Origin",
    "summary": "Enum Origin Seek origins for Assimp's virtual file system API. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum Origin Fields Name Description Current Current position of the file pointer. End End of the file, offsets must be negative. Set Beginning of the file"
  },
  "api/SharpAssimp.PostProcessPreset.html": {
    "href": "api/SharpAssimp.PostProcessPreset.html",
    "title": "Class PostProcessPreset",
    "summary": "Class PostProcessPreset Static class containing preset properties for post processing options. Inheritance object PostProcessPreset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public static class PostProcessPreset Properties | Edit this page View Source ConvertToLeftHanded PostProcess configuration for (some) Direct3D conventions, left handed geometry, upper left origin for UV coordinates, and clockwise face order, suitable for CCW culling. Declaration public static PostProcessSteps ConvertToLeftHanded { get; } Property Value Type Description PostProcessSteps | Edit this page View Source TargetRealTimeFast PostProcess configuration for optimizing data for real-time. Does the following steps: CalculateTangentSpace, GenerateNormals, JoinIdenticalVertices, Triangulate, GenerateUVCoords, and SortByPrimitiveType Declaration public static PostProcessSteps TargetRealTimeFast { get; } Property Value Type Description PostProcessSteps | Edit this page View Source TargetRealTimeMaximumQuality PostProcess configuration for heavily optimizing the data for real-time rendering. Includes all flags in TargetRealTimeQuality as well as FindInstances, ValidateDataStructure, and OptimizeMeshes Declaration public static PostProcessSteps TargetRealTimeMaximumQuality { get; } Property Value Type Description PostProcessSteps | Edit this page View Source TargetRealTimeQuality PostProcess configuration for optimizing data for real-time rendering. Does the following steps: CalculateTangentSpace, GenerateSmoothNormals, JoinIdenticalVertices, Triangulate, GenerateUVCoords, SortByPrimitiveType LimitBoneWeights, RemoveRedundantMaterials, SplitLargeMeshes, FindDegenerates, and FindInvalidData Declaration public static PostProcessSteps TargetRealTimeQuality { get; } Property Value Type Description PostProcessSteps"
  },
  "api/SharpAssimp.PostProcessSteps.html": {
    "href": "api/SharpAssimp.PostProcessSteps.html",
    "title": "Enum PostProcessSteps",
    "summary": "Enum PostProcessSteps Post processing flag options, specifying a number of steps that can be run on the data to either generate additional vertex data or optimize the imported data. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum PostProcessSteps : uint Fields Name Description CalculateTangentSpace Calculates the tangents and binormals (bitangents) for the imported meshes. This does nothing if a mesh does not have normals. You might want this post processing step to be executed if you plan to use tangent space calculations such as normal mapping. There is a config setting AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE which allows you to specify a maximimum smoothing angle for the algorithm. However, usually you'll want to leave it at the default value. Debone Removes bones losslessly or according to some threshold. In some cases (e.g. formats that require it) exporters are faced to assign dummy bone weights to otherwise static meshes assigned to animated meshes. Full, weight-based skinning is expensive while animating nodes is extremely cheap, so this step is offered to clean up the data in that regard. Usage of the configuration AI_CONFIG_PP_DB_THRESHOLD to control the threshold and AI_CONFIG_PP_DB_ALL_OR_NONE if you want bones removed if and only if all bones within the scene qualify for removal. DropNormals Drops normals for all faces of all meshes. This is ignored if no normals are present. Face normals are shared between all points of a single face, so a single point can have multiple normals, which forces the library to duplicate vertices in some cases. JoinIdenticalVertices is senseless then. This process gives sense back to JoinIdenticalVertices. EmbedTextures A post processting step to embed textures. This will remove external data dependencies for textures. If a texture's file does not exist at the specified path (due, for instance, to an absolute path generate on another system), it will check if a file with the same name exists at the root folder of the imported model, and if so, embeds that. FindDegenerates This step searches all meshes for degenerated primitives and converts them to proper lines or points. A face is 'degenerated' if one or more of its points are identical. To have degenerated primitives removed, specify the FindDegenerates flag try one of the following procedures: This step also removes very small triangles with a surface area smaller than 10^-6. If you rely on having these small triangles, or notice holes in your model, set the property RemoveDegeneratePrimitivesCheckAreaConfig to false. Degenerated polygons are not necessarily evil and that's why they are not removed by default. There are several file formats which do not support lines or points where exporters bypass the format specification and write them as degenerated triangles instead. FindInstances Searches for duplicated meshes and replaces them with a reference to the first mesh. This is time consuming, so don't use it if you have no time. Its main purpose is to work around the limitation with some file formats that don't support instanced meshes, so exporters duplicate meshes. FindInvalidData This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV coordinates and removes or fixes them. This is intended to get rid of some common exporter rrors. This is especially useful for normals. If they are invalid, and the step recognizes this, they will be removed and can later be recomputed, e.g. by the GenerateSmoothNormals flag. The step will also remove meshes that are infinitely small and reduce animation tracks consisting of hundreds of redundant keys to a single key. The AI_CONFIG_PP_FID_ANIM_ACCURACY config property decides the accuracy of the check for duplicate animation tracks. FixInFacingNormals This step tries to determine which meshes have normal vectors that are facing inwards. The algorithm is simple but effective: The bounding box of all vertices and their normals are compared against the volume of the bounding box of all vertices without their normals. This works well for most objects, problems might occur with planar surfaces. However, the step tries to filter such cases. The step inverts all in-facing normals. Generally, it is recommended to enable this step, although the result is not always correct. FlipUVs Flips all UV coordinates along the y-axis and adjusts material settings/bitangents accordingly. FlipWindingOrder Flips face winding order from CCW (default) to CW. ForceGenerateNormals If the step to generate normals is set, it will not run if normals already exist. This flag will force that step to run even if normals are present. GenerateBoundingBoxes Generate bounding boxes for each mesh. GenerateNormals Generates normals for all faces of all meshes. It may not be specified together with GenerateSmoothNormals. This is ignored if normals are already there at the time where this flag is evaluated. Model importers try to load them from the source file, so they're usually already there. Face normals are shared between all points of a single face, so a single point can have multiple normals, which in other words, forces the library to duplicate vertices in some cases. This makes JoinIdenticalVertices senseless then. GenerateSmoothNormals Generates smooth normals for all vertices of all meshes. It may not be specified together with GenerateNormals. This is ignored if normals are already there at the time where this flag is evaluated. Model importers try to load them from the source file, so they're usually already there. The configuration option AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE allows you to specify an angle maximum for the normal smoothing algorithm. Normals exceeding this limit are not smoothed, resulting in a 'hard' seam between two faces. using a decent angle here (e.g. 80 degrees) results in a very good visual appearance. GenerateUVCoords This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper texture coordinate channels. Most applications will support UV mapping only, so you will probably want to specify this step in every case. Note that Assimp is not always able to match the original mapping implementation of the 3D app which produced a model perfectly. It's always better to let the father app compute the UV channels, at least 3DS max, maya, blender, lightwave, modo, .... are able to achieve this. If this step is not requested, you'll need to process the MATKEY_MAPPING material property in order to display all assets properly. GlobalScale This step will perform a global scale of the model. Some importers provide a mechanism to define a scaling unit for the model, which this processing step can utilize. Use AI_CONFIG_GLOBAL_SCALE_FACTOR_KEY to setup the global scaling factor. ImproveCacheLocality Re-orders triangles for better vertex cache locality. This step tries to improve the ACMR (average post-transform vertex cache miss ratio) for all meshes. The implementation runs in O(n) time and is roughly based on the 'tipsify' algorithm. If you intend to render huge models in hardware, this step might be of interest for you. The AI_CONFIG_PP_ICL_PTCACHE_SIZE config setting can be used to fine tune the cache optimization. JoinIdenticalVertices Identifies and joins identical vertex data sets within all imported meshes. After this step is run, each mesh contains unique vertices, so a vertex may be used by multiple faces. You usually want to use this post processing step. If your application deals with indexed geometry, this step is compulsory or you'll just waste rendering time. If this flag is not specified, no vertices are referenced by more than one face and no index buffer is required for rendering. Unless the importer (like ply) had to split vertices. Then you need one regardless. LimitBoneWeights Limits the number of bones simultaneously affecting a single vertex to a maximum value. If any vertex is affected by more than that number of bones, the least important vertex weights are removed and the remaining vertex weights are re-normalized so that the weights still sum up to 1. The default bone weight limit is 4 and uses the AI_LMW_MAX_WEIGHTS config. If you intend to perform the skinning in hardware, this post processing step might be of interest for you. MakeLeftHanded Converts all imported data to a left handed coordinate space. By default the data is returned in a right-handed coordinate space, where +X points to the right, +Z towards the viewer, and +Y upwards. None No flags enabled. OptimizeGraph Optimizes scene hierarchy. Nodes with no animations, bones, lights, or cameras assigned are collapsed and joined. Node names can be lost during this step, you can specify names of nodes that should'nt be touched or modified with AI_CONFIG_PP_OG_EXCLUDE_LIST. Use this flag with caution. Most simple files will be collapsed to a single node, complex hierarchies are usually completely lost. That's not the right choice for editor environments, but probably a very effective optimization if you just want to get the model data, convert it to your own format and render it as fast as possible. This flag is designed to be used with OptimizeMeshes for best results. Scenes with thousands of extremely small meshes packed in deeply nested nodes exist for almost all file formats. Usage of this and OptimizeMeshes usually fixes them all and makes them renderable. OptimizeMeshes Attempts to reduce the number of meshes (and draw calls). This is recommended to be used together with OptimizeGraph and is fully compatible with both SplitLargeMeshes and SortByPrimitiveType. PreTransformVertices Removes the node graph and \"bakes\" (pre-transforms) all vertices with the local transformation matrices of their nodes. The output scene does still contain nodes, however, there is only a root node with children, each one referencing only one mesh. Each mesh referencing one material. For rendering, you can simply render all meshes in order, you don't need to pay attention to local transformations and the node hierarchy. Warning: Animations are removed during this step. RemoveComponent Removes some parts of the data structure (animations, materials, light sources, cameras, textures, vertex components). The components to be removed are specified in a separate configuration option, AI_CONFIG_PP_RVC_FLAGS. This is quite useful if you don't need all parts of the output structure. Especially vertex colors are rarely used today...calling this step to remove unrequired stuff from the pipeline as early as possible results in an increased performance and a better optimized output data structure. This step is also useful if you want to force Assimp to recompute normals or tangents. the corresponding steps don't recompute them if they're already there (loaded from the source asset). By using this step you can make sure they are NOT there. RemoveRedundantMaterials Searches for redundant/unreferenced materials and removes them. This is especially useful in combination with the PreTransformVertices and OptimizeMeshes flags. Both join small meshes with equal characteristics, but they can't do their work if two meshes have different materials. Because several material settings are always lost during Assimp's import filders and because many exporters don't check for redundant materials, huge models often have materials which are defined several times with exactly the same settings. Several material settings not contributing to the final appearance of a surface are ignored in all comparisons ... the material name is one of them. So, if you're passing additional information through the content pipeline (probably using *magic* material names), don't specify this flag. Alternatively, take a look at the AI_CONFIG_PP_RRM_EXCLUDE_LIST setting. SortByPrimitiveType This step splits meshes with more than one primitive type in homogeneous submeshes. This step is executed after triangulation and after it returns, just one bit is set in aiMesh:mPrimitiveTypes. This is especially useful for real-time rendering where point and line primitives are often ignored or rendered separately. You can use AI_CONFIG_PP_SBP_REMOVE option to specify which primitive types you need. This can be used to easily exclude lines and points, which are rarely used, from the import. SplitByBoneCount Splits meshes with many bones into submeshes so that each submesh has fewer or as many bones as a given limit. SplitLargeMeshes Splits large meshes into smaller submeshes. This is useful for realtime rendering where the number of triangles which can be maximally processed in a single draw call is usually limited by the video driver/hardware. The maximum vertex buffer is usually limited, too. Both requirements can be met with this step: you may specify both a triangle and a vertex limit for a single mesh. The split limits can be set through the AI_CONFIG_PP_SLM_VERTEX_LIMIT and AI_CONFIG_PP_SLM_TRIANGLE_LIMIT config settings. The default values are 1,000,000. Warning: This can be a time consuming task. TransformUVCoords Applies per-texture UV transformations and bakes them to stand-alone vtexture coordinate channels. UV Transformations are specified per-texture - see the MATKEY_UVTRANSFORM material key for more information. This step processes all textures with transformed input UV coordinates and generates new (pretransformed) UV channel transformations, so you will probably want to specify this step. UV transformations are usually implemented in realtime apps by transforming texture coordinates in a vertex shader stage with a 3x3 (homogenous) transformation matrix. Triangulate Triangulates all faces of all meshes. By default the imported mesh data might contain faces with more than three indices. For rendering you'll usually want all faces to be triangles. This post processing step splits up all higher faces to triangles. Line and point primitives are *not* modified. If you want 'triangles only' with no other kinds of primitives, try the following: Specify both Triangulate and SortByPrimitiveType. Ignore all point and line meshes when you process Assimp's output ValidateDataStructure Validates the imported scene data structure. This makes sure that all indices are valid, all animations and bones are linked correctly, all material references are correct, etc. It is recommended to capture Assimp's log output if you use this flag, so you can easily find out what's actually wrong if a file fails the validation. The validator is quite rude and will find *all* inconsistencies in the data structure. There are two types of failures: Error: There's something wrong with the imported data. Further postprocessing is not possible and the data is not usable at all. The import fails. Warning: There are some minor issues (e.g. 1000000 animation keyframes with the same time), but further postprocessing and use of the data structure is still safe. Warning details are written to the log file."
  },
  "api/SharpAssimp.PrimitiveType.html": {
    "href": "api/SharpAssimp.PrimitiveType.html",
    "title": "Enum PrimitiveType",
    "summary": "Enum PrimitiveType Enumerates geometric primitive types. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum PrimitiveType Fields Name Description Line Line primitive. This is a line defined through a start and an end position. A face contains exactly two indices for such a primitive. Point Point primitive. This is just a single vertex in the virtual world. A face has one index for such a primitive. Polygon A n-Gon that has more than three edges (thus is not a triangle). Triangle Triangle primitive, consisting of three indices."
  },
  "api/SharpAssimp.PropertyType.html": {
    "href": "api/SharpAssimp.PropertyType.html",
    "title": "Enum PropertyType",
    "summary": "Enum PropertyType Defines material property types. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum PropertyType Fields Name Description Buffer Byte buffer where the content is undefined. Double Array of double-precision (64 bit) floats. Float Array of single-precision (32 bit) floats. Integer Array of 32 bit integers. String Property is a string."
  },
  "api/SharpAssimp.QuaternionKey.html": {
    "href": "api/SharpAssimp.QuaternionKey.html",
    "title": "Struct QuaternionKey",
    "summary": "Struct QuaternionKey Time-value pair specifying a rotation for a given time. Implements IEquatable<QuaternionKey> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct QuaternionKey : IEquatable<QuaternionKey> Constructors | Edit this page View Source QuaternionKey(double, Quaternion, AnimationInterpolation) Time-value pair specifying a rotation for a given time. Declaration public QuaternionKey(double Time, Quaternion Value, AnimationInterpolation Interpolation = AnimationInterpolation.Linear) Parameters Type Name Description double Time The time of this key. Quaternion Value The rotation of this key. AnimationInterpolation Interpolation The interpolation setting of this key. Properties | Edit this page View Source Interpolation The interpolation setting of this key. Declaration public AnimationInterpolation Interpolation { readonly get; set; } Property Value Type Description AnimationInterpolation | Edit this page View Source Time The time of this key. Declaration public double Time { readonly get; set; } Property Value Type Description double | Edit this page View Source Value The rotation of this key. Declaration public Quaternion Value { readonly get; set; } Property Value Type Description Quaternion Methods | Edit this page View Source Equals(QuaternionKey) Tests equality between this key and another. Declaration public bool Equals(QuaternionKey key) Parameters Type Name Description QuaternionKey key Other key to test Returns Type Description bool True if their rotations are equal. | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator >(QuaternionKey, QuaternionKey) Tests inequality between two keys. Declaration public static bool operator >(QuaternionKey a, QuaternionKey b) Parameters Type Name Description QuaternionKey a The first key QuaternionKey b The second key Returns Type Description bool True if the first key's time is greater than the second key's. | Edit this page View Source operator <(QuaternionKey, QuaternionKey) Tests inequality between two keys. Declaration public static bool operator <(QuaternionKey a, QuaternionKey b) Parameters Type Name Description QuaternionKey a The first key QuaternionKey b The second key Returns Type Description bool True if the first key's time is less than the second key's. Implements IEquatable<T>"
  },
  "api/SharpAssimp.Ray.html": {
    "href": "api/SharpAssimp.Ray.html",
    "title": "Struct Ray",
    "summary": "Struct Ray Defines a 3D ray with a point of origin and a direction. Implements IEquatable<Ray> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct Ray : IEquatable<Ray> Constructors | Edit this page View Source Ray(Vector3, Vector3) Defines a 3D ray with a point of origin and a direction. Declaration public Ray(Vector3 Position, Vector3 Direction) Parameters Type Name Description Vector3 Position Origin of the ray in space.\"> Vector3 Direction Direction of the ray.\"> Properties | Edit this page View Source Direction Direction of the ray.\"> Declaration public Vector3 Direction { readonly get; set; } Property Value Type Description Vector3 | Edit this page View Source Position Origin of the ray in space.\"> Declaration public Vector3 Position { readonly get; set; } Property Value Type Description Vector3 Implements IEquatable<T>"
  },
  "api/SharpAssimp.ReturnCode.html": {
    "href": "api/SharpAssimp.ReturnCode.html",
    "title": "Enum ReturnCode",
    "summary": "Enum ReturnCode Enumerates Assimp function result codes. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum ReturnCode Fields Name Description Failure There was an error. OutOfMemory Assimp ran out of memory. Success Function returned successfully."
  },
  "api/SharpAssimp.Scene.html": {
    "href": "api/SharpAssimp.Scene.html",
    "title": "Class Scene",
    "summary": "Class Scene Represents a completely imported model or scene. Everything that was imported from the given file can be accessed from here. Once the scene is loaded from unmanaged memory, it resides solely in managed memory and Assimp's read only copy is released. Inheritance object Scene Implements IMarshalable<Scene, AiScene> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public sealed class Scene : IMarshalable<Scene, AiScene> Constructors | Edit this page View Source Scene() Constructs a new instance of the Scene class. Declaration public Scene() | Edit this page View Source Scene(string) Constructs a new instance of the Scene class. Declaration public Scene(string name) Parameters Type Name Description string name Name of the scene Properties | Edit this page View Source AnimationCount Gets the number of animations in the scene. Declaration public int AnimationCount { get; } Property Value Type Description int | Edit this page View Source Animations Gets the animations in the scene, if any. Declaration public List<Animation> Animations { get; } Property Value Type Description List<Animation> | Edit this page View Source CameraCount Gets the number of cameras in the scene. Declaration public int CameraCount { get; } Property Value Type Description int | Edit this page View Source Cameras Gets the cameras in the scene, if any. Declaration public List<Camera> Cameras { get; } Property Value Type Description List<Camera> | Edit this page View Source HasAnimations Gets if the scene contains any animations. Declaration public bool HasAnimations { get; } Property Value Type Description bool | Edit this page View Source HasCameras Gets if the scene contains any cameras. Declaration public bool HasCameras { get; } Property Value Type Description bool | Edit this page View Source HasLights Gets if the scene contains any lights. Declaration public bool HasLights { get; } Property Value Type Description bool | Edit this page View Source HasMaterials Gets if the scene contains any materials. There should always be at least the default Assimp material if no materials were loaded. Declaration public bool HasMaterials { get; } Property Value Type Description bool | Edit this page View Source HasMeshes Gets if the scene contains meshes. Unless if no special scene flags are set this should always be true. Declaration public bool HasMeshes { get; } Property Value Type Description bool | Edit this page View Source HasTextures Gets if the scene contains embedded textures. Declaration public bool HasTextures { get; } Property Value Type Description bool | Edit this page View Source LightCount Gets the number of lights in the scene. Declaration public int LightCount { get; } Property Value Type Description int | Edit this page View Source Lights Gets the lights in the scene, if any. Declaration public List<Light> Lights { get; } Property Value Type Description List<Light> | Edit this page View Source MaterialCount Gets the number of materials in the scene. There should always be at least the default Assimp material if no materials were loaded. Declaration public int MaterialCount { get; } Property Value Type Description int | Edit this page View Source Materials Gets the materials in the scene. Declaration public List<Material> Materials { get; } Property Value Type Description List<Material> | Edit this page View Source MeshCount Gets the number of meshes in the scene. Declaration public int MeshCount { get; } Property Value Type Description int | Edit this page View Source Meshes Gets the meshes contained in the scene, if any. Declaration public List<Mesh> Meshes { get; } Property Value Type Description List<Mesh> | Edit this page View Source Metadata Gets the metadata of the scene. This data contains global metadata which belongs to the scene like unit-conversions, versions, vendors or other model-specific data. This can be used to store format-specific metadata as well. Declaration public Metadata Metadata { get; } Property Value Type Description Metadata | Edit this page View Source Name Gets or sets the name of the scene. Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source RootNode Gets or sets the root node of the scene graph. There will always be at least the root node if the import was successful and no special flags have been set. Presence of further nodes depends on the format and content of the imported file. Declaration public Node? RootNode { get; set; } Property Value Type Description Node | Edit this page View Source SceneFlags Gets or sets the state of the imported scene. By default no flags are set, but issues can arise if the flag is set to incomplete. Declaration public SceneFlags SceneFlags { get; set; } Property Value Type Description SceneFlags | Edit this page View Source TextureCount Gets the number of embedded textures in the scene. Declaration public int TextureCount { get; } Property Value Type Description int | Edit this page View Source Textures Gets the embedded textures in the scene, if any. Declaration public List<EmbeddedTexture?> Textures { get; } Property Value Type Description List<EmbeddedTexture> Methods | Edit this page View Source Clear() Clears the scene of all components. Declaration public void Clear() | Edit this page View Source FreeNative(nint, bool) Frees unmanaged memory created by ToNative(nint, out Native). Declaration public static void FreeNative(nint nativeValue, bool freeNative) Parameters Type Name Description nint nativeValue Native value to free bool freeNative True if the unmanaged memory should be freed, false otherwise. | Edit this page View Source FreeUnmanagedScene(nint) Frees unmanaged memory allocated -ONLY- in ToUnmanagedScene(Scene). To free an unmanaged scene allocated by the unmanaged Assimp library, call the appropiate ReleaseImport(nint) function. Declaration public static void FreeUnmanagedScene(nint scenePtr) Parameters Type Name Description nint scenePtr Pointer to unmanaged scene data. | Edit this page View Source FromUnmanagedScene(nint) Marshals an unmanaged scene to managed memory. This does not free the unmanaged memory. Declaration public static Scene? FromUnmanagedScene(nint scenePtr) Parameters Type Name Description nint scenePtr The unmanaged scene data Returns Type Description Scene The managed scene, or null if the pointer is NULL | Edit this page View Source GetEmbeddedTexture(string) Gets an embedded texture by a string. The string may be a texture ID in the format of \"*1\" or is the file name of the texture. Declaration public EmbeddedTexture? GetEmbeddedTexture(string fileName) Parameters Type Name Description string fileName Texture ID or original file name. Returns Type Description EmbeddedTexture Embedded texture or null if it could not be found. | Edit this page View Source ToUnmanagedScene(Scene) Marshals a managed scene to unmanaged memory. The unmanaged memory must be freed with a call to FreeUnmanagedScene(nint), the memory is owned by AssimpNet and cannot be freed by the native library. Declaration public static nint ToUnmanagedScene(Scene scene) Parameters Type Name Description Scene scene Scene data Returns Type Description nint Unmanaged scene or NULL if the scene is null. Implements IMarshalable<Managed, Native>"
  },
  "api/SharpAssimp.SceneFlags.html": {
    "href": "api/SharpAssimp.SceneFlags.html",
    "title": "Enum SceneFlags",
    "summary": "Enum SceneFlags Defines the state of the imported scene data structure. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum SceneFlags Fields Name Description AllowShared Specifies that the scene data can be shared between structures. For example: one vertex in a few faces. This differs from NonVerboseFormat as that has internal meanings about postprocessing steps. Incomplete Specifies that the scene data structure that was imported is not complete. This flag bypasses some internal validations and allows the import of animation skeletons, material libaries, or camera animation paths using SharpAssimp. Most applications won't support such data. NonVerboseFormat This flag is set by the JoinIdenticalVertices post process step. It indicates that the vertices of the output mesh are not in the internal verbose format anymore. In the verbose format, all vertices are unique where no vertex is ever referenced by more than one face. None Default state of the scene, it imported successfully. Terrain Denotes the scene is pure height-map terrain data. Pure terrains usually consist of quads, sometimes triangles, in a regular grid. The x,y coordinates of all vertex positions refer to the x,y coordinates on the terrain height map, the z-axis stores the elevation at a specific point. TER (Terragen) and HMP (3D Game Studio) are height map formats. Validated This flag is set by the ValidateDataStructure post process step if validation is successful. In a validated scene you can be sure that any cross references in the data structure (e.g. vertex indices) are valid. ValidationWarning This flag is set by the ValidateDataStructure post process step if validation is successful, but some issues have been found. This can for example mean that a texture that does not exist is referenced by a material or that the bone weights for a vertex do not sum to 1.0. In most cases you should still be able to use the import. This flag can be useful for applications which do not capture Assimp's log output."
  },
  "api/SharpAssimp.ShadingMode.html": {
    "href": "api/SharpAssimp.ShadingMode.html",
    "title": "Enum ShadingMode",
    "summary": "Enum ShadingMode Defines all shading models supported by the library. The list of shading modes has been taken from Blender. See Blender documentation for more information. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum ShadingMode Fields Name Description Blinn Phong-Blinn Shading. CookTorrance CookTorrance shading model. Special shader for metallic surfaces. Flat Flat shading. Shading is done on a per-face basis and is diffuse only. Also known as 'faceted shading'. Fresnel Fresnel shading. Gouraud Simple Gouraud shading. Minnaert Minnaert shading model. Extension to standard Lambertian shading, taking the \"darkness\" of the material into account. NoShading No shading at all. Constant light influence of 1.0. None No shading mode defined. OrenNayar OrenNayer shading model. Extension to standard Lambertian shading, taking the roughness of the material into account. Phong Phong Shading. Toon Toon-shading, also known as a 'comic' shader."
  },
  "api/SharpAssimp.Texel.html": {
    "href": "api/SharpAssimp.Texel.html",
    "title": "Struct Texel",
    "summary": "Struct Texel Represents a texel in ARGB8888 format. Implements IEquatable<Texel> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct Texel : IEquatable<Texel> Constructors | Edit this page View Source Texel(byte, byte, byte, byte) Represents a texel in ARGB8888 format. Declaration public Texel(byte B, byte G, byte R, byte A) Parameters Type Name Description byte B Blue component. byte G Green component. byte R Red component. byte A Alpha component. Properties | Edit this page View Source A Alpha component. Declaration public byte A { readonly get; set; } Property Value Type Description byte | Edit this page View Source B Blue component. Declaration public byte B { readonly get; set; } Property Value Type Description byte | Edit this page View Source G Green component. Declaration public byte G { readonly get; set; } Property Value Type Description byte | Edit this page View Source R Red component. Declaration public byte R { readonly get; set; } Property Value Type Description byte Operators | Edit this page View Source implicit operator Vector4(Texel) Implicitly converts a texel to a Vector4. Declaration public static implicit operator Vector4(Texel texel) Parameters Type Name Description Texel texel Texel to convert Returns Type Description Vector4 Converted Vector4 Implements IEquatable<T>"
  },
  "api/SharpAssimp.TextureFlags.html": {
    "href": "api/SharpAssimp.TextureFlags.html",
    "title": "Enum TextureFlags",
    "summary": "Enum TextureFlags Defines some mixed flags for a particular texture. This corresponds to the AI_MAT_KEY_TEXFLAGS property. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum TextureFlags Fields Name Description IgnoreAlpha Explicit request to the application to ignore the alpha channel of the texture. This is mutually exclusive with UseAlpha. Invert The texture's color values have to be inverted (componentwise 1-n). UseAlpha Explicit request to the application to process the alpha channel of the texture. This is mutually exclusive with IgnoreAlpha. These flags are set if the library can say for sure that the alpha channel is used/is not used. If the model format does not define this, iti s left to the application to decide whether the texture alpha channel - if any - is evaluated or not."
  },
  "api/SharpAssimp.TextureMapping.html": {
    "href": "api/SharpAssimp.TextureMapping.html",
    "title": "Enum TextureMapping",
    "summary": "Enum TextureMapping Defines how texture coordinates are generated Real-time applications typically require full UV coordinates. So the use of GenerateUVCoords step is highly recommended. It generates proper UV channels for non-UV mapped objects, as long as an accurate description of how the mapping should look like is given. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum TextureMapping Fields Name Description Box Cubic mapping Cylinder Cylinder mapping FromUV Coordinates are taken from the an existing UV channel. The AI_MATKEY_UVWSRC key specifies from the UV channel the texture coordinates are to be taken from since meshes can have more than one UV channel. Plane Planar mapping Sphere Spherical mapping Unknown Unknown mapping that is not recognied."
  },
  "api/SharpAssimp.TextureOperation.html": {
    "href": "api/SharpAssimp.TextureOperation.html",
    "title": "Enum TextureOperation",
    "summary": "Enum TextureOperation Defines how the Nth texture of a specific type is combined with the result of all previous layers. Example (left: key, right: value): DiffColor0 - gray DiffTextureOp0 - TextureOperation.Multiply DiffTexture0 - tex1.png DiffTextureOp0 - TextureOperation.Add DiffTexture1 - tex2.png Written as an equation, the final diffuse term for a specific pixel would be: diffFinal = DiffColor0 * sampleTex(DiffTexture0, UV0) + sampleTex(DiffTexture1, UV0) * diffContrib; Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum TextureOperation Fields Name Description Add T = T1 + T2 Divide T = T1 / T2 Multiply T = T1 * T2 SignedAdd T = T1 + (T2 - 0.5) SmoothAdd T = (T1 + T2) - (T1 * T2) Subtract T = T1 - T2"
  },
  "api/SharpAssimp.TextureSlot.html": {
    "href": "api/SharpAssimp.TextureSlot.html",
    "title": "Struct TextureSlot",
    "summary": "Struct TextureSlot Describes all the values pertaining to a particular texture slot in a material. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public struct TextureSlot Constructors | Edit this page View Source TextureSlot(string, TextureType, int, TextureMapping, int, float, TextureOperation, TextureWrapMode, TextureWrapMode, int) Constructs a new TextureSlot. Declaration public TextureSlot(string filePath, TextureType typeSemantic, int texIndex, TextureMapping mapping, int uvIndex, float blendFactor, TextureOperation texOp, TextureWrapMode wrapModeU, TextureWrapMode wrapModeV, int flags) Parameters Type Name Description string filePath Texture filepath TextureType typeSemantic Texture type semantic int texIndex Texture index in the material TextureMapping mapping Texture mapping int uvIndex UV channel in mesh that corresponds to this texture float blendFactor Blend factor TextureOperation texOp Texture operation TextureWrapMode wrapModeU Texture wrap mode for U coordinate TextureWrapMode wrapModeV Texture wrap mode for V coordinate int flags Misc flags Fields | Edit this page View Source BlendFactor Gets the blend factor. Declaration public float BlendFactor Field Value Type Description float | Edit this page View Source FilePath Gets the texture file path. Declaration public string FilePath Field Value Type Description string | Edit this page View Source Flags Gets misc flags. Declaration public int Flags Field Value Type Description int | Edit this page View Source Mapping Gets the texture mapping. Declaration public TextureMapping Mapping Field Value Type Description TextureMapping | Edit this page View Source Operation Gets the texture operation. Declaration public TextureOperation Operation Field Value Type Description TextureOperation | Edit this page View Source TextureIndex Gets the texture index in the material. Declaration public int TextureIndex Field Value Type Description int | Edit this page View Source TextureType Gets the texture type semantic. Declaration public TextureType TextureType Field Value Type Description TextureType | Edit this page View Source UVIndex Gets the UV channel index that corresponds to this texture from the mesh. Declaration public int UVIndex Field Value Type Description int | Edit this page View Source WrapModeU Gets the texture wrap mode for the U coordinate. Declaration public TextureWrapMode WrapModeU Field Value Type Description TextureWrapMode | Edit this page View Source WrapModeV Gets the texture wrap mode for the V coordinate. Declaration public TextureWrapMode WrapModeV Field Value Type Description TextureWrapMode"
  },
  "api/SharpAssimp.TextureType.html": {
    "href": "api/SharpAssimp.TextureType.html",
    "title": "Enum TextureType",
    "summary": "Enum TextureType Defines the purpose of a texture. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum TextureType Fields Name Description Ambient An ambient texture that is combined with the ambient lighting equation. AmbientOcclusion Dedicated ambient occlusion map, some older formats may set this as a Lightmap texture. BaseColor PBR texture property. Diffuse/albedo map containing base color regardless of the object surface type. Clearcoat Simulates a layer of 'polish' or 'lacquer' layered on top of a PBR substrate. Diffuse A diffuse texture that is combined with the result of the diffuse lighting equation. Displacement A displacement texture. The exact purpose and format is application-dependent. Higher color values stand for higher vertex displacements. EmissionColor PBR texture property. Emissive color map, similar to Emissive. Emissive An emissive texture that is added to the result of the lighting calculation. It is not influenced by incoming light, instead it represents the light that the object is naturally emitting. Height A height map texture. by convention, higher gray-scale values stand for higher elevations from some base height. Lightmap A lightmap texture (aka Ambient occlusion). Both 'lightmaps' and dedicated 'ambient occlusion maps' are covered by this material property. The texture contains a scaling value for the final color value of a pixel. Its intensity is not affected by incoming light. MayaBase Maya material declaration for a base color texture. MayaSpecular Maya material declaration for a specular texture. MayaSpecularColor Maya material declaration for a specular color texture. MayaSpecularRoughness Maya material declaration for a specular roughness texture. Metalness PBR texture property. Describes how reflective the object surface is. None No texture, but the value can be used as a 'texture semantic'. NormalCamera PBR texture property. This is not documented in assimp native, but is a normal map in a PBR workflow. Normals A tangent-space normal map. There are several conventions for normal maps and Assimp does (intentionally) not distinguish here. Opacity The texture defines per-pixel opacity. usually 'white' means opaque and 'black' means 'transparency. Or quite the opposite. Reflection A reflection texture. Contains the color of a perfect mirror reflection. This is rarely used, almost never for real-time applications. Roughness PBR texture property. Describes how rough or smooth the object surface is. Sheen Generally used to simulate textiles that are covered in a layer of microfibers, e.g. velvet. Shininess A texture that defines the glossiness of the material. This is the exponent of the specular (phong) lighting equation. Usually there is a conversion function defined to map the linear color values in the texture to a suitable exponent. Specular A specular texture that is combined with the result of the specular lighting equation. Transmission Simulates transmission through the surface. May include further information such as wall thickness. Unknown An unknown texture that does not mention any of the defined texture type definitions. It is still imported, but is excluded from any further postprocessing."
  },
  "api/SharpAssimp.TextureWrapMode.html": {
    "href": "api/SharpAssimp.TextureWrapMode.html",
    "title": "Enum TextureWrapMode",
    "summary": "Enum TextureWrapMode Defines how UV coordinates outside the [0..1] range are handled. Commonly referred to as the 'wrapping mode' Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public enum TextureWrapMode Fields Name Description Clamp Texture coordinates outside [0...1] are clamped to the nearest valid value. Decal If the texture coordinates for a pixel are outside [0...1] the texture is not applied to that pixel. Mirror A texture coordinate u|v becomes u1|v1 if (u - (u % 1)) % 2 is zero and 1 - (u % 1) | 1 - (v % 1) otherwise. Wrap A texture coordinate u|v is translated to u % 1| v % 1."
  },
  "api/SharpAssimp.UVTransform.html": {
    "href": "api/SharpAssimp.UVTransform.html",
    "title": "Struct UVTransform",
    "summary": "Struct UVTransform Defines how an UV channel is transformed. Implements IEquatable<UVTransform> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct UVTransform : IEquatable<UVTransform> Constructors | Edit this page View Source UVTransform(Vector2, Vector2, float) Defines how an UV channel is transformed. Declaration public UVTransform(Vector2 Translation, Vector2 Scaling, float Rotation) Parameters Type Name Description Vector2 Translation Translation on the U and V axes. Default is 0|0. Vector2 Scaling Scaling on the U and V axes. Default is 1|1. float Rotation Rotation in counter-clockwise direction, specified in radians. The rotation center is 0.5f|0.5f and the default value is zero. Properties | Edit this page View Source Rotation Rotation in counter-clockwise direction, specified in radians. The rotation center is 0.5f|0.5f and the default value is zero. Declaration public float Rotation { readonly get; set; } Property Value Type Description float | Edit this page View Source Scaling Scaling on the U and V axes. Default is 1|1. Declaration public Vector2 Scaling { readonly get; set; } Property Value Type Description Vector2 | Edit this page View Source Translation Translation on the U and V axes. Default is 0|0. Declaration public Vector2 Translation { readonly get; set; } Property Value Type Description Vector2 Implements IEquatable<T>"
  },
  "api/SharpAssimp.UVTransformFlags.html": {
    "href": "api/SharpAssimp.UVTransformFlags.html",
    "title": "Enum UVTransformFlags",
    "summary": "Enum UVTransformFlags Defines how UV coordinates should be transformed. Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax [Flags] public enum UVTransformFlags Fields Name Description Rotation Rotation is evaluated. Scaling Scaling is evaluated. Translation Translation is evaluated."
  },
  "api/SharpAssimp.Unmanaged.AiAnimMesh.html": {
    "href": "api/SharpAssimp.Unmanaged.AiAnimMesh.html",
    "title": "Struct AiAnimMesh",
    "summary": "Struct AiAnimMesh Represents an aiAnimMesh struct. Note: This structure requires marshaling, due to the array of IntPtrs. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiAnimMesh Fields | Edit this page View Source BiTangents aiVector3*, replacement bitangent array. Declaration public nint BiTangents Field Value Type Description nint | Edit this page View Source Colors aiVector4*[Max_Value], array of arrays of vertex colors. Max_Value is defined as AI_MAX_NUMBER_OF_COLOR_SETS. Declaration public AiMeshColorArray Colors Field Value Type Description AiMeshColorArray | Edit this page View Source Name Anim Mesh name Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source Normals aiVector3*, replacement normal array. Declaration public nint Normals Field Value Type Description nint | Edit this page View Source NumVertices unsigned int, number of vertices. Declaration public uint NumVertices Field Value Type Description uint | Edit this page View Source Tangents aiVector3*, replacement tangent array. Declaration public nint Tangents Field Value Type Description nint | Edit this page View Source TextureCoords aiVector3*[Max_Value], array of arrays of texture coordinates. Max_Value is defined as AI_MAX_NUMBER_OF_TEXTURECOORDS. Declaration public AiMeshTextureCoordinateArray TextureCoords Field Value Type Description AiMeshTextureCoordinateArray | Edit this page View Source Vertices aiVector3*, replacement position array. Declaration public nint Vertices Field Value Type Description nint | Edit this page View Source Weight float, weight of the AnimMesh. Declaration public float Weight Field Value Type Description float"
  },
  "api/SharpAssimp.Unmanaged.AiAnimation.html": {
    "href": "api/SharpAssimp.Unmanaged.AiAnimation.html",
    "title": "Struct AiAnimation",
    "summary": "Struct AiAnimation Represents an aiAnimation struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiAnimation Fields | Edit this page View Source Channels aiNodeAnim**, node animation channels. Each channel affects a single node. Declaration public nint Channels Field Value Type Description nint | Edit this page View Source Duration Duration of the animation in ticks. Declaration public double Duration Field Value Type Description double | Edit this page View Source MeshChannels aiMeshAnim**, mesh animation channels. Each channel affects a single mesh. Declaration public nint MeshChannels Field Value Type Description nint | Edit this page View Source MeshMorphChannels aiMeshMorphAnim**, mesh morph animation channels. Each channel affects a single mesh. Declaration public nint MeshMorphChannels Field Value Type Description nint | Edit this page View Source Name Name of the animation. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NumChannels Number of bone animation channels, each channel affects a single node. Declaration public uint NumChannels Field Value Type Description uint | Edit this page View Source NumMeshChannels Number of mesh animation channels. Each channel affects a single mesh and defines vertex-based animation. Declaration public uint NumMeshChannels Field Value Type Description uint | Edit this page View Source NumMeshMorphChannels Number of mesh morph animation channels. Each channel affects a single mesh and defines morphing animation. Declaration public uint NumMeshMorphChannels Field Value Type Description uint | Edit this page View Source TicksPerSecond Ticks per second, 0 if not specified in imported file. Declaration public double TicksPerSecond Field Value Type Description double"
  },
  "api/SharpAssimp.Unmanaged.AiBone.html": {
    "href": "api/SharpAssimp.Unmanaged.AiBone.html",
    "title": "Struct AiBone",
    "summary": "Struct AiBone Represents an aiBone struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiBone Fields | Edit this page View Source Armature Bone armature, used for skeleton conversion. Declaration public nint Armature Field Value Type Description nint | Edit this page View Source Name Name of the bone. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source Node Bone needed in scene, used for skeleton conversion. Declaration public nint Node Field Value Type Description nint | Edit this page View Source NumWeights Number of weights. Declaration public uint NumWeights Field Value Type Description uint | Edit this page View Source OffsetMatrix Matrix that transforms the vertex from mesh to bone space in bind pose Declaration public Matrix4x4 OffsetMatrix Field Value Type Description Matrix4x4 | Edit this page View Source Weights VertexWeight*, array of vertex weights. Declaration public nint Weights Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiCamera.html": {
    "href": "api/SharpAssimp.Unmanaged.AiCamera.html",
    "title": "Struct AiCamera",
    "summary": "Struct AiCamera Represents an aiCamera struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiCamera Fields | Edit this page View Source Aspect The Aspect ratio. Declaration public float Aspect Field Value Type Description float | Edit this page View Source ClipPlaneFar Far clip plane distance. Declaration public float ClipPlaneFar Field Value Type Description float | Edit this page View Source ClipPlaneNear Near clip plane distance. Declaration public float ClipPlaneNear Field Value Type Description float | Edit this page View Source HorizontalFOV Field Of View of the camera. Declaration public float HorizontalFOV Field Value Type Description float | Edit this page View Source LookAt Viewing direction of the camera. Declaration public Vector3 LookAt Field Value Type Description Vector3 | Edit this page View Source Name Name of the camera. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source Position Position of the camera. Declaration public Vector3 Position Field Value Type Description Vector3 | Edit this page View Source Up Up vector of the camera. Declaration public Vector3 Up Field Value Type Description Vector3"
  },
  "api/SharpAssimp.Unmanaged.AiConfigs.html": {
    "href": "api/SharpAssimp.Unmanaged.AiConfigs.html",
    "title": "Class AiConfigs",
    "summary": "Class AiConfigs Defines configurable properties for importing models. All properties have default values. Setting config properties are done via the SetProperty* methods in AssimpMethods. Inheritance object AiConfigs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public static class AiConfigs Fields | Edit this page View Source AI_CONFIG_APP_SCALE_KEY Applies application-specific scale to the global scale factor to allow for backwards compatibility. Type: Float. Default: 1.0f. Declaration public const string AI_CONFIG_APP_SCALE_KEY = \"APP_SCALE_FACTOR\" Field Value Type Description string | Edit this page View Source AI_CONFIG_EXPORT_POINT_CLOUDS Specifies whether the export should be able to export point clouds. When this flag is not defined the render data has to contain valid faces. Point clouds are only a collection of vertices which have no spatial organization by a face and the validation process will remove them. Enabling this feature will switch off the flag and enable the functionality to export pure point clouds. Type: Bool. Default: false. Declaration public const string AI_CONFIG_EXPORT_POINT_CLOUDS = \"EXPORT_POINT_CLOUDS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_EXPORT_XFILE_64BIT Specifies if the X-file exporter should use 64-bit doubles rather than 32-bit floats. Type: Bool. Default: false. Declaration public const string AI_CONFIG_EXPORT_XFILE_64BIT = \"EXPORT_XFILE_64BIT\" Field Value Type Description string | Edit this page View Source AI_CONFIG_FAVOUR_SPEED A hint to Assimp to favour speed against import quality. Enabling this option may result in faster loading, or it may not. It is just a hint to loaders and post-processing steps to use faster code paths if possible. A value not equal to zero stands for true. Type: integer. Default: 0 Declaration public const string AI_CONFIG_FAVOUR_SPEED = \"FAVOUR_SPEED\" Field Value Type Description string | Edit this page View Source AI_CONFIG_FBX_CONVERT_TO_M Specifies whether the importer shall convert the unit from centimeter (cm) to meter (m). Type: Bool. Default: false. Declaration public const string AI_CONFIG_FBX_CONVERT_TO_M = \"AI_CONFIG_FBX_CONVERT_TO_M\" Field Value Type Description string | Edit this page View Source AI_CONFIG_GLOBAL_SCALE_FACTOR_KEY Configures the GlobalScale step to scale the entire scene by a certain amount. Some importers provide a mechanism to define a scaling unit for the model, which this processing step can utilize. Type: Float. Default: 1.0f. Declaration public const string AI_CONFIG_GLOBAL_SCALE_FACTOR_KEY = \"GLOBAL_SCALE_FACTOR\" Field Value Type Description string | Edit this page View Source AI_CONFIG_GLOB_MEASURE_TIME Enables time measurements. If enabled the time needed for each part of the loading process is timed and logged. Type: bool. Default: false Declaration public const string AI_CONFIG_GLOB_MEASURE_TIME = \"GLOB_MEASURE_TIME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_GLOB_MULTITHREADING Sets Assimp's multithreading policy. This is ignored if Assimp is built without boost.thread support. Possible values are: -1 to let Assimp decide, 0 to disable multithreading, and nay number larger than 0 to force a specific number of threads. This is only a hint and may be ignored by Assimp. Type: integer. Default: -1 Declaration public const string AI_CONFIG_GLOB_MULTITHREADING = \"GLOB_MULTITHREADING\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION Configures whether the AC loader evaluates subdivision surfaces (indicated by the presence of the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using the standard Catmull-Clark algorithm. Type: bool. Default: true Declaration public const string AI_CONFIG_IMPORT_AC_EVAL_SUBDIVISION = \"IMPORT_AC_EVAL_SUBDIVISION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL Configures the AC loader to collect all surfaces which have the \"Backface cull\" flag set in separate meshes. Type: bool. Default: true Declaration public const string AI_CONFIG_IMPORT_AC_SEPARATE_BFCULL = \"IMPORT_AC_SEPARATE_BFCULL\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS Configures the ASE loader to always reconstruct normal vectors basing on the smoothing groups loaded from the file. Some ASE files carry invalid normals, others don't. Type: bool. Default: true Declaration public const string AI_CONFIG_IMPORT_ASE_RECONSTRUCT_NORMALS = \"IMPORT_ASE_RECONSTRUCT_NORMALS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_COLLADA_IGNORE_UP_DIRECTION Specifies whether the collada loader will ignore the up direction. Type: Bool. Default: false Declaration public const string AI_CONFIG_IMPORT_COLLADA_IGNORE_UP_DIRECTION = \"IMPORT_COLLADA_IGNORE_UP_DIRECTION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_COLLADA_USE_COLLADA_NAMES Specifies whether the Collada loader should use Collada names as node names. If this property is set to true, the Collada names will be used as the node name. The default is to use the id tag (resp. sid tag, if no id tag is present) instead. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_COLLADA_USE_COLLADA_NAMES = \"IMPORT_COLLADA_USE_COLLADA_NAMES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_EMBEDDED_TEXTURES_LEGACY_NAMING Specifies whether the fbx importer will use the legacy embedded texture naming. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_FBX_EMBEDDED_TEXTURES_LEGACY_NAMING = \"AI_CONFIG_IMPORT_FBX_EMBEDDED_TEXTURES_LEGACY_NAMING\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES Specifies whether the importer will drop empty animation curves or animation curves which match the bind pose transformation over their entire defined range. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES = \"IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS Specifies whether the FBX importer will preserve pivot points for transformations (as extra nodes). If set to false, pivots and offsets will be evaluated whenever possible. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_PRESERVE_PIVOTS = \"IMPORT_FBX_PRESERVE_PIVOTS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS Specifies whether the FBX importer will merge all geometry layers present in the source file or take only the first. Type: bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS = \"IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_ALL_MATERIALS Specifies whether the FBX importer will read all materials present in the source file or take only the referenced materials, if the importer will read materials, otherwise this has no effect. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_ALL_MATERIALS = \"IMPORT_FBX_READ_ALL_MATERIALS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_ANIMATIONS Specifies whether the FBX importer will read animations. Type: Bool. default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_ANIMATIONS = \"IMPORT_FBX_READ_ANIMATIONS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_CAMERAS Specifies whether the FBX importer will read cameras. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_CAMERAS = \"IMPORT_FBX_READ_CAMERAS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_LIGHTS Specifies whether the FBX importer will read light sources. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_LIGHTS = \"IMPORT_FBX_READ_LIGHTS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_MATERIALS Specifies whether the FBX importer will read materials. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_MATERIALS = \"IMPORT_FBX_READ_MATERIALS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_READ_TEXTURES Specifies whether the FBX importer will read embedded textures. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_FBX_READ_TEXTURES = \"IMPORT_FBX_READ_TEXTURES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_FBX_STRICT_MODE Specifies whether the FBX importer will act in strict mode in which only the FBX 2013 format is supported and any other sub formats are rejected. FBX 2013 is the primary target for the importer, so this format is best supported and well-tested. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_FBX_STRICT_MODE = \"IMPORT_FBX_STRICT_MODE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_GLOBAL_KEYFRAME Sets the vertex animation keyframe to be imported. Assimp does not support vertex keyframes (only bone animation is supported). The libary reads only one frame of models with vertex animations. By default this is the first frame. The default value is 0. This option applies to all importers. However, it is also possible to override the global setting for a specific loader. You can use the AI_CONFIG_IMPORT_XXX_KEYFRAME options where XXX is a placeholder for the file format which you want to override the global setting. Type: integer. Default: 0 Declaration public const string AI_CONFIG_IMPORT_GLOBAL_KEYFRAME = \"IMPORT_GLOBAL_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_IFC_CUSTOM_TRIANGULATION Specifies whether the IFC loader will use its own, custom triangulation algorithm to triangulate wall and floor meshes. If this is set to false, walls will be either triangulated by the post process triangulation or will be passed through as huge polygons with faked holes (e.g. holes that are connected with the outer boundary using a dummy edge). It is highly recommended to leave this property set to true as the default post process has some known issues with these kind of polygons. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_IFC_CUSTOM_TRIANGULATION = \"IMPORT_IFC_CUSTOM_TRIANGULATION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_IFC_CYLINDRICAL_TESSELLATION Specifies the tessellation for IFC cylindrical shapes. E.g. the number of segments used to approximate a circle. Accepted range of values is between [3, 180]. Type: Integer. Default: 32 Declaration public const string AI_CONFIG_IMPORT_IFC_CYLINDRICAL_TESSELLATION = \"IMPORT_IFC_CYLINDRICAL_TESSELLATION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS Specifies whether the IFC loader skips over IfcSpace elements. IfcSpace elements (and their geometric representations) are used to represent free space in a building story. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS = \"IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_IFC_SMOOTHING_ANGLE Specifies the tessellation conic angle for IFC smoothing curves. Accepted range of values is between [5, 120] Type: Float. Default: 10.0f Declaration public const string AI_CONFIG_IMPORT_IFC_SMOOTHING_ANGLE = \"IMPORT_IFC_SMOOTHING_ANGLE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_IRR_ANIM_FPS Defines the output frame rate of the IRR loader. IRR animations are difficult to convert for Assimp and there will always be a loss of quality. This setting defines how many keys per second are returned by the converter. Type: integer. Default: 100 Declaration public const string AI_CONFIG_IMPORT_IRR_ANIM_FPS = \"IMPORT_IRR_ANIM_FPS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY Configures the LWO loader to load just one layer from the model. LWO files consist of layers and in some cases it could be useful to load only one of them. This property can be either a string - which specifies the name of the layer - or an integer - the index of the layer. If the property is not set then the whole LWO model is loaded. Loading fails if the requested layer is not vailable. The layer index is zero-based and the layer name may not be empty Type: bool. Default: false (All layers are loaded) Declaration public const string AI_CONFIG_IMPORT_LWO_ONE_LAYER_ONLY = \"IMPORT_LWO_ONE_LAYER_ONLY\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_LWS_ANIM_END Defines the ending of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the end time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation end from the input LWS file. Type: integer. Default: taken from file Declaration public const string AI_CONFIG_IMPORT_LWS_ANIM_END = \"IMPORT_LWS_ANIM_END\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_LWS_ANIM_START Defines the beginning of the time range for which the LWS loader evaluates animations and computes AiNodeAnim's. Assimp provides full conversion of Lightwave's envelope system, including pre and post conditions. The loader computes linearly subsampled animation channels with the frame rate given in the LWS file. This property defines the start time. Animation channels are only generated if a node has at least one envelope with more than one key assigned. This property is given in frames where '0' is the first. By default, if this property is not set, the importer takes the animation start from the input LWS file ('FirstFrame' line) Type: integer. Default: taken from file Declaration public const string AI_CONFIG_IMPORT_LWS_ANIM_START = \"IMPORT_LWS_ANIM_START\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD2_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_MD2_KEYFRAME = \"IMPORT_MD3_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART Configures the M3D loader to detect and process multi-part Quake player models. These models usually consit of three files, lower.md3, upper.md3 and head.md3. If this propery is set to true, Assimp will try to load and combine all three files if one of them is loaded. Type: bool. Default: true Declaration public const string AI_CONFIG_IMPORT_MD3_HANDLE_MULTIPART = \"IMPORT_MD3_HANDLE_MULTIPART\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD3_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_MD3_KEYFRAME = \"IMPORT_MD3_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD3_SHADER_SRC Specifies the Quake 3 shader file to be used for a particular MD3 file. This can be a full path or relative to where all MD3 shaders reside. Type: string. Default: \"\" Declaration public const string AI_CONFIG_IMPORT_MD3_SHADER_SRC = \"IMPORT_MD3_SHADER_SRC\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD3_SKIN_NAME Tells the MD3 loader which skin files to load. When loading MD3 files, Assimp checks whether a file named \"md3_file_name\"_\"skin_name\".skin exists. These files are used by Quake III to be able to assign different skins (e.g. red and blue team) to models. 'default', 'red', 'blue' are typical skin names. Type: string. Default: \"default\" Declaration public const string AI_CONFIG_IMPORT_MD3_SKIN_NAME = \"IMPORT_MD3_SKIN_NAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically. The default strategy is to look for a file with the same name but with the MD5ANIm extension in the same directory. If it is found it is loaded and combined with the MD5MESH file. This configuration option can be used to disable this behavior. Type: bool. Default: false Declaration public const string AI_CONFIG_IMPORT_MD5_NO_ANIM_AUTOLOAD = \"IMPORT_MD5_NO_ANIM_AUTOLOAD\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MDC_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_MDC_KEYFRAME = \"IMPORT_MDC_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MDL_COLORMAP Sets the colormap(= palette) to be used to decode embedded textures in MDL (Quake or 3DG5) files. This must be a valid path to a file. The file is 768 (256 * 3) bytes large and contains RGB triplets for each of the 256 palette entries. If the file is not found, a default palette (from Quake 1) is used. Type: string. Default: \"colormap.lmp\" Declaration public const string AI_CONFIG_IMPORT_MDL_COLORMAP = \"IMPORT_MDL_COLORMAP\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_MDL_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_MDL_KEYFRAME = \"IMPORT_MDL_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_NO_SKELETON_MESHES Global setting to disable generation of skeleton dummy meshes. These are generated as a visualization aid in cases which the input data contains no geometry, but only animation data. So the geometry are visualizing the bones. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_NO_SKELETON_MESHES = \"IMPORT_NO_SKELETON_MESHES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE The Ogre importer will try to load this MaterialFile. Ogre meshes reference with material names, this does not tell Assimp where the file is located. Assimp will try to find the source file in the following order: [material-name].material, [mesh-filename-base].material, and lastly the material name defined by this config property. Type: string. Default: \"Scene.Material\" Declaration public const string AI_CONFIG_IMPORT_OGRE_MATERIAL_FILE = \"IMPORT_OGRE_MATERIAL_FILE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME The Ogre importer will detect the texture usage from the filename. Normally a texture is loaded as a color map, if no target is specified in the material file. If this is enabled, then Assimp will try to detect the type from the texture filename postfix: Normal Maps: _n, _nrm, _nrml, _normal, _normals, _normalmap Specular Maps: _s, _spec, _specular, _specularmap Light Maps: _l, _light, _lightmap, _occ, _occlusion Displacement Maps: _dis, _displacement The matching is case insensitive. Postfix is taken between the last \"_\" and last \".\". The default behavior is to detect type from lower cased texture unit name by matching against: normalmap, specularmap, lightmap, and displacementmap. For both cases if no match is found then, Diffuse is used. Type: Bool. Default: false. Declaration public const string AI_CONFIG_IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME = \"IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_REMOVE_EMPTY_BONES Specifies whether the importer removes empty bones or not. Empty bones are often used to define connections for other models (e.g. attachment points). Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_REMOVE_EMPTY_BONES = \"AI_CONFIG_IMPORT_REMOVE_EMPTY_BONES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_SMD_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_SMD_KEYFRAME = \"IMPORT_SMD_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_SMD_LOAD_ANIMATION_LIST Specifies whether the importer will load multiple animations. Type: Bool. Default: true. Declaration public const string AI_CONFIG_IMPORT_SMD_LOAD_ANIMATION_LIST = \"IMPORT_SMD_LOAD_ANIMATION_LIST\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_TER_MAKE_UVS Configures the terragen import plugin to compute UV's for terrains, if they are not given. Furthermore, a default texture is assigned. UV coordinates for terrains are so simple to compute that you'll usually want to compute them on your own, if you need them. This option is intended for model viewers which want to offer an easy way to apply textures to terrains. Type: bool. Default: false Declaration public const string AI_CONFIG_IMPORT_TER_MAKE_UVS = \"IMPORT_TER_MAKE_UVS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS Configures the UNREAL 3D loader to separate faces with different surface flags (e.g. two-sided vs single-sided). Type: bool. Default: true Declaration public const string AI_CONFIG_IMPORT_UNREAL_HANDLE_FLAGS = \"UNREAL_HANDLE_FLAGS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_IMPORT_UNREAL_KEYFRAME See the documentation for AI_CONFIG_IMPORT_GLOBAL_KEYFRAME. Declaration public const string AI_CONFIG_IMPORT_UNREAL_KEYFRAME = \"IMPORT_UNREAL_KEYFRAME\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE Specifies the maximum angle that may be between two vertex tangents that their tangents and bitangents are smoothed during the step to calculate the tangent basis. The angle specified is in degrees. The maximum value is 175 degrees. Type: float. Default: 45 degrees Declaration public const string AI_CONFIG_PP_CT_MAX_SMOOTHING_ANGLE = \"PP_CT_MAX_SMOOTHING_ANGLE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_CT_TEXTURE_CHANNEL_INDEX Source UV channel for tangent space computation. The specified channel must exist or an error will be raised. Type: integer. Default: 0 Declaration public const string AI_CONFIG_PP_CT_TEXTURE_CHANNEL_INDEX = \"PP_CT_TEXTURE_CHANNEL_INDEX\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_DB_ALL_OR_NONE Require all bones to qualify for deboning before any are removed. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_DB_ALL_OR_NONE = \"PP_DB_ALL_OR_NONE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_DB_THRESHOLD Threshold used to determine if a bone is kept or removed during the Debone step. Type: float. Default: 1.0f Declaration public const string AI_CONFIG_PP_DB_THRESHOLD = \"PP_DB_THRESHOLD\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_FD_CHECKAREA Configures the FindDegenerates step to check the area of a triangle to be greater than 1e-6. If this is not the case, the triangle will be removed if AI_CONFIG_PP_FD_REMOVE is set to true. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_FD_CHECKAREA = \"PP_FD_CHECKAREA\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_FD_REMOVE Configures the FindDegenerates step to remove degenerated primitives from the import immediately. The default behavior converts degenerated triangles to lines and degenerated lines to points. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_FD_REMOVE = \"PP_FD_REMOVE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_FID_ANIM_ACCURACY Input parameter to the FindInvalidData step. It specifies the floating point accuracy for animation values, specifically the epislon during the comparison. The step checks for animation tracks where all frame values are absolutely equal and removes them. Two floats are considered equal if the invariant abs(n0-n1) > epislon holds true for all vector/quaternion components. Type: float. Default: 0.0f (comparisons are exact) Declaration public const string AI_CONFIG_PP_FID_ANIM_ACCURACY = \"PP_FID_ANIM_ACCURACY\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_FID_IGNORE_TEXTURECOORDS Input parameter to the FindInvalidData step. Set to true to ignore texture coordinates. This may be useful if you have to assign different kinds of textures, like seasonally variable ones - one for summer and one for winter. Type: Bool. Default: false. Declaration public const string AI_CONFIG_PP_FID_IGNORE_TEXTURECOORDS = \"PP_FID_IGNORE_TEXTURECOORDS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE Specifies the maximum angle that may be between two face normals at the same vertex position that their normals will be smoothed together during the calculate smooth normals step. This is commonly called the \"crease angle\". The angle is specified in degrees. Maximum value is 175 degrees (all vertices smoothed). Type: float. Default: 175 degrees Declaration public const string AI_CONFIG_PP_GSN_MAX_SMOOTHING_ANGLE = \"PP_GSN_MAX_SMOOTHING_ANGLE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_ICL_PTCACHE_SIZE Sets the size of the post-transform vertex cache to optimize vertices for. This is for the ImproveCacheLocality step. The size is given in vertices. Of course you can't know how the vertex format will exactly look like after the import returns, but you can still guess what your meshes will probably have. The default value has resulted in slight performance improvements for most Nvidia/AMD cards since 2002. Type: integer. Default: AiDefines.PP_ICL_PTCACHE_SIZE Declaration public const string AI_CONFIG_PP_ICL_PTCACHE_SIZE = \"PP_ICL_PTCACHE_SIZE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_LBW_MAX_WEIGHTS Sets the maximum number of bones that can affect a single vertex. This is used by the LimitBoneWeights step. Type: integer. Default: AiDefines.AI_LBW_MAX_WEIGHTS Declaration public const string AI_CONFIG_PP_LBW_MAX_WEIGHTS = \"PP_LBW_MAX_WEIGHTS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_OG_EXCLUDE_LIST Configures the OptimizeGraph step to preserve nodes matching a name in a given list. This is a list of 1 to n strings, whitespace ' ' serves as a delimter character. Identifiers containing whitespaces must be enclosed in single quotation marks. Carriage returns and tabs are treated as white space. If a node matches one of these names, it will not be modified or removed by the postprocessing step. Type: string. Default: \"\" Declaration public const string AI_CONFIG_PP_OG_EXCLUDE_LIST = \"PP_OG_EXCLUDE_LIST\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_PTV_ADD_ROOT_TRANSFORMATION Configures the PreTransformVertices step to use a user defined matrix as the scene root node transformation before transforming vertices. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_PTV_ADD_ROOT_TRANSFORMATION = \"PP_PTV_ADD_ROOT_TRANSFORMATION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_PTV_KEEP_HIERARCHY Configures the PreTransformVertices step to keep the scene hierarchy. Meshes are moved to worldspace, but no optimization is performed where meshes with the same materials are not joined. This option could be of used if you have a scene hierarchy that contains important additional information which you intend to parse. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_PTV_KEEP_HIERARCHY = \"PP_PTV_KEEP_HIERARCHY\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_PTV_NORMALIZE Configures the PreTransformVertices step to normalize all vertex components into the -1...1 range. That is, a bounding box for the whole scene is computed where the maximum component is taken and all meshes are scaled uniformly. This is useful if you don't know the spatial dimension of the input data. Type: bool. Default: false Declaration public const string AI_CONFIG_PP_PTV_NORMALIZE = \"PP_PTV_NORMALIZE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_PTV_ROOT_TRANSFORMATION Configures the PreTransformVertices step to use a user defined matrix as the scene root node transformation before transforming vertices. Type: Matrix4x4. Default: Identity Matrix Declaration public const string AI_CONFIG_PP_PTV_ROOT_TRANSFORMATION = \"PP_PTV_ROOT_TRANSFORMATION\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_RRM_EXCLUDE_LIST Configures the RemoveRedundantMaterials step to keep materials matching a name in a given list. This is a list of 1 to n strings where whitespace ' ' serves as a delimiter character. Identifiers containing whitespaces must be enclosed in single quotation marks. Tabs or carriage returns are treated as whitespace. If a material matches one of these names, it will not be modified or removed by the post processing step nor will other materials be replaced by a reference to it. Default: string. Default: \"\" Declaration public const string AI_CONFIG_PP_RRM_EXCLUDE_LIST = \"PP_RRM_EXCLUDE_LIST\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_RVC_FLAGS Input parameter to the RemoveComponent step. It specifies the parts of the data structure to be removed. This is a bitwise combination of the ExcludeComponent flag. If no valid mesh is remaining after the step is executed, the import FAILS. Type: integer. Default: 0 Declaration public const string AI_CONFIG_PP_RVC_FLAGS = \"PP_RVC_FLAGS\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_SBBC_MAX_BONES Maximum bone cone per mesh for the SplitByBoneCount step. Meshes are split until the max number of bones is reached. Type: integer. Default: 60 Declaration public const string AI_CONFIG_PP_SBBC_MAX_BONES = \"PP_SBBC_MAX_BONES\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_SBP_REMOVE Input parameter to the SortByPrimitiveType step. It specifies which primitive types are to be removed by the step. This is a bitwise combination of the PrimitiveType flag. Specifying ALL types is illegal. Type: integer. Default: 0 Declaration public const string AI_CONFIG_PP_SBP_REMOVE = \"PP_SBP_REMOVE\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_SLM_TRIANGLE_LIMIT Sets the maximum number of triangles a mesh can contain. This is used by the SplitLargeMeshes step to determine whether a mesh must be split or not. Type: int. Default: AiDefines.AI_SLM_DEFAULT_MAX_TRIANGLES Declaration public const string AI_CONFIG_PP_SLM_TRIANGLE_LIMIT = \"PP_SLM_TRIANGLE_LIMIT\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_SLM_VERTEX_LIMIT Sets the maximum number of vertices in a mesh. This is used by the SplitLargeMeshes step to determine whether a mesh must be split or not. Type: integer. Default: AiDefines.AI_SLM_DEFAULT_MAX_VERTICES Declaration public const string AI_CONFIG_PP_SLM_VERTEX_LIMIT = \"PP_SLM_VERTEX_LIMIT\" Field Value Type Description string | Edit this page View Source AI_CONFIG_PP_TUV_EVALUATE Input parameter to the TransformUVCoords step. It specifies which UV transformations are to be evaluated. This is bitwise combination of the UVTransformFlags flag. Type: integer. Default: AiDefines.AI_UV_TRAFO_ALL (All combinations) Declaration public const string AI_CONFIG_PP_TUV_EVALUATE = \"PP_TUV_EVALUATE\" Field Value Type Description string"
  },
  "api/SharpAssimp.Unmanaged.AiDefines.html": {
    "href": "api/SharpAssimp.Unmanaged.AiDefines.html",
    "title": "Class AiDefines",
    "summary": "Class AiDefines Static class that has a number of constants that are found in Assimp. These can be limits to configuration property default values. The constants are grouped according to their usage or where they're found in the Assimp include files. Inheritance object AiDefines Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public static class AiDefines Fields | Edit this page View Source AI_DEBONE_THRESHOLD Defines the deboning threshold. Declaration public const float AI_DEBONE_THRESHOLD = 1 Field Value Type Description float | Edit this page View Source AI_DEFAULT_MATERIAL_NAME Defines the default color material. Declaration public const string AI_DEFAULT_MATERIAL_NAME = \"DefaultMaterial\" Field Value Type Description string | Edit this page View Source AI_DEFAULT_TEXTURED_MATERIAL_NAME Defines the default textured material (if the meshes have UV coords). Declaration public const string AI_DEFAULT_TEXTURED_MATERIAL_NAME = \"TexturedDefaultMaterial\" Field Value Type Description string | Edit this page View Source AI_LBW_MAX_WEIGHTS Default value for AI_CONFIG_PP_LBW_MAX_WEIGHTS. Declaration public const int AI_LBW_MAX_WEIGHTS = 4 Field Value Type Description int | Edit this page View Source AI_MAX_BONE_WEIGHTS Defines the maximum number of bone weights. Declaration public const int AI_MAX_BONE_WEIGHTS = 2147483647 Field Value Type Description int | Edit this page View Source AI_MAX_FACES Defines the maximum number of faces per mesh. Declaration public const int AI_MAX_FACES = 2147483647 Field Value Type Description int | Edit this page View Source AI_MAX_FACE_INDICES Defines the maximum number of indices per face (polygon). Declaration public const int AI_MAX_FACE_INDICES = 32767 Field Value Type Description int | Edit this page View Source AI_MAX_NUMBER_OF_COLOR_SETS Defines the maximum number of vertex color sets per mesh. Declaration public const int AI_MAX_NUMBER_OF_COLOR_SETS = 8 Field Value Type Description int | Edit this page View Source AI_MAX_NUMBER_OF_TEXTURECOORDS Defines the maximum number of texture coordinate sets (UV(W) channels) per mesh. Declaration public const int AI_MAX_NUMBER_OF_TEXTURECOORDS = 8 Field Value Type Description int | Edit this page View Source AI_MAX_VERTICES Defines the maximum number of vertices per mesh. Declaration public const int AI_MAX_VERTICES = 2147483647 Field Value Type Description int | Edit this page View Source AI_SBBC_DEFAULT_MAX_BONES Defines the default bone count limit. Declaration public const int AI_SBBC_DEFAULT_MAX_BONES = 60 Field Value Type Description int | Edit this page View Source AI_SLM_DEFAULT_MAX_TRIANGLES Default value for AI_CONFIG_PP_SLM_TRIANGLE_LIMIT. Declaration public const int AI_SLM_DEFAULT_MAX_TRIANGLES = 1000000 Field Value Type Description int | Edit this page View Source AI_SLM_DEFAULT_MAX_VERTICES Default value for AI_CONFIG_PP_SLM_VERTEX_LIMIT. Declaration public const int AI_SLM_DEFAULT_MAX_VERTICES = 1000000 Field Value Type Description int | Edit this page View Source AI_UVTRAFO_ALL Default value for AI_CONFIG_PP_TUV_EVALUATE Declaration public const int AI_UVTRAFO_ALL = 7 Field Value Type Description int | Edit this page View Source MAX_LENGTH Defines the maximum length of a string used in AiString. Declaration public const int MAX_LENGTH = 1024 Field Value Type Description int | Edit this page View Source PP_ICL_PTCACHE_SIZE Default value for AI_CONFIG_PP_ICL_PTCACHE_SIZE. Declaration public const int PP_ICL_PTCACHE_SIZE = 12 Field Value Type Description int"
  },
  "api/SharpAssimp.Unmanaged.AiExportDataBlob.html": {
    "href": "api/SharpAssimp.Unmanaged.AiExportDataBlob.html",
    "title": "Struct AiExportDataBlob",
    "summary": "Struct AiExportDataBlob Describes a blob of exported scene data. Blobs can be nested, the first blob always has an empty name. Nested blobs represent auxillary files produced by the exporter (e.g. material files) and are named accordingly. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiExportDataBlob Fields | Edit this page View Source Data void*, the data. Declaration public nint Data Field Value Type Description nint | Edit this page View Source Name AiString, name of the blob. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NextBlob aiExportDataBlob*, pointer to the next blob in the chain. Declaration public nint NextBlob Field Value Type Description nint | Edit this page View Source Size size_t, size of the data in bytes. Declaration public nuint Size Field Value Type Description nuint"
  },
  "api/SharpAssimp.Unmanaged.AiExportFormatDesc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiExportFormatDesc.html",
    "title": "Struct AiExportFormatDesc",
    "summary": "Struct AiExportFormatDesc Describes a file format which Assimp can export to. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiExportFormatDesc Fields | Edit this page View Source Description char*, a short description of the file format to present to users. Declaration public nint Description Field Value Type Description nint | Edit this page View Source FileExtension char*, a recommended file extension of the exported file in lower case. Declaration public nint FileExtension Field Value Type Description nint | Edit this page View Source FormatId char*, a short string ID to uniquely identify the export format. e.g. \"collada\" or \"obj\" Declaration public nint FormatId Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiFace.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFace.html",
    "title": "Struct AiFace",
    "summary": "Struct AiFace Represents an aiFace struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiFace Fields | Edit this page View Source Indices unsigned int*, array of indices. Declaration public nint Indices Field Value Type Description nint | Edit this page View Source NumIndices Number of indices in the face. Declaration public uint NumIndices Field Value Type Description uint"
  },
  "api/SharpAssimp.Unmanaged.AiFile.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFile.html",
    "title": "Struct AiFile",
    "summary": "Struct AiFile Contains callbacks to read and write to a file opened by a custom file system. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiFile Fields | Edit this page View Source FileSizeProc Function pointer to retrieve the size of the file. Declaration public nint FileSizeProc Field Value Type Description nint | Edit this page View Source FlushProc Function pointer to flush the file contents. Declaration public nint FlushProc Field Value Type Description nint | Edit this page View Source ReadProc Function pointer to read from a file. Declaration public nint ReadProc Field Value Type Description nint | Edit this page View Source SeekProc Function pointer to set the current position of the file cursor. Declaration public nint SeekProc Field Value Type Description nint | Edit this page View Source TellProc Function pointer to retrieve the current position of the file cursor. Declaration public nint TellProc Field Value Type Description nint | Edit this page View Source UserData Char*, user defined opaque data. Declaration public nint UserData Field Value Type Description nint | Edit this page View Source WriteProc Function pointer to write to a file. Declaration public nint WriteProc Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiFileCloseProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileCloseProc.html",
    "title": "Delegate AiFileCloseProc",
    "summary": "Delegate AiFileCloseProc Callback delegate for a custom file system, to close a given file and free its memory. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate void AiFileCloseProc(nint fileIO, nint file) Parameters Type Name Description nint fileIO Pointer to an AiFileIO instance. nint file Pointer to an AiFile instance that will be closed."
  },
  "api/SharpAssimp.Unmanaged.AiFileFlushProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileFlushProc.html",
    "title": "Delegate AiFileFlushProc",
    "summary": "Delegate AiFileFlushProc Callback delegate for a custom file system, to flush the contents of the file to the disk. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate void AiFileFlushProc(nint file) Parameters Type Name Description nint file Pointer to an AiFile instance."
  },
  "api/SharpAssimp.Unmanaged.AiFileIO.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileIO.html",
    "title": "Struct AiFileIO",
    "summary": "Struct AiFileIO Contains callbacks to implement a custom file system to open and close files. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiFileIO Fields | Edit this page View Source CloseProc Function pointer used to close an existing file. Declaration public nint CloseProc Field Value Type Description nint | Edit this page View Source OpenProc Function pointer to open a new file. Declaration public nint OpenProc Field Value Type Description nint | Edit this page View Source UserData Char*, user defined opaque data. Declaration public nint UserData Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiFileOpenProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileOpenProc.html",
    "title": "Delegate AiFileOpenProc",
    "summary": "Delegate AiFileOpenProc Callback delegate for a custom file system, to open a given file and create a new AiFile instance. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate nint AiFileOpenProc(nint fileIO, string pathToFile, string mode) Parameters Type Name Description nint fileIO Pointer to an AiFileIO instance. string pathToFile Path to the target file string mode Read-write permissions to request Returns Type Description nint Pointer to an AiFile instance."
  },
  "api/SharpAssimp.Unmanaged.AiFileReadProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileReadProc.html",
    "title": "Delegate AiFileReadProc",
    "summary": "Delegate AiFileReadProc Callback delegate for a custom file system, to read from a file. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate nuint AiFileReadProc(nint file, nint dataToRead, nuint sizeOfElemInBytes, nuint numElements) Parameters Type Name Description nint file Pointer to an AiFile instance. nint dataToRead Char* pointer that will store the data read (casted from a void*) nuint sizeOfElemInBytes Size of a single element in bytes to read nuint numElements Number of elements to read Returns Type Description nuint Number of elements succesfully read. Should be zero if either size or numElements is zero. May be less than numElements if end of file is encountered, or if an error occured."
  },
  "api/SharpAssimp.Unmanaged.AiFileSeek.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileSeek.html",
    "title": "Delegate AiFileSeek",
    "summary": "Delegate AiFileSeek Callback delegate for a custom file system, to set the current position of the file cursor. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate ReturnCode AiFileSeek(nint file, nuint offset, Origin seekOrigin) Parameters Type Name Description nint file Pointer to An AiFile instance. nuint offset Offset from the origin. Origin seekOrigin Position used as a reference Returns Type Description ReturnCode Returns success, if successful"
  },
  "api/SharpAssimp.Unmanaged.AiFileTellProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileTellProc.html",
    "title": "Delegate AiFileTellProc",
    "summary": "Delegate AiFileTellProc Callback delegate for a custom file system, to tell offset/size information about the file. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate nuint AiFileTellProc(nint file) Parameters Type Name Description nint file Pointer to an AiFile instance. Returns Type Description nuint Returns the current file cursor or the file size in bytes. May be -1 if an error has occured."
  },
  "api/SharpAssimp.Unmanaged.AiFileWriteProc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiFileWriteProc.html",
    "title": "Delegate AiFileWriteProc",
    "summary": "Delegate AiFileWriteProc Callback delegate for a custom file system, to write to a file. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate nuint AiFileWriteProc(nint file, nint dataToWrite, nuint sizeOfElemInBytes, nuint numElements) Parameters Type Name Description nint file Pointer to an AiFile instance nint dataToWrite Char* pointer to data to write (casted from a void*) nuint sizeOfElemInBytes Size of a single element in bytes to write nuint numElements Number of elements to write Returns Type Description nuint Number of elements successfully written. Should be zero if either size or numElements is zero. May be less than numElements if an error occured."
  },
  "api/SharpAssimp.Unmanaged.AiImporterDesc.html": {
    "href": "api/SharpAssimp.Unmanaged.AiImporterDesc.html",
    "title": "Struct AiImporterDesc",
    "summary": "Struct AiImporterDesc Describes a variety of information about an importer. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiImporterDesc Fields | Edit this page View Source Author char*, original author (blank if unknown or assimp team) Declaration public nint Author Field Value Type Description nint | Edit this page View Source Comments char*, implementation comments. E.g. unimplemented features. Declaration public nint Comments Field Value Type Description nint | Edit this page View Source FileExtensions char*, list of file extensions the importer can handle. Entries are separated by space characters, and all entries are lower case WITHOUT a leading dot. (e.g. \"xml dae\"). Multiple importers may respond to the same file extension, assim Declaration public nint FileExtensions Field Value Type Description nint | Edit this page View Source Flags unsigned int, features supported by the importer. Declaration public ImporterFeatureFlags Flags Field Value Type Description ImporterFeatureFlags | Edit this page View Source Maintainer char*, current maintainer, left blank if the author maintains. Declaration public nint Maintainer Field Value Type Description nint | Edit this page View Source MaxMajor unsigned int, max major version of format supported. If no version scheme, forwards compatible, or importer doesn't care, will be zero. Declaration public uint MaxMajor Field Value Type Description uint | Edit this page View Source MaxMinor unsigned int, min major version of format supported. If no version scheme, forwards compatible, or importer doesn't care, will be zero. Declaration public uint MaxMinor Field Value Type Description uint | Edit this page View Source MinMajor unsigned int, max major version of format supported. If no version scheme or importer doesn't care, will be zero. Declaration public uint MinMajor Field Value Type Description uint | Edit this page View Source MinMinor unsigned int, min major version of format supported. If no version scheme or importer doesn't care, will be zero. Declaration public uint MinMinor Field Value Type Description uint | Edit this page View Source Name char*, full name of the importer (e.g. Blender3D Importer) Declaration public nint Name Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiLight.html": {
    "href": "api/SharpAssimp.Unmanaged.AiLight.html",
    "title": "Struct AiLight",
    "summary": "Struct AiLight Represents an aiLight struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiLight Fields | Edit this page View Source AngleInnerCone Spot light inner angle. Declaration public float AngleInnerCone Field Value Type Description float | Edit this page View Source AngleOuterCone Spot light outer angle. Declaration public float AngleOuterCone Field Value Type Description float | Edit this page View Source AreaSize Width (X) and Height (Y) of the area that represents an Area light. Declaration public Vector2 AreaSize Field Value Type Description Vector2 | Edit this page View Source AttenuationConstant Attenuation constant value. Declaration public float AttenuationConstant Field Value Type Description float | Edit this page View Source AttenuationLinear Attenuation linear value. Declaration public float AttenuationLinear Field Value Type Description float | Edit this page View Source AttenuationQuadratic Attenuation quadratic value. Declaration public float AttenuationQuadratic Field Value Type Description float | Edit this page View Source ColorAmbient Ambient color. Declaration public Vector3 ColorAmbient Field Value Type Description Vector3 | Edit this page View Source ColorDiffuse Diffuse color. Declaration public Vector3 ColorDiffuse Field Value Type Description Vector3 | Edit this page View Source ColorSpecular Specular color. Declaration public Vector3 ColorSpecular Field Value Type Description Vector3 | Edit this page View Source Direction Direction of the spot/directional light. Declaration public Vector3 Direction Field Value Type Description Vector3 | Edit this page View Source Name Name of the light. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source Position Position of the light. Declaration public Vector3 Position Field Value Type Description Vector3 | Edit this page View Source Type Type of light. Declaration public LightSourceType Type Field Value Type Description LightSourceType | Edit this page View Source Up Up direction of the light source in space. Undefined for point lights. Declaration public Vector3 Up Field Value Type Description Vector3"
  },
  "api/SharpAssimp.Unmanaged.AiLogStream.html": {
    "href": "api/SharpAssimp.Unmanaged.AiLogStream.html",
    "title": "Struct AiLogStream",
    "summary": "Struct AiLogStream Represents a log stream, which receives all log messages and streams them somewhere. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiLogStream Fields | Edit this page View Source Callback Function pointer that gets called when a message is to be logged. Declaration public nint Callback Field Value Type Description nint | Edit this page View Source UserData char*, user defined opaque data. Declaration public nint UserData Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiLogStreamCallback.html": {
    "href": "api/SharpAssimp.Unmanaged.AiLogStreamCallback.html",
    "title": "Delegate AiLogStreamCallback",
    "summary": "Delegate AiLogStreamCallback Callback delegate for Assimp's LogStream. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public delegate void AiLogStreamCallback(string msg, nint userData) Parameters Type Name Description string msg Log message nint userData char* pointer to user data that is passed to the callback"
  },
  "api/SharpAssimp.Unmanaged.AiMatKeys.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMatKeys.html",
    "title": "Class AiMatKeys",
    "summary": "Class AiMatKeys Static class containing material key constants. A fully qualified mat key name here means that it's a string that combines the mat key (base) name, its texture type semantic, and its texture index into a single string delimited by commas. For non-texture material properties, the texture type semantic and texture index are always zero. Inheritance object AiMatKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public static class AiMatKeys Fields | Edit this page View Source BLEND_FUNC Blending function (BlendMode) Declaration public const string BLEND_FUNC = \"$mat.blend,0,0\" Field Value Type Description string | Edit this page View Source BLEND_FUNC_BASE Blending function (BlendMode) Declaration public const string BLEND_FUNC_BASE = \"$mat.blend\" Field Value Type Description string | Edit this page View Source BUMPSCALING Bumpscaling (float) Declaration public const string BUMPSCALING = \"$mat.bumpscaling,0,0\" Field Value Type Description string | Edit this page View Source BUMPSCALING_BASE Bumpscaling (float) Declaration public const string BUMPSCALING_BASE = \"$mat.bumpscaling\" Field Value Type Description string | Edit this page View Source COLOR_AMBIENT Ambient color (Vector4) Declaration public const string COLOR_AMBIENT = \"$clr.ambient,0,0\" Field Value Type Description string | Edit this page View Source COLOR_AMBIENT_BASE Ambient color (Vector4) Declaration public const string COLOR_AMBIENT_BASE = \"$clr.ambient\" Field Value Type Description string | Edit this page View Source COLOR_DIFFUSE Diffuse color (Vector4) Declaration public const string COLOR_DIFFUSE = \"$clr.diffuse,0,0\" Field Value Type Description string | Edit this page View Source COLOR_DIFFUSE_BASE Diffuse color (Vector4) Declaration public const string COLOR_DIFFUSE_BASE = \"$clr.diffuse\" Field Value Type Description string | Edit this page View Source COLOR_EMISSIVE Emissive color (Vector4) Declaration public const string COLOR_EMISSIVE = \"$clr.emissive,0,0\" Field Value Type Description string | Edit this page View Source COLOR_EMISSIVE_BASE Emissive color (Vector4) Declaration public const string COLOR_EMISSIVE_BASE = \"$clr.emissive\" Field Value Type Description string | Edit this page View Source COLOR_REFLECTIVE Reflective color (Vector4) Declaration public const string COLOR_REFLECTIVE = \"$clr.reflective,0,0\" Field Value Type Description string | Edit this page View Source COLOR_REFLECTIVE_BASE Reflective color (Vector4) Declaration public const string COLOR_REFLECTIVE_BASE = \"$clr.reflective\" Field Value Type Description string | Edit this page View Source COLOR_SPECULAR Specular color (Vector4) Declaration public const string COLOR_SPECULAR = \"$clr.specular,0,0\" Field Value Type Description string | Edit this page View Source COLOR_SPECULAR_BASE Specular color (Vector4) Declaration public const string COLOR_SPECULAR_BASE = \"$clr.specular\" Field Value Type Description string | Edit this page View Source COLOR_TRANSPARENT Transparent color (Vector4) Declaration public const string COLOR_TRANSPARENT = \"$clr.transparent,0,0\" Field Value Type Description string | Edit this page View Source COLOR_TRANSPARENT_BASE Transparent color (Vector4) Declaration public const string COLOR_TRANSPARENT_BASE = \"$clr.transparent\" Field Value Type Description string | Edit this page View Source ENABLE_WIREFRAME Enable wireframe property (boolean) Declaration public const string ENABLE_WIREFRAME = \"$mat.wireframe,0,0\" Field Value Type Description string | Edit this page View Source ENABLE_WIREFRAME_BASE Enable wireframe property (boolean) Declaration public const string ENABLE_WIREFRAME_BASE = \"$mat.wireframe\" Field Value Type Description string | Edit this page View Source GLOBAL_BACKGROUND_IMAGE Background image (String) Declaration public const string GLOBAL_BACKGROUND_IMAGE = \"?bg.global,0,0\" Field Value Type Description string | Edit this page View Source GLOBAL_BACKGROUND_IMAGE_BASE Background image (String) Declaration public const string GLOBAL_BACKGROUND_IMAGE_BASE = \"?bg.global\" Field Value Type Description string | Edit this page View Source GLOBAL_SHADERLANG Shader language type (string) Declaration public const string GLOBAL_SHADERLANG = \"?sh.lang,0,0\" Field Value Type Description string | Edit this page View Source GLOBAL_SHADERLANG_BASE Shader language type (string) Declaration public const string GLOBAL_SHADERLANG_BASE = \"?sh.lang\" Field Value Type Description string | Edit this page View Source MAPPINGMODE_U_BASE Mapping mode U base name Declaration public const string MAPPINGMODE_U_BASE = \"$tex.mapmodeu\" Field Value Type Description string | Edit this page View Source MAPPINGMODE_V_BASE Mapping mode V base name Declaration public const string MAPPINGMODE_V_BASE = \"$tex.mapmodev\" Field Value Type Description string | Edit this page View Source MAPPING_BASE Mapping base name Declaration public const string MAPPING_BASE = \"$tex.mapping\" Field Value Type Description string | Edit this page View Source NAME Material name (String) Declaration public const string NAME = \"?mat.name,0,0\" Field Value Type Description string | Edit this page View Source NAME_BASE Material name (String) Declaration public const string NAME_BASE = \"?mat.name\" Field Value Type Description string | Edit this page View Source OPACITY Opacity (float) Declaration public const string OPACITY = \"$mat.opacity,0,0\" Field Value Type Description string | Edit this page View Source OPACITY_BASE Opacity (float) Declaration public const string OPACITY_BASE = \"$mat.opacity\" Field Value Type Description string | Edit this page View Source REFLECTIVITY Reflectivity (float) Declaration public const string REFLECTIVITY = \"$mat.reflectivity,0,0\" Field Value Type Description string | Edit this page View Source REFLECTIVITY_BASE Reflectivity (float) Declaration public const string REFLECTIVITY_BASE = \"$mat.reflectivity\" Field Value Type Description string | Edit this page View Source REFRACTI Refracti (float) Declaration public const string REFRACTI = \"$mat.refracti,0,0\" Field Value Type Description string | Edit this page View Source REFRACTI_BASE Refracti (float) Declaration public const string REFRACTI_BASE = \"$mat.refracti\" Field Value Type Description string | Edit this page View Source SHADER_COMPUTE Compute shader source code (string) Declaration public const string SHADER_COMPUTE = \"?sh.cs,0,0\" Field Value Type Description string | Edit this page View Source SHADER_COMPUTE_BASE Compute shader source code (string) Declaration public const string SHADER_COMPUTE_BASE = \"?sh.cs\" Field Value Type Description string | Edit this page View Source SHADER_FRAGMENT Fragment/Pixel shader source code (string) Declaration public const string SHADER_FRAGMENT = \"?sh.fs,0,0\" Field Value Type Description string | Edit this page View Source SHADER_FRAGMENT_BASE Fragment/Pixel shader source code (string) Declaration public const string SHADER_FRAGMENT_BASE = \"?sh.fs\" Field Value Type Description string | Edit this page View Source SHADER_GEO Geometry shader source code (string) Declaration public const string SHADER_GEO = \"?sh.gs,0,0\" Field Value Type Description string | Edit this page View Source SHADER_GEO_BASE Geometry shader source code (string) Declaration public const string SHADER_GEO_BASE = \"?sh.gs\" Field Value Type Description string | Edit this page View Source SHADER_PRIMITIVE Primitive/Domain shader source code (string) Declaration public const string SHADER_PRIMITIVE = \"?sh.ps,0,0\" Field Value Type Description string | Edit this page View Source SHADER_PRIMITIVE_BASE Primitive/Domain shader source code (string) Declaration public const string SHADER_PRIMITIVE_BASE = \"?sh.ps\" Field Value Type Description string | Edit this page View Source SHADER_TESSELATION Tesselation shader source code (string) Declaration public const string SHADER_TESSELATION = \"?sh.ts,0,0\" Field Value Type Description string | Edit this page View Source SHADER_TESSELATION_BASE Tesselation shader source code (string) Declaration public const string SHADER_TESSELATION_BASE = \"?sh.ts\" Field Value Type Description string | Edit this page View Source SHADER_VERTEX Vertex shader source code (string) Declaration public const string SHADER_VERTEX = \"?sh.vs,0,0\" Field Value Type Description string | Edit this page View Source SHADER_VERTEX_BASE Vertex shader source code (string) Declaration public const string SHADER_VERTEX_BASE = \"?sh.vs\" Field Value Type Description string | Edit this page View Source SHADING_MODEL Shading mode property (ShadingMode) Declaration public const string SHADING_MODEL = \"$mat.shadingm,0,0\" Field Value Type Description string | Edit this page View Source SHADING_MODEL_BASE Shading mode property (ShadingMode) Declaration public const string SHADING_MODEL_BASE = \"$mat.shadingm\" Field Value Type Description string | Edit this page View Source SHININESS Shininess (float) Declaration public const string SHININESS = \"$mat.shininess,0,0\" Field Value Type Description string | Edit this page View Source SHININESS_BASE Shininess (float) Declaration public const string SHININESS_BASE = \"$mat.shininess\" Field Value Type Description string | Edit this page View Source SHININESS_STRENGTH Shininess strength (float) Declaration public const string SHININESS_STRENGTH = \"$mat.shinpercent,0,0\" Field Value Type Description string | Edit this page View Source SHININESS_STRENGTH_BASE Shininess strength (float) Declaration public const string SHININESS_STRENGTH_BASE = \"$mat.shinpercent\" Field Value Type Description string | Edit this page View Source TEXBLEND_BASE Texture blend base name. Declaration public const string TEXBLEND_BASE = \"$tex.blend\" Field Value Type Description string | Edit this page View Source TEXFLAGS_BASE Texture flags base name Declaration public const string TEXFLAGS_BASE = \"$tex.flags\" Field Value Type Description string | Edit this page View Source TEXMAP_AXIS_BASE Texture map axis base name Declaration public const string TEXMAP_AXIS_BASE = \"$tex.mapaxis\" Field Value Type Description string | Edit this page View Source TEXOP_BASE Texture op base name Declaration public const string TEXOP_BASE = \"$tex.op\" Field Value Type Description string | Edit this page View Source TEXTURE_BASE Texture base name Declaration public const string TEXTURE_BASE = \"$tex.file\" Field Value Type Description string | Edit this page View Source TRANSPARENCYFACTOR Transparency Factor (float) Declaration public const string TRANSPARENCYFACTOR = \"$mat.transparencyfactor,0,0\" Field Value Type Description string | Edit this page View Source TRANSPARENCYFACTOR_BASE Transparency Factor (float) Declaration public const string TRANSPARENCYFACTOR_BASE = \"$mat.transparencyfactor\" Field Value Type Description string | Edit this page View Source TWOSIDED Two sided property (boolean) Declaration public const string TWOSIDED = \"$mat.twosided,0,0\" Field Value Type Description string | Edit this page View Source TWOSIDED_BASE Two sided property (boolean) Declaration public const string TWOSIDED_BASE = \"$mat.twosided\" Field Value Type Description string | Edit this page View Source UVTRANSFORM_BASE UV transform base name Declaration public const string UVTRANSFORM_BASE = \"$tex.uvtrafo\" Field Value Type Description string | Edit this page View Source UVWSRC_BASE UVWSRC base name Declaration public const string UVWSRC_BASE = \"$tex.uvwsrc\" Field Value Type Description string Methods | Edit this page View Source GetBaseName(string) Helper function to get the base name from a fully qualified name of a material property type name. The format of such a string is: \"baseName,TextureType,texIndex\" Declaration public static string GetBaseName(string fullyQualifiedName) Parameters Type Name Description string fullyQualifiedName Fully qualified material property name. Returns Type Description string Base name of the property type. | Edit this page View Source GetFullTextureName(string, TextureType, int) Helper function to get the fully qualified name of a texture property type name. Takes in a base name constant, a texture type, and a texture index and outputs the name in the format: \"baseName,TextureType,texIndex\" Declaration public static string GetFullTextureName(string baseName, TextureType texType, int texIndex) Parameters Type Name Description string baseName Base name TextureType texType Texture type int texIndex Texture index Returns Type Description string Fully qualified texture name"
  },
  "api/SharpAssimp.Unmanaged.AiMaterial.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMaterial.html",
    "title": "Struct AiMaterial",
    "summary": "Struct AiMaterial Represents an aiMaterial struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMaterial Fields | Edit this page View Source NumAllocated Storage allocated for key-value properties. Declaration public uint NumAllocated Field Value Type Description uint | Edit this page View Source NumProperties Number of key-value properties. Declaration public uint NumProperties Field Value Type Description uint | Edit this page View Source Properties aiMaterialProperty**, array of material properties. Declaration public nint Properties Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiMaterialProperty.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMaterialProperty.html",
    "title": "Struct AiMaterialProperty",
    "summary": "Struct AiMaterialProperty Represents an aiMaterialProperty struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMaterialProperty Fields | Edit this page View Source Data char*, byte buffer to hold the property's value. Declaration public nint Data Field Value Type Description nint | Edit this page View Source DataLength Size of the buffer data in bytes. This value may not be zero. Declaration public uint DataLength Field Value Type Description uint | Edit this page View Source Index Textures: Specifies the index of the texture. For non-texture properties this is always zero. Declaration public uint Index Field Value Type Description uint | Edit this page View Source Key Name of the property (key). Declaration public AiString Key Field Value Type Description AiString | Edit this page View Source Semantic Textures: Specifies texture usage. None texture properties have this zero (or None). Declaration public TextureType Semantic Field Value Type Description TextureType | Edit this page View Source Type Type of value contained in the buffer. Declaration public PropertyType Type Field Value Type Description PropertyType"
  },
  "api/SharpAssimp.Unmanaged.AiMemoryInfo.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMemoryInfo.html",
    "title": "Struct AiMemoryInfo",
    "summary": "Struct AiMemoryInfo Represents the memory requirements for the different components of an imported scene. All sizes in in bytes. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMemoryInfo Fields | Edit this page View Source Animations Size of the storage allocated for animation data, in bytes. Declaration public uint Animations Field Value Type Description uint | Edit this page View Source Cameras Size of the storage allocated for camera data, in bytes. Declaration public uint Cameras Field Value Type Description uint | Edit this page View Source Lights Size of the storage allocated for light data, in bytes. Declaration public uint Lights Field Value Type Description uint | Edit this page View Source Materials Size of the storage allocated for material data, in bytes. Declaration public uint Materials Field Value Type Description uint | Edit this page View Source Meshes Size of the storage allocated for mesh data, in bytes. Declaration public uint Meshes Field Value Type Description uint | Edit this page View Source Nodes Size of the storage allocated for node data, in bytes. Declaration public uint Nodes Field Value Type Description uint | Edit this page View Source Textures Size of the storage allocated for texture data, in bytes. Declaration public uint Textures Field Value Type Description uint | Edit this page View Source Total Total storage allocated for the imported scene, in bytes. Declaration public uint Total Field Value Type Description uint"
  },
  "api/SharpAssimp.Unmanaged.AiMesh.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMesh.html",
    "title": "Struct AiMesh",
    "summary": "Struct AiMesh Represents an aiMesh struct. Note: This structure requires marshaling, due to the arrays of IntPtrs. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMesh Fields | Edit this page View Source AABB Axis aligned bounding box. Declaration public BoundingBox AABB Field Value Type Description BoundingBox | Edit this page View Source AnimMeshes aiAnimMesh**, array of attachment meshes for vertex-based animation. NOT CURRENTLY IN USE. Declaration public nint AnimMeshes Field Value Type Description nint | Edit this page View Source BiTangents aiVector3*, array of bitangents. Declaration public nint BiTangents Field Value Type Description nint | Edit this page View Source Bones aiBone**, array of bones. Declaration public nint Bones Field Value Type Description nint | Edit this page View Source Colors aiVector4*[Max_Value], array of arrays of vertex colors. Max_Value is defined as AI_MAX_NUMBER_OF_COLOR_SETS. Declaration public AiMeshColorArray Colors Field Value Type Description AiMeshColorArray | Edit this page View Source Faces aiFace*, array of faces. Declaration public nint Faces Field Value Type Description nint | Edit this page View Source MaterialIndex Material index referencing the material in the scene. Declaration public uint MaterialIndex Field Value Type Description uint | Edit this page View Source MorphMethod unsigned int, method of morphing when anim meshes are specified. Declaration public MeshMorphingMethod MorphMethod Field Value Type Description MeshMorphingMethod | Edit this page View Source Name Optional name of the mesh. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source Normals aiVector3*, array of normals. Declaration public nint Normals Field Value Type Description nint | Edit this page View Source NumAnimMeshes Number of attachment meshes. NOT CURRENTLY IN USE. Declaration public uint NumAnimMeshes Field Value Type Description uint | Edit this page View Source NumBones Number of bones in the mesh. Declaration public uint NumBones Field Value Type Description uint | Edit this page View Source NumFaces Number of faces in the mesh. Declaration public uint NumFaces Field Value Type Description uint | Edit this page View Source NumUVComponents unsigned int[Max_Value], array of ints denoting the number of components for each set of texture coordinates - UV (2), UVW (3) for example. Max_Value is defined as AI_MAX_NUMBER_OF_TEXTURECOORDS. Declaration public AiMeshUVComponentArray NumUVComponents Field Value Type Description AiMeshUVComponentArray | Edit this page View Source NumVertices Number of vertices in the mesh, denotes length of -all- per-vertex arrays. Declaration public uint NumVertices Field Value Type Description uint | Edit this page View Source PrimitiveTypes unsigned int, bitwise flag detailing types of primitives contained. Declaration public PrimitiveType PrimitiveTypes Field Value Type Description PrimitiveType | Edit this page View Source Tangents aiVector3*, array of tangents. Declaration public nint Tangents Field Value Type Description nint | Edit this page View Source TextureCoords aiVector3*[Max_Value], array of arrays of texture coordinates. Max_Value is defined as AI_MAX_NUMBER_OF_TEXTURECOORDS. Declaration public AiMeshTextureCoordinateArray TextureCoords Field Value Type Description AiMeshTextureCoordinateArray | Edit this page View Source TextureCoordsNames aiString[Max_Value], pointer to array of texture coordinate names. Max_Value is defined as AI_MAX_NUMBER_OF_TEXTURECOORDS. Declaration public nint TextureCoordsNames Field Value Type Description nint | Edit this page View Source Vertices aiVector3*, array of positions. Declaration public nint Vertices Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiMeshAnim.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshAnim.html",
    "title": "Struct AiMeshAnim",
    "summary": "Struct AiMeshAnim Represents an aiMeshAnim struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshAnim Fields | Edit this page View Source Keys aiMeshkey*, the key frames of the animation. There must exist at least one. Declaration public nint Keys Field Value Type Description nint | Edit this page View Source Name Name of the mesh to be animated. Empty string not allowed. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NumKeys Number of keys, there is at least one. Declaration public uint NumKeys Field Value Type Description uint"
  },
  "api/SharpAssimp.Unmanaged.AiMeshColorArray.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshColorArray.html",
    "title": "Struct AiMeshColorArray",
    "summary": "Struct AiMeshColorArray Fixed length array for representing the color channels of a mesh. Length is equal to AI_MAX_NUMBER_OF_COLOR_SETS. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshColorArray Properties | Edit this page View Source this[int] Gets or sets an array value at the specified index. Declaration public nint this[int index] { readonly get; set; } Parameters Type Name Description int index Zero-based index. Property Value Type Description nint | Edit this page View Source Length Gets the length of the array. Declaration public readonly int Length { get; } Property Value Type Description int"
  },
  "api/SharpAssimp.Unmanaged.AiMeshMorphAnim.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshMorphAnim.html",
    "title": "Struct AiMeshMorphAnim",
    "summary": "Struct AiMeshMorphAnim Represents an aiMeshMorphAnim struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshMorphAnim Fields | Edit this page View Source Keys aiMeshMorphKey*, key frames of the animation. Declaration public nint Keys Field Value Type Description nint | Edit this page View Source Name aiString, the name of the mesh to be animated. Empty strings are not allowed, animated meshes need to be named (not necessarily uniquely, the name can basically serve as a wildcard to select a group of meshes with similar animation setup). Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NumKeys unsigned int, number of key frames. Must be at least one. Declaration public uint NumKeys Field Value Type Description uint"
  },
  "api/SharpAssimp.Unmanaged.AiMeshMorphKey.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshMorphKey.html",
    "title": "Struct AiMeshMorphKey",
    "summary": "Struct AiMeshMorphKey Represents an aiMeshMorphKey struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshMorphKey Fields | Edit this page View Source NumValuesAndWeights unsigned int, the number of values/weights. Declaration public uint NumValuesAndWeights Field Value Type Description uint | Edit this page View Source Time The time of this key. Declaration public double Time Field Value Type Description double | Edit this page View Source Values unsigned int*, values at the time of this key. Declaration public nint Values Field Value Type Description nint | Edit this page View Source Weights double*, weights at the time of this key. Declaration public nint Weights Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiMeshTextureCoordinateArray.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshTextureCoordinateArray.html",
    "title": "Struct AiMeshTextureCoordinateArray",
    "summary": "Struct AiMeshTextureCoordinateArray Fixed length array for representing the texture coordinate channels of a mesh. Length is equal to AI_MAX_NUMBER_OF_TEXTURECOORDS. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshTextureCoordinateArray Properties | Edit this page View Source this[int] Gets or sets an array value at the specified index. Declaration public nint this[int index] { readonly get; set; } Parameters Type Name Description int index Zero-based index. Property Value Type Description nint | Edit this page View Source Length Gets the length of the array. Declaration public readonly int Length { get; } Property Value Type Description int"
  },
  "api/SharpAssimp.Unmanaged.AiMeshUVComponentArray.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMeshUVComponentArray.html",
    "title": "Struct AiMeshUVComponentArray",
    "summary": "Struct AiMeshUVComponentArray Fixed length array for representing the number of UV components for each texture coordinate channel of a mesh. Length is equal to AI_MAX_NUMBER_OF_TEXTURECOORDS. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMeshUVComponentArray Properties | Edit this page View Source this[int] Gets or sets an array value at the specified index. Declaration public uint this[int index] { readonly get; set; } Parameters Type Name Description int index Zero-based index. Property Value Type Description uint | Edit this page View Source Length Gets the length of the array. Declaration public readonly int Length { get; } Property Value Type Description int"
  },
  "api/SharpAssimp.Unmanaged.AiMetadata.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMetadata.html",
    "title": "Struct AiMetadata",
    "summary": "Struct AiMetadata Represents an aiMetadata struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMetadata Fields | Edit this page View Source NumProperties Length of the Keys and Values arrays. Declaration public uint NumProperties Field Value Type Description uint | Edit this page View Source Values aiMetadataEntry*, array of values. May not be NULL. Entries may be NULL if the corresponding property key has no assigned value. Declaration public nint Values Field Value Type Description nint | Edit this page View Source keys aiString*, array of keys. May not be NULL. Each entry must exist. Declaration public nint keys Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiMetadataEntry.html": {
    "href": "api/SharpAssimp.Unmanaged.AiMetadataEntry.html",
    "title": "Struct AiMetadataEntry",
    "summary": "Struct AiMetadataEntry Represents an aiMetadataEntry struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiMetadataEntry Fields | Edit this page View Source Data Pointer to data. Declaration public nint Data Field Value Type Description nint | Edit this page View Source DataType Type of metadata. Declaration public MetaDataType DataType Field Value Type Description MetaDataType"
  },
  "api/SharpAssimp.Unmanaged.AiNode.html": {
    "href": "api/SharpAssimp.Unmanaged.AiNode.html",
    "title": "Struct AiNode",
    "summary": "Struct AiNode Represents an aiNode struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiNode Fields | Edit this page View Source Children aiNode**, array of nodes this node owns. Declaration public nint Children Field Value Type Description nint | Edit this page View Source Meshes unsigned int*, array of mesh indices. Declaration public nint Meshes Field Value Type Description nint | Edit this page View Source MetaData aiMetadata*, pointer to a metadata container. May be NULL, if an importer doesn't document metadata then it doesn't write any. Declaration public nint MetaData Field Value Type Description nint | Edit this page View Source Name Name of the node. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NumChildren Number of children the node owns. Declaration public uint NumChildren Field Value Type Description uint | Edit this page View Source NumMeshes Number of meshes referenced by this node. Declaration public uint NumMeshes Field Value Type Description uint | Edit this page View Source Parent aiNode*, node's parent. Declaration public nint Parent Field Value Type Description nint | Edit this page View Source Transformation Node's transform relative to its parent. Declaration public Matrix4x4 Transformation Field Value Type Description Matrix4x4"
  },
  "api/SharpAssimp.Unmanaged.AiNodeAnim.html": {
    "href": "api/SharpAssimp.Unmanaged.AiNodeAnim.html",
    "title": "Struct AiNodeAnim",
    "summary": "Struct AiNodeAnim Represents an aiNodeAnim struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiNodeAnim Fields | Edit this page View Source NodeName Name of the node affected by the animation. The node must exist and be unique. Declaration public AiString NodeName Field Value Type Description AiString | Edit this page View Source NumPositionKeys Number of position keys. Declaration public uint NumPositionKeys Field Value Type Description uint | Edit this page View Source NumRotationKeys The number of rotation keys. Declaration public uint NumRotationKeys Field Value Type Description uint | Edit this page View Source NumScalingKeys Number of scaling keys. Declaration public uint NumScalingKeys Field Value Type Description uint | Edit this page View Source PositionKeys VectorKey*, position keys of this animation channel. Positions are 3D vectors and are accompanied by at least one scaling and one rotation key. Declaration public nint PositionKeys Field Value Type Description nint | Edit this page View Source PostState Defines how the animation behaves after the last key was processed. Declaration public AnimationBehaviour PostState Field Value Type Description AnimationBehaviour | Edit this page View Source Prestate Defines how the animation behaves before the first key is encountered. Declaration public AnimationBehaviour Prestate Field Value Type Description AnimationBehaviour | Edit this page View Source RotationKeys QuaternionKey*, rotation keys of this animation channel. Rotations are 4D vectors (quaternions). If there are rotation keys there will be at least one scaling and one position key. Declaration public nint RotationKeys Field Value Type Description nint | Edit this page View Source ScalingKeys VectorKey*, scaling keys of this animation channel. Scalings are specified as a 3D vector, and if there are scaling keys, there will at least be one position and one rotation key. Declaration public nint ScalingKeys Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiScene.html": {
    "href": "api/SharpAssimp.Unmanaged.AiScene.html",
    "title": "Struct AiScene",
    "summary": "Struct AiScene Represents an aiScene struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiScene Fields | Edit this page View Source Animations aiAnimation**, animations in the scene. Declaration public nint Animations Field Value Type Description nint | Edit this page View Source Cameras aiCamera**, cameras in the scene. Declaration public nint Cameras Field Value Type Description nint | Edit this page View Source Flags unsigned int, flags about the state of the scene Declaration public SceneFlags Flags Field Value Type Description SceneFlags | Edit this page View Source Lights aiLight**, lights in the scene. Declaration public nint Lights Field Value Type Description nint | Edit this page View Source Materials aiMaterial**, materials in the scene. Declaration public nint Materials Field Value Type Description nint | Edit this page View Source Meshes aiMesh**, meshes in the scene. Declaration public nint Meshes Field Value Type Description nint | Edit this page View Source Metadata aiMetadata*, The global metadata assigned to the scene itself. This data contains global metadata which belongs to the scene like unit-conversions, versions, vendors or other model-specific data. This can be used to store format-specific metadata as well. Declaration public nint Metadata Field Value Type Description nint | Edit this page View Source Name The name of the scene itself. Declaration public AiString Name Field Value Type Description AiString | Edit this page View Source NumAnimations Number of animations contained. Declaration public uint NumAnimations Field Value Type Description uint | Edit this page View Source NumCameras Number of cameras contained. Declaration public uint NumCameras Field Value Type Description uint | Edit this page View Source NumLights Number of lights contained. Declaration public uint NumLights Field Value Type Description uint | Edit this page View Source NumMaterials Number of materials contained. Declaration public uint NumMaterials Field Value Type Description uint | Edit this page View Source NumMeshes Number of meshes contained. Declaration public uint NumMeshes Field Value Type Description uint | Edit this page View Source NumSkeletons Number of skeletons contained. Declaration public uint NumSkeletons Field Value Type Description uint | Edit this page View Source NumTextures Number of embedded textures contained. Declaration public uint NumTextures Field Value Type Description uint | Edit this page View Source Private Internal data, do not touch Declaration public nint Private Field Value Type Description nint | Edit this page View Source RootNode aiNode*, root node of the scenegraph. Declaration public nint RootNode Field Value Type Description nint | Edit this page View Source Skeletons aiSkeleton**, skeletons in the scene. Declaration public nint Skeletons Field Value Type Description nint | Edit this page View Source Textures aiTexture**, textures in the scene. Declaration public nint Textures Field Value Type Description nint"
  },
  "api/SharpAssimp.Unmanaged.AiString.html": {
    "href": "api/SharpAssimp.Unmanaged.AiString.html",
    "title": "Struct AiString",
    "summary": "Struct AiString Represents an aiString struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiString Constructors | Edit this page View Source AiString(string) Constructs a new instance of the AiString struct. Declaration public AiString(string data) Parameters Type Name Description string data The string data Fields | Edit this page View Source Data Actual string data. Declaration public byte* Data Field Value Type Description byte* | Edit this page View Source Length Byte length of the UTF-8 string, NOT logical length. Declaration public uint Length Field Value Type Description uint Methods | Edit this page View Source GetString() Convienence method for getting the AiString string - if the length is not greater than zero, it returns an empty string rather than garbage. Declaration public readonly string GetString() Returns Type Description string AiString string data | Edit this page View Source GetString(in AiString) Convienence method for getting the AiString string - if the length is not greater than zero, it returns an empty string rather than garbage. Use this to avoid struct copy if the string was passed by read-only ref. Declaration public static string GetString(in AiString aiStr) Parameters Type Name Description AiString aiStr AiString Returns Type Description string AiString string data | Edit this page View Source SetString(string) Convienence method for setting the AiString string (and length). Declaration public bool SetString(string data) Parameters Type Name Description string data String data to set Returns Type Description bool True if the operation was successful, false otherwise. | Edit this page View Source ToString() Returns the fully qualified type name of this instance. Declaration public override readonly string ToString() Returns Type Description string A string containing a fully qualified type name. Overrides ValueType.ToString()"
  },
  "api/SharpAssimp.Unmanaged.AiTexture.html": {
    "href": "api/SharpAssimp.Unmanaged.AiTexture.html",
    "title": "Struct AiTexture",
    "summary": "Struct AiTexture Represents an aiTexture struct. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public struct AiTexture Fields | Edit this page View Source Data aiTexel*, array of texel data. Declaration public nint Data Field Value Type Description nint | Edit this page View Source Filename Texture original filename. Declaration public AiString Filename Field Value Type Description AiString | Edit this page View Source FormatHint sbyte[9], format extension hint. Fixed size char is two bytes regardless of encoding. Unmanaged assimp uses a char that maps to one byte. 8 for string + 1 for terminator. Declaration public sbyte* FormatHint Field Value Type Description sbyte* | Edit this page View Source Height Height of the texture. Declaration public uint Height Field Value Type Description uint | Edit this page View Source Width Width of the texture. Declaration public uint Width Field Value Type Description uint Methods | Edit this page View Source GetFormatHint() Gets the format hint. Declaration public readonly string GetFormatHint() Returns Type Description string The format hint | Edit this page View Source GetFormatHint(in AiTexture) Gets the format hint. Use this to avoid struct copy if the string was passed by read-only ref. Declaration public static string GetFormatHint(in AiTexture aiTex) Parameters Type Name Description AiTexture aiTex AiTexture Returns Type Description string The format hint | Edit this page View Source SetFormatHint(string?) Sets the format hint. Declaration public void SetFormatHint(string? formatHint) Parameters Type Name Description string formatHint Format hint - must be 3 characters or less"
  },
  "api/SharpAssimp.Unmanaged.AssimpLibrary.html": {
    "href": "api/SharpAssimp.Unmanaged.AssimpLibrary.html",
    "title": "Class AssimpLibrary",
    "summary": "Class AssimpLibrary Singleton that governs access to the unmanaged Assimp library functions. Inheritance object UnmanagedLibrary AssimpLibrary Inherited Members UnmanagedLibrary.LibraryLoaded UnmanagedLibrary.LibraryFreed UnmanagedLibrary.IsLibraryLoaded UnmanagedLibrary.DefaultLibraryName UnmanagedLibrary.LibraryPath UnmanagedLibrary.Resolver UnmanagedLibrary.ThrowOnLoadFailure UnmanagedLibrary.Is64Bit UnmanagedLibrary.GetPlatform() UnmanagedLibrary.LoadLibrary() UnmanagedLibrary.LoadLibrary(string, string) UnmanagedLibrary.LoadLibrary(string) UnmanagedLibrary.FreeLibrary() UnmanagedLibrary.GetFunction<T>(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public sealed class AssimpLibrary : UnmanagedLibrary Properties | Edit this page View Source Instance Gets the AssimpLibrary instance. Declaration public static AssimpLibrary Instance { get; } Property Value Type Description AssimpLibrary | Edit this page View Source IsMultithreadingSupported Gets if the Assimp unmanaged library supports multithreading. If it was compiled for single threading only, then it will not utilize multiple threads during import. Declaration public bool IsMultithreadingSupported { get; } Property Value Type Description bool Methods | Edit this page View Source ApplyPostProcessing(nint, PostProcessSteps) Applies a post-processing step on an already imported scene. Declaration public nint ApplyPostProcessing(nint scene, PostProcessSteps flags) Parameters Type Name Description nint scene Pointer to the unmanaged scene data structure. PostProcessSteps flags Post processing steps to run. Returns Type Description nint Pointer to the unmanaged scene data structure. | Edit this page View Source AttachLogStream(nint) Attaches a log stream callback to catch Assimp messages. Declaration public void AttachLogStream(nint logStreamPtr) Parameters Type Name Description nint logStreamPtr Pointer to an instance of AiLogStream. | Edit this page View Source CopyScene(nint) Creates a modifyable copy of a scene, useful for copying the scene that was imported so its topology can be modified and the scene be exported. Declaration public nint CopyScene(nint sceneToCopy) Parameters Type Name Description nint sceneToCopy Valid scene to be copied Returns Type Description nint Modifyable copy of the scene | Edit this page View Source CreatePropertyStore() Create an empty property store. Property stores are used to collect import settings. Declaration public nint CreatePropertyStore() Returns Type Description nint Pointer to property store | Edit this page View Source DetachAllLogStreams() Detaches all logstream callbacks currently attached to Assimp. Declaration public void DetachAllLogStreams() | Edit this page View Source DetachLogStream(nint) Detaches a logstream callback. Declaration public ReturnCode DetachLogStream(nint logStreamPtr) Parameters Type Name Description nint logStreamPtr Pointer to an instance of AiLogStream. Returns Type Description ReturnCode A return code signifying if the function was successful or not. | Edit this page View Source EnableVerboseLogging(bool) Enables verbose logging. Declaration public void EnableVerboseLogging(bool enable) Parameters Type Name Description bool enable True if verbose logging is to be enabled or not. | Edit this page View Source ExportScene(nint, string, string, PostProcessSteps) Exports the given scene to a chosen file format and writes the result file(s) to disk. Declaration public ReturnCode ExportScene(nint scene, string formatId, string fileName, PostProcessSteps preProcessing) Parameters Type Name Description nint scene The scene to export, which needs to be freed by the caller. The scene is expected to conform to Assimp's Importer output format. In short, this means the model data should use a right handed coordinate system, face winding should be counter clockwise, and the UV coordinate origin assumed to be upper left. If the input is different, specify the pre processing flags appropiately. string formatId Format id describing which format to export to. string fileName Output filename to write to PostProcessSteps preProcessing Pre processing flags - accepts any post processing step flag. In reality only a small subset are actually supported, e.g. to ensure the input conforms to the standard Assimp output format. Some may be redundant, such as triangulation, which some exporters may have to enforce due to the export format. Returns Type Description ReturnCode Return code specifying if the operation was a success. | Edit this page View Source ExportScene(nint, string, string, nint, PostProcessSteps) Exports the given scene to a chosen file format and writes the result file(s) to disk. Declaration public ReturnCode ExportScene(nint scene, string formatId, string fileName, nint fileIO, PostProcessSteps preProcessing) Parameters Type Name Description nint scene The scene to export, which needs to be freed by the caller. The scene is expected to conform to Assimp's Importer output format. In short, this means the model data should use a right handed coordinate system, face winding should be counter clockwise, and the UV coordinate origin assumed to be upper left. If the input is different, specify the pre processing flags appropiately. string formatId Format id describing which format to export to. string fileName Output filename to write to nint fileIO Pointer to an instance of AiFileIO, a custom file IO system used to open the model and any associated file the loader needs to open, passing NULL uses the default implementation. PostProcessSteps preProcessing Pre processing flags - accepts any post processing step flag. In reality only a small subset are actually supported, e.g. to ensure the input conforms to the standard Assimp output format. Some may be redundant, such as triangulation, which some exporters may have to enforce due to the export format. Returns Type Description ReturnCode Return code specifying if the operation was a success. | Edit this page View Source ExportSceneToBlob(nint, string, PostProcessSteps) Exports the given scene to a chosen file format. Returns the exported data as a binary blob which you can embed into another data structure or file. Declaration public ExportDataBlob? ExportSceneToBlob(nint scene, string formatId, PostProcessSteps preProcessing) Parameters Type Name Description nint scene Scene to export, it is the responsibility of the caller to free this when finished. string formatId Format id describing which format to export to. PostProcessSteps preProcessing Pre processing flags to operate on the scene during the export. Returns Type Description ExportDataBlob Exported binary blob, or null if there was an error. | Edit this page View Source GetBranchName() Returns the branchname of the Assimp runtime. Declaration public string GetBranchName() Returns Type Description string The current branch name. | Edit this page View Source GetCompileFlags() Get the compilation flags that describe how the native Assimp DLL was compiled. Declaration public CompileFlags GetCompileFlags() Returns Type Description CompileFlags Compilation flags | Edit this page View Source GetEmbeddedTexture(nint, string) Gets an embedded texture. Declaration public nint GetEmbeddedTexture(nint scene, string filename) Parameters Type Name Description nint scene Input asset. string filename Texture path extracted from GetMaterialString(ref AiMaterial, string, TextureType, uint). Returns Type Description nint An embedded texture, or nullptr. | Edit this page View Source GetErrorString() Gets the last error logged in Assimp. Declaration public string GetErrorString() Returns Type Description string The last error message logged. | Edit this page View Source GetExportFormatDescriptions() Gets all supported export formats. Declaration public ExportFormatDescription[] GetExportFormatDescriptions() Returns Type Description ExportFormatDescription[] Array of supported export formats. | Edit this page View Source GetExtensionList() Gets all the model format extensions that are currently supported by Assimp. Declaration public string[] GetExtensionList() Returns Type Description string[] Array of supported format extensions | Edit this page View Source GetImporterDescriptions() Gets a collection of importer descriptions that detail metadata and feature support for each importer. Declaration public ImporterDescription[] GetImporterDescriptions() Returns Type Description ImporterDescription[] Collection of importer descriptions | Edit this page View Source GetLegalString() Gets the Assimp legal info. Declaration public string GetLegalString() Returns Type Description string String containing Assimp legal info. | Edit this page View Source GetMaterialColor(ref AiMaterial, string, TextureType, uint) Retrieves a color value from the material property table. Declaration public Vector4 GetMaterialColor(ref AiMaterial mat, string key, TextureType texType, uint texIndex) Parameters Type Name Description AiMaterial mat Material to retrieve the data from string key Ai mat key (base) name to search for TextureType texType Texture Type semantic, always zero for non-texture properties uint texIndex Texture index, always zero for non-texture properties Returns Type Description Vector4 The color if it exists. If not, the default Vector4 value is returned. | Edit this page View Source GetMaterialFloatArray(ref AiMaterial, string, TextureType, uint, uint) Retrieves an array of float values with the specific key from the material. Declaration public float[]? GetMaterialFloatArray(ref AiMaterial mat, string key, TextureType texType, uint texIndex, uint floatCount) Parameters Type Name Description AiMaterial mat Material to retrieve the data from string key Ai mat key (base) name to search for TextureType texType Texture Type semantic, always zero for non-texture properties uint texIndex Texture index, always zero for non-texture properties uint floatCount The maximum number of floats to read. This may not accurately describe the data returned, as it may not exist or be smaller. If this value is less than the available floats, then only the requested number is returned (e.g. 1 or 2 out of a 4 float array). Returns Type Description float[] The float array, if it exists | Edit this page View Source GetMaterialIntegerArray(ref AiMaterial, string, TextureType, uint, uint) Retrieves an array of integer values with the specific key from the material. Declaration public int[]? GetMaterialIntegerArray(ref AiMaterial mat, string key, TextureType texType, uint texIndex, uint intCount) Parameters Type Name Description AiMaterial mat Material to retrieve the data from string key Ai mat key (base) name to search for TextureType texType Texture Type semantic, always zero for non-texture properties uint texIndex Texture index, always zero for non-texture properties uint intCount The maximum number of integers to read. This may not accurately describe the data returned, as it may not exist or be smaller. If this value is less than the available integers, then only the requested number is returned (e.g. 1 or 2 out of a 4 float array). Returns Type Description int[] The integer array, if it exists | Edit this page View Source GetMaterialProperty(ref AiMaterial, string, TextureType, uint) Retrieves a material property with the specific key from the material. Declaration public AiMaterialProperty GetMaterialProperty(ref AiMaterial mat, string key, TextureType texType, uint texIndex) Parameters Type Name Description AiMaterial mat Material to retrieve the property from string key Ai mat key (base) name to search for TextureType texType Texture Type semantic, always zero for non-texture properties uint texIndex Texture index, always zero for non-texture properties Returns Type Description AiMaterialProperty The material property, if found. | Edit this page View Source GetMaterialString(ref AiMaterial, string, TextureType, uint) Retrieves a string from the material property table. Declaration public string GetMaterialString(ref AiMaterial mat, string key, TextureType texType, uint texIndex) Parameters Type Name Description AiMaterial mat Material to retrieve the data from string key Ai mat key (base) name to search for TextureType texType Texture Type semantic, always zero for non-texture properties uint texIndex Texture index, always zero for non-texture properties Returns Type Description string The string, if it exists. If not, an empty string is returned. | Edit this page View Source GetMaterialTexture(ref AiMaterial, TextureType, uint) Gets all values pertaining to a particular texture from a material. Declaration public TextureSlot GetMaterialTexture(ref AiMaterial mat, TextureType type, uint index) Parameters Type Name Description AiMaterial mat Material to retrieve the data from TextureType type Texture type semantic uint index Texture index Returns Type Description TextureSlot Returns the texture slot struct containing all the information. | Edit this page View Source GetMaterialTextureCount(ref AiMaterial, TextureType) Gets the number of textures contained in the material for a particular texture type. Declaration public uint GetMaterialTextureCount(ref AiMaterial mat, TextureType type) Parameters Type Name Description AiMaterial mat Material to retrieve the data from TextureType type Texture Type semantic Returns Type Description uint The number of textures for the type. | Edit this page View Source GetMaterialTextureFilePath(ref AiMaterial, TextureType, uint) Gets the texture filepath contained in the material. Declaration public string GetMaterialTextureFilePath(ref AiMaterial mat, TextureType type, uint index) Parameters Type Name Description AiMaterial mat Material to retrieve the data from TextureType type Texture type semantic uint index Texture index Returns Type Description string The texture filepath, if it exists. If not an empty string is returned. | Edit this page View Source GetMemoryRequirements(nint) Gets the memory requirements of the scene. Declaration public AiMemoryInfo GetMemoryRequirements(nint scene) Parameters Type Name Description nint scene Pointer to the unmanaged scene data structure. Returns Type Description AiMemoryInfo The memory information about the scene. | Edit this page View Source GetVerboseLoggingEnabled() Gets if verbose logging is enabled. Declaration public bool GetVerboseLoggingEnabled() Returns Type Description bool True if verbose logging is enabled, false otherwise. | Edit this page View Source GetVersion() Gets the native Assimp DLL's current version number as \"major.minor.revision\" string. This is the version of Assimp that this wrapper is currently using. Declaration public string GetVersion() Returns Type Description string Unmanaged DLL version | Edit this page View Source GetVersionAsVersion() Gets the native Assimp DLL's current version number as a .NET version object. Declaration public Version GetVersionAsVersion() Returns Type Description Version Unmanaged DLL version | Edit this page View Source GetVersionMajor() Gets the native Assimp DLL's major version number. Declaration public uint GetVersionMajor() Returns Type Description uint Assimp major version number | Edit this page View Source GetVersionMinor() Gets the native Assimp DLL's minor version number. Declaration public uint GetVersionMinor() Returns Type Description uint Assimp minor version number | Edit this page View Source GetVersionRevision() Gets the native Assimp DLL's revision version number. Declaration public uint GetVersionRevision() Returns Type Description uint Assimp revision version number | Edit this page View Source ImportFile(string, PostProcessSteps, nint) Imports a file. Declaration public nint ImportFile(string file, PostProcessSteps flags, nint propStore) Parameters Type Name Description string file Valid filename PostProcessSteps flags Post process flags specifying what steps are to be run after the import. nint propStore Property store containing config name-values, may be null. Returns Type Description nint Pointer to the unmanaged data structure. | Edit this page View Source ImportFile(string, PostProcessSteps, nint, nint) Imports a file. Declaration public nint ImportFile(string file, PostProcessSteps flags, nint fileIO, nint propStore) Parameters Type Name Description string file Valid filename PostProcessSteps flags Post process flags specifying what steps are to be run after the import. nint fileIO Pointer to an instance of AiFileIO, a custom file IO system used to open the model and any associated file the loader needs to open, passing NULL uses the default implementation. nint propStore Property store containing config name-values, may be null. Returns Type Description nint Pointer to the unmanaged data structure. | Edit this page View Source ImportFileFromStream(Stream, PostProcessSteps, string?, nint) Imports a scene from a stream. This uses the \"aiImportFileFromMemory\" function. The stream can be from anyplace, not just a memory stream. It is up to the caller to dispose of the stream. Declaration public nint ImportFileFromStream(Stream stream, PostProcessSteps flags, string? formatHint, nint propStore) Parameters Type Name Description Stream stream Stream containing the scene data PostProcessSteps flags Post processing flags string formatHint A hint to Assimp to decide which importer to use to process the data nint propStore Property store containing the config name-values, may be null. Returns Type Description nint Pointer to the unmanaged data structure. | Edit this page View Source IsExtensionSupported(string) Checks whether the model format extension is supported by Assimp. Declaration public bool IsExtensionSupported(string extension) Parameters Type Name Description string extension Model format extension, e.g. \".3ds\" Returns Type Description bool True if the format is supported, false otherwise. | Edit this page View Source ReleaseImport(nint) Releases the unmanaged scene data structure. This should NOT be used for unmanaged scenes that were marshaled from the managed scene structure - only for scenes whose memory was allocated by the native library! Declaration public void ReleaseImport(nint scene) Parameters Type Name Description nint scene Pointer to the unmanaged scene data structure. | Edit this page View Source ReleasePropertyStore(nint) Deletes a property store. Declaration public void ReleasePropertyStore(nint propertyStore) Parameters Type Name Description nint propertyStore Pointer to property store | Edit this page View Source SetImportPropertyFloat(nint, string, float) Sets a float property value. Declaration public void SetImportPropertyFloat(nint propertyStore, string name, float value) Parameters Type Name Description nint propertyStore Pointer to property store string name Property name float value Property value | Edit this page View Source SetImportPropertyInteger(nint, string, int) Sets an integer property value. Declaration public void SetImportPropertyInteger(nint propertyStore, string name, int value) Parameters Type Name Description nint propertyStore Pointer to property store string name Property name int value Property value | Edit this page View Source SetImportPropertyMatrix(nint, string, Matrix4x4) Sets a matrix property value. Declaration public void SetImportPropertyMatrix(nint propertyStore, string name, Matrix4x4 value) Parameters Type Name Description nint propertyStore Pointer to property store string name Property name Matrix4x4 value Property value | Edit this page View Source SetImportPropertyString(nint, string, string) Sets a string property value. Declaration public void SetImportPropertyString(nint propertyStore, string name, string value) Parameters Type Name Description nint propertyStore Pointer to property store string name Property name string value Property value"
  },
  "api/SharpAssimp.Unmanaged.Platform.html": {
    "href": "api/SharpAssimp.Unmanaged.Platform.html",
    "title": "Enum Platform",
    "summary": "Enum Platform Enumerates supported platforms. Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public enum Platform Fields Name Description Linux Linux platform. Mac Mac platform. Windows Windows platform."
  },
  "api/SharpAssimp.Unmanaged.UnmanagedFunctionNameAttribute.html": {
    "href": "api/SharpAssimp.Unmanaged.UnmanagedFunctionNameAttribute.html",
    "title": "Class UnmanagedFunctionNameAttribute",
    "summary": "Class UnmanagedFunctionNameAttribute An attribute that represents the name of an unmanaged function to import. Inheritance object Attribute UnmanagedFunctionNameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax [AttributeUsage(AttributeTargets.Delegate)] public class UnmanagedFunctionNameAttribute : Attribute Constructors | Edit this page View Source UnmanagedFunctionNameAttribute(string) Constructs a new UnmanagedFunctionName. Declaration public UnmanagedFunctionNameAttribute(string unmanagedFunctionName) Parameters Type Name Description string unmanagedFunctionName Name of the function. Properties | Edit this page View Source UnmanagedFunctionName Name of the unmanaged function. Declaration public string UnmanagedFunctionName { get; } Property Value Type Description string"
  },
  "api/SharpAssimp.Unmanaged.UnmanagedLibrary.html": {
    "href": "api/SharpAssimp.Unmanaged.UnmanagedLibrary.html",
    "title": "Class UnmanagedLibrary",
    "summary": "Class UnmanagedLibrary Represents management and access to an unmanaged library. An unmanaged library can be loaded and unloaded dynamically. The library then searches for a list of exported functions to create managed delegates for, allowing callers to access the library. Each OS platform has its own implementation to determine how to load unmanaged libraries. Inheritance object UnmanagedLibrary AssimpLibrary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public abstract class UnmanagedLibrary Constructors | Edit this page View Source UnmanagedLibrary(string, Type[]) Constructs a new UnmanagedLibrary. Declaration protected UnmanagedLibrary(string defaultName, Type[] unmanagedFunctionDelegateTypes) Parameters Type Name Description string defaultName Default name (NOT path) of the unmanaged library. Type[] unmanagedFunctionDelegateTypes Delegate types to instantiate and load. Properties | Edit this page View Source DefaultLibraryName Gets the default name of the unmanaged library DLL. This is dependent based on the platform extension and name prefix. Additional names can be set in the UnmanagedLibraryResolver (e.g. to load versioned DLLs) Declaration public string DefaultLibraryName { get; } Property Value Type Description string | Edit this page View Source Is64Bit Queries if the OS is 64-bit, if false then it is 32-bit. Declaration public static bool Is64Bit { get; } Property Value Type Description bool | Edit this page View Source IsLibraryLoaded Queries if the unmanaged library has been loaded or not. Declaration public bool IsLibraryLoaded { get; } Property Value Type Description bool | Edit this page View Source LibraryPath Gets the path to the unmanaged library DLL that is currently loaded. Declaration public string LibraryPath { get; } Property Value Type Description string | Edit this page View Source Resolver Gets the resolver used to find the unmanaged library DLL when loading. Declaration public UnmanagedLibraryResolver Resolver { get; } Property Value Type Description UnmanagedLibraryResolver | Edit this page View Source ThrowOnLoadFailure Gets or sets whether an AssimpException is thrown if the unmanaged DLL fails to load for whatever reason. By default this is true. Declaration public bool ThrowOnLoadFailure { get; set; } Property Value Type Description bool Methods | Edit this page View Source FreeLibrary() Frees the unmanaged library that is currently loaded. Declaration public bool FreeLibrary() Returns Type Description bool True if the library was sucessfully freed. | Edit this page View Source GetFunction<T>(string) Gets a delegate based on the unmanaged function name. Declaration public T GetFunction<T>(string funcName) where T : class Parameters Type Name Description string funcName Name of unmanaged function that is exported by the library. Returns Type Description T The delegate, or null if not found. Type Parameters Name Description T Type of delegate. | Edit this page View Source GetPlatform() Gets an enum representing the current OS that is application is executing on. Declaration public static Platform GetPlatform() Returns Type Description Platform Platform enumeration. | Edit this page View Source LoadIfNotLoaded() If library is not explicitly loaded by user, call this when trying to call an unmanaged function to load the unmanaged library from the default path. This function is thread safe. Declaration protected void LoadIfNotLoaded() | Edit this page View Source LoadLibrary() Loads the unmanaged library using the UnmanagedLibraryResolver. Declaration public bool LoadLibrary() Returns Type Description bool True if the library was found and successfully loaded. | Edit this page View Source LoadLibrary(string) Loads the unmanaged library using the supplied path. Declaration public bool LoadLibrary(string libPath) Parameters Type Name Description string libPath Path to the unmanaged DLL. Returns Type Description bool True if the library was found and successfully loaded. | Edit this page View Source LoadLibrary(string, string) Loads the unmanaged library using the supplied 32 and 64 bit paths, the one chosen is based on the OS bitness. Declaration public bool LoadLibrary(string lib32Path, string lib64Path) Parameters Type Name Description string lib32Path Path to the 32-bit DLL string lib64Path Path to the 64-bit DLL Returns Type Description bool True if the library was found and successfully loaded. | Edit this page View Source OnLibraryFreed() Called when the library is freed. Declaration protected virtual void OnLibraryFreed() | Edit this page View Source OnLibraryLoaded() Called when the library is loaded. Declaration protected virtual void OnLibraryLoaded() Events | Edit this page View Source LibraryFreed Occurs when the unmanaged library is freed. Declaration public event EventHandler? LibraryFreed Event Type Type Description EventHandler | Edit this page View Source LibraryLoaded Occurs when the unmanaged library is loaded. Declaration public event EventHandler? LibraryLoaded Event Type Type Description EventHandler"
  },
  "api/SharpAssimp.Unmanaged.UnmanagedLibraryResolver.html": {
    "href": "api/SharpAssimp.Unmanaged.UnmanagedLibraryResolver.html",
    "title": "Class UnmanagedLibraryResolver",
    "summary": "Class UnmanagedLibraryResolver Resolves unmanaged DLLs for UnmanagedLibrary. The process is completely configurable, where the user can supply alternative library names (e.g. versioned libs), an override library name, and probing paths. These can be set for both 32/64 bit, or seperately for 32 or 64 bit. See ResolveLibraryPath(string) for the search strategy. Inheritance object UnmanagedLibraryResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: SharpAssimp.Unmanaged Assembly: SharpAssimp.dll Syntax public sealed class UnmanagedLibraryResolver Properties | Edit this page View Source Platform Gets the platform that the application is running on. Declaration public Platform Platform { get; } Property Value Type Description Platform Methods | Edit this page View Source ResolveLibraryPath(string) Given a library name, this function attempts to resolve the file path from which it can be loaded. Each step of the search strategy uses the fallback library names if the given name was not found in the current step. If the search is unsuccessfully, the library name is returned which means the OS will try and do its own search strategy when attempting to load the library (this is dependent on the OS). The search strategy is the following, in order of execution: Search user-specified probing paths. Search {AppBaseDirectory}/runtimes/{RID}/native/. Search {AppBaseDirectory}/. Search nuget package path, e.g. {UserProfile}/.nuget/packages/{PackageId}/{PackageVersion}/runtimes/{RID}/native/. The search strategy gives priority to user-specified probing paths, then local paths to the application, then finally examining the global nuget cache. The RID is the Runtime Identifier based on the platform/architecture, see also Microsoft's RID Catalog. Declaration public string ResolveLibraryPath(string libName) Parameters Type Name Description string libName Name of the library to attempt to resolve. Returns Type Description string Full file path to the library, or the file name if not found (e.g. \"libXYZ.so\"). | Edit this page View Source SetFallbackLibraryNames(params string[]) Sets the collection of fallback library names (e.g. versioned libs) for both 32-bit and 64-bit probing. Declaration public void SetFallbackLibraryNames(params string[] fallbackLibNames) Parameters Type Name Description string[] fallbackLibNames Null to clear, or set of fallback library names. | Edit this page View Source SetFallbackLibraryNames32(params string[]) Sets the collection of fallback library names (e.g. versioned libs) for 32-bit probing. Declaration public void SetFallbackLibraryNames32(params string[] fallbackLibNames) Parameters Type Name Description string[] fallbackLibNames Null to clear, or set of fallback library names. | Edit this page View Source SetFallbackLibraryNames64(params string[]) Sets the collection of fallback library names (e.g. versioned libs) for 64-bit probing. Declaration public void SetFallbackLibraryNames64(params string[] fallbackLibNames) Parameters Type Name Description string[] fallbackLibNames Null to clear, or set of fallback library names. | Edit this page View Source SetOverrideLibraryName(string) Sets an override 32-bit and 64-bit library name. By default, the UnmanagedLibrary implementations creates a default name for the library, which is passed into ResolveLibraryPath(string) for resolving. If the override is non-null, it will be used instead. This is useful if the library to be loaded is not conforming to the platform's default prefix/extension scheme (e.g. libXYZ.so on linux where \"lib\" is the prefix and \".so\" the extension). Declaration public void SetOverrideLibraryName(string overrideName) Parameters Type Name Description string overrideName Null to clear, or override library name. | Edit this page View Source SetOverrideLibraryName32(string) Sets an override 32-bit library name. By default, the UnmanagedLibrary implementations creates a default name for the library, which is passed into ResolveLibraryPath(string) for resolving. If the override is non-null, it will be used instead. This is useful if the library to be loaded is not conforming to the platform's default prefix/extension scheme (e.g. libXYZ.so on linux where \"lib\" is the prefix and \".so\" the extension). Declaration public void SetOverrideLibraryName32(string overrideName) Parameters Type Name Description string overrideName Null to clear, or override library name. | Edit this page View Source SetOverrideLibraryName64(string) Sets an override 64-bit library name. By default, the UnmanagedLibrary implementations creates a default name for the library, which is passed into ResolveLibraryPath(string) for resolving. If the override is non-null, it will be used instead. This is useful if the library to be loaded is not conforming to the platform's default prefix/extension scheme (e.g. libXYZ.so on linux where \"lib\" is the prefix and \".so\" the extension). Declaration public void SetOverrideLibraryName64(string overrideName) Parameters Type Name Description string overrideName Null to clear, or override library name. | Edit this page View Source SetProbingPaths(params string[]) Sets the collection of file paths to probe for both 32-bit and 64-bit libraries. These paths always are first to be searched, in the order that they are given. Declaration public void SetProbingPaths(params string[] probingPaths) Parameters Type Name Description string[] probingPaths Null to clear, or set of paths to probe. | Edit this page View Source SetProbingPaths32(params string[]) Sets the collection of file paths to probe for 32-bit libraries. These paths always are first to be searched, in the order that they are given. Declaration public void SetProbingPaths32(params string[] probingPaths) Parameters Type Name Description string[] probingPaths Null to clear, or set of paths to probe. | Edit this page View Source SetProbingPaths64(params string[]) Sets the collection of file paths to probe for 64-bit libraries. These paths always are first to be searched, in the order that they are given. Declaration public void SetProbingPaths64(params string[] probingPaths) Parameters Type Name Description string[] probingPaths Null to clear, or set of paths to probe."
  },
  "api/SharpAssimp.Unmanaged.html": {
    "href": "api/SharpAssimp.Unmanaged.html",
    "title": "Namespace SharpAssimp.Unmanaged",
    "summary": "Namespace SharpAssimp.Unmanaged Classes AiConfigs Defines configurable properties for importing models. All properties have default values. Setting config properties are done via the SetProperty* methods in AssimpMethods. AiDefines Static class that has a number of constants that are found in Assimp. These can be limits to configuration property default values. The constants are grouped according to their usage or where they're found in the Assimp include files. AiMatKeys Static class containing material key constants. A fully qualified mat key name here means that it's a string that combines the mat key (base) name, its texture type semantic, and its texture index into a single string delimited by commas. For non-texture material properties, the texture type semantic and texture index are always zero. AssimpLibrary Singleton that governs access to the unmanaged Assimp library functions. UnmanagedFunctionNameAttribute An attribute that represents the name of an unmanaged function to import. UnmanagedLibrary Represents management and access to an unmanaged library. An unmanaged library can be loaded and unloaded dynamically. The library then searches for a list of exported functions to create managed delegates for, allowing callers to access the library. Each OS platform has its own implementation to determine how to load unmanaged libraries. UnmanagedLibraryResolver Resolves unmanaged DLLs for UnmanagedLibrary. The process is completely configurable, where the user can supply alternative library names (e.g. versioned libs), an override library name, and probing paths. These can be set for both 32/64 bit, or seperately for 32 or 64 bit. See ResolveLibraryPath(string) for the search strategy. Structs AiAnimMesh Represents an aiAnimMesh struct. Note: This structure requires marshaling, due to the array of IntPtrs. AiAnimation Represents an aiAnimation struct. AiBone Represents an aiBone struct. AiCamera Represents an aiCamera struct. AiExportDataBlob Describes a blob of exported scene data. Blobs can be nested, the first blob always has an empty name. Nested blobs represent auxillary files produced by the exporter (e.g. material files) and are named accordingly. AiExportFormatDesc Describes a file format which Assimp can export to. AiFace Represents an aiFace struct. AiFile Contains callbacks to read and write to a file opened by a custom file system. AiFileIO Contains callbacks to implement a custom file system to open and close files. AiImporterDesc Describes a variety of information about an importer. AiLight Represents an aiLight struct. AiLogStream Represents a log stream, which receives all log messages and streams them somewhere. AiMaterial Represents an aiMaterial struct. AiMaterialProperty Represents an aiMaterialProperty struct. AiMemoryInfo Represents the memory requirements for the different components of an imported scene. All sizes in in bytes. AiMesh Represents an aiMesh struct. Note: This structure requires marshaling, due to the arrays of IntPtrs. AiMeshAnim Represents an aiMeshAnim struct. AiMeshColorArray Fixed length array for representing the color channels of a mesh. Length is equal to AI_MAX_NUMBER_OF_COLOR_SETS. AiMeshMorphAnim Represents an aiMeshMorphAnim struct. AiMeshMorphKey Represents an aiMeshMorphKey struct. AiMeshTextureCoordinateArray Fixed length array for representing the texture coordinate channels of a mesh. Length is equal to AI_MAX_NUMBER_OF_TEXTURECOORDS. AiMeshUVComponentArray Fixed length array for representing the number of UV components for each texture coordinate channel of a mesh. Length is equal to AI_MAX_NUMBER_OF_TEXTURECOORDS. AiMetadata Represents an aiMetadata struct. AiMetadataEntry Represents an aiMetadataEntry struct. AiNode Represents an aiNode struct. AiNodeAnim Represents an aiNodeAnim struct. AiScene Represents an aiScene struct. AiString Represents an aiString struct. AiTexture Represents an aiTexture struct. Enums Platform Enumerates supported platforms. Delegates AiFileCloseProc Callback delegate for a custom file system, to close a given file and free its memory. AiFileFlushProc Callback delegate for a custom file system, to flush the contents of the file to the disk. AiFileOpenProc Callback delegate for a custom file system, to open a given file and create a new AiFile instance. AiFileReadProc Callback delegate for a custom file system, to read from a file. AiFileSeek Callback delegate for a custom file system, to set the current position of the file cursor. AiFileTellProc Callback delegate for a custom file system, to tell offset/size information about the file. AiFileWriteProc Callback delegate for a custom file system, to write to a file. AiLogStreamCallback Callback delegate for Assimp's LogStream."
  },
  "api/SharpAssimp.VectorKey.html": {
    "href": "api/SharpAssimp.VectorKey.html",
    "title": "Struct VectorKey",
    "summary": "Struct VectorKey Time-value pair specifying a 3D vector for a given time. Implements IEquatable<VectorKey> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct VectorKey : IEquatable<VectorKey> Constructors | Edit this page View Source VectorKey(double, Vector3, AnimationInterpolation) Time-value pair specifying a 3D vector for a given time. Declaration public VectorKey(double Time, Vector3 Value, AnimationInterpolation Interpolation = AnimationInterpolation.Linear) Parameters Type Name Description double Time The time of this key. Vector3 Value The 3D vector value of this key. AnimationInterpolation Interpolation The interpolation setting of this key. Properties | Edit this page View Source Interpolation The interpolation setting of this key. Declaration public AnimationInterpolation Interpolation { readonly get; set; } Property Value Type Description AnimationInterpolation | Edit this page View Source Time The time of this key. Declaration public double Time { readonly get; set; } Property Value Type Description double | Edit this page View Source Value The 3D vector value of this key. Declaration public Vector3 Value { readonly get; set; } Property Value Type Description Vector3 Methods | Edit this page View Source Equals(VectorKey) Tests equality between this key and another. Declaration public bool Equals(VectorKey key) Parameters Type Name Description VectorKey key Other key to test Returns Type Description bool True if their 3D vectors are equal. | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator >(VectorKey, VectorKey) Tests inequality between two keys. Declaration public static bool operator >(VectorKey a, VectorKey b) Parameters Type Name Description VectorKey a The first key VectorKey b The second key Returns Type Description bool True if the first key's time is greater than the second key's. | Edit this page View Source operator <(VectorKey, VectorKey) Tests inequality between two keys. Declaration public static bool operator <(VectorKey a, VectorKey b) Parameters Type Name Description VectorKey a The first key VectorKey b The second key Returns Type Description bool True if the first key's time is less than the second key's. Implements IEquatable<T>"
  },
  "api/SharpAssimp.VertexWeight.html": {
    "href": "api/SharpAssimp.VertexWeight.html",
    "title": "Struct VertexWeight",
    "summary": "Struct VertexWeight Represents a single influence of a bone on a vertex. Implements IEquatable<VertexWeight> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: SharpAssimp Assembly: SharpAssimp.dll Syntax public record struct VertexWeight : IEquatable<VertexWeight> Constructors | Edit this page View Source VertexWeight(int, float) Represents a single influence of a bone on a vertex. Declaration public VertexWeight(int VertexID, float Weight) Parameters Type Name Description int VertexID Index of the vertex which is influenced by the bone. float Weight Strength of the influence in range of (0...1). All influences from all bones at one vertex amounts to 1. Properties | Edit this page View Source VertexID Index of the vertex which is influenced by the bone. Declaration public int VertexID { readonly get; set; } Property Value Type Description int | Edit this page View Source Weight Strength of the influence in range of (0...1). All influences from all bones at one vertex amounts to 1. Declaration public float Weight { readonly get; set; } Property Value Type Description float Implements IEquatable<T>"
  },
  "api/SharpAssimp.html": {
    "href": "api/SharpAssimp.html",
    "title": "Namespace SharpAssimp",
    "summary": "Namespace SharpAssimp Classes Animation An animation consists of keyframe data for a number of nodes. For each node affected by the animation, a separate series of data is given. AssimpContext Represents an Assimp Import/Export context that load or save models using the unmanaged library. Additionally, conversion functionality is offered to bypass loading model data into managed memory. AssimpException AssimpNet general exception. Bone Represents a single bone of a mesh. A bone has a name which allows it to be found in the frame hierarchy and by which it can be addressed by animations. In addition it has a number of influences on vertices and a matrix relating the mesh position to the position of the bone at the time of binding. Camera Describes a right-handed camera in the scene. An important aspect is that the camera itself is also part of the scenegraph, meaning any values such as the direction vector are not absolute, they can be relative to the coordinate system defined by the node which corresponds to the camera. This allows for camera animations. ConsoleLogStream Log stream that writes messages to the Console. EmbeddedTexture Represents an embedded texture. Some file formats directly embed texture assets. Embedded textures may be uncompressed, where the data is given in an uncompressed format. Or it may be compressed in a format like png or jpg. In the latter case, the raw file bytes are given so the application must utilize an image decoder (e.g. DevIL) to get access to the actual color data. This object represents both types, so some properties may or may not be valid depending if it is compressed or not. ExportDataBlob Describes a blob of exported scene data. Blobs can be nested - each blob may reference another blob, which in turn can reference another and so on. This is used to allow exporters to write more than one output for a given scene, such as material files. Existence of such files depends on the format. ExportFormatDescription Describes a file format which Assimp can export to. Face A single face in a mesh, referring to multiple vertices. This can be a triangle if the index count is equal to three, or a polygon if the count is greater than three. Since multiple primitive types can be contained in a single mesh, this approach allows you to better examine how the mesh is constructed. If you use the SortByPrimitiveType post process step flag during import, then each mesh will be homogenous where primitive type is concerned. FileIOSystem Simple implementation of an IOSystem that searches for files on the disk. This implementation can be given a number of search directories that it will attempt to locate the file in first, before using the file path given by Assimp. That way, you can load models that have files distributed in a number of other directories besides the root model's. IOStream Defines a stream to some file input or output source. This object is responsible for reading/writing data that is used by Assimp. IOSystem Defines a custom IO handler that can be registered to an importer that will handle I/O for assimp. This includes searching/opening files to read during import, and creating/writing to files during export. ImporterDescription Metadata and feature support information for a given importer. Light Describes a light source in the scene. Assimp supports multiple light sources including spot, point, and directional lights. All are defined by a single structure and distinguished by their parameters. Lights have corresponding nodes in the scenegraph. Some file formats such as 3DS and ASE export a \"target point\", e.g. the point a spot light is looking at (it can even be animated). Assimp writes the target point as a subnode of a spotlight's main node called \"spotName.Target\". However, this is just additional information then, the transform tracks of the main node make the spot light already point in the right direction. LogStream Represents a log stream, which receives all log messages and streams them somewhere. Material A material contains all the information that describes how to render a mesh. E.g. textures, colors, and render states. Internally all this information is stored as key-value pair properties. The class contains many convienence methods and properties for accessing non-texture/texture properties without having to know the Assimp material key names. Not all properties may be present, and if they aren't a default value will be returned. Material.PBRMaterialProperties Groups all PBR workflow properties into a single accessor. Material.ShaderMaterialProperties Groups all the properties for shader sources in a single accessor. MaterialProperty A key-value pairing that represents some material property. MemoryHelper Helper static class containing functions that aid dealing with unmanaged memory to managed memory conversions. Mesh A mesh represents geometry with a single material. MeshAnimationAttachment A mesh attachment store per-vertex animations for a particular frame. You may think of this as a 'patch' for the host mesh, since the mesh attachment replaces only certain vertex data streams at a particular time. Each mesh stores 'n' attached meshes. The actual relationship between the time line and mesh attachments is established by the mesh animation channel, which references singular mesh attachments by their ID and binds them to a time offset. MeshAnimationChannel Describes vertex-based animations for a single mesh or a group of meshes. Meshes carry the animation data for each frame. The purpose of this object is to define keyframes, linking each mesh attachment to a particular point in a time. MeshMorphAnimationChannel Describes morph-based keyframe animations for a single mesh or a group of meshes. MeshMorphKey Binds a morph animation mesh to a specific point in time. Metadata Represents a container for holding metadata, representing as key-value pairs. NativeCustomMarshalerAttribute Attribute for assocating a type with an INativeCustomMarshaler instance. Node A node in the imported model hierarchy. NodeAnimationChannel Describes the animation of a single node. The name specifies the bone/node which is affected by this animation chanenl. The keyframes are given in three separate seties of values, one for each position, rotation, and scaling. The transformation matrix is computed from these values and replaces the node's original transformation matrix at a specific time. This means all keys are absolute and not relative to the bone default pose. The order which the transformations are to be applied is scaling, rotation, and translation (SRT). Keys are in chronological order and duplicate keys do not pass the validation step. There most likely will be no negative time values, but they are not forbidden. NodeCollection A collection of child nodes owned by a parent node. Manages access to the collection while maintaing parent-child linkage. PostProcessPreset Static class containing preset properties for post processing options. Scene Represents a completely imported model or scene. Everything that was imported from the given file can be accessed from here. Once the scene is loaded from unmanaged memory, it resides solely in managed memory and Assimp's read only copy is released. Structs BoundingBox Represents an axis-aligned bounding box Matrix3x3 Represents a 3x3 matrix. Assimp docs say their matrices are always row-major, and it looks like they're only describing the memory layout. Matrices are treated as column vectors however (X base in the first column, Y base the second, and Z base the third) MeshKey Binds an anim mesh (referenced by an index) to a specific point in time. Metadata.Entry Represents an entry in a metadata container. QuaternionKey Time-value pair specifying a rotation for a given time. Ray Defines a 3D ray with a point of origin and a direction. Texel Represents a texel in ARGB8888 format. TextureSlot Describes all the values pertaining to a particular texture slot in a material. UVTransform Defines how an UV channel is transformed. VectorKey Time-value pair specifying a 3D vector for a given time. VertexWeight Represents a single influence of a bone on a vertex. Interfaces IMarshalable<Managed, Native> Represents an object that can be marshaled to and from a native representation. INativeCustomMarshaler Custom marshaler for usage with the MemoryHelper for performing marshaling to-and-from unmanaged memory for non-blittable types. A type must be attributed with NativeCustomMarshalerAttribute to automatically have an instance of its marshaler be utilized. Enums AnimationBehaviour Defines an animation channel behaves outside the defined time range. This corresponds to the prestate and poststates of the animation node. AnimationInterpolation Defines the type of interpolation to use. BlendMode Defines alpha blending flags, how the final color value of a pixel is computed, based on the following equation: sourceColor * sourceBlend + destColor * destBlend Where the destColor is the previous color in the frame buffer and sourceColor is the material color before the transparency calculation. This corresponds to the AI_MATKEY_BLEND_FUNC property. CompileFlags Enumerates how the native Assimp DLL was compiled DefaultLogStream Enumerates predefined log streaming destinations. ExcludeComponent Enumerates components of the scene or mesh data that can be excluded from the import using the post process step RemoveComponent. FileIOMode Defines the desired file I/O mode is when opening a new file. ImporterFeatureFlags Defines flags that indicate level of support for common features for a given importer. LightSourceType Enumerates all supported light sources. MeshMorphingMethod Defines the methods of mesh morphing supported. MetaDataType Enumerates metadata data types. Origin Seek origins for Assimp's virtual file system API. PostProcessSteps Post processing flag options, specifying a number of steps that can be run on the data to either generate additional vertex data or optimize the imported data. PrimitiveType Enumerates geometric primitive types. PropertyType Defines material property types. ReturnCode Enumerates Assimp function result codes. SceneFlags Defines the state of the imported scene data structure. ShadingMode Defines all shading models supported by the library. The list of shading modes has been taken from Blender. See Blender documentation for more information. TextureFlags Defines some mixed flags for a particular texture. This corresponds to the AI_MAT_KEY_TEXFLAGS property. TextureMapping Defines how texture coordinates are generated Real-time applications typically require full UV coordinates. So the use of GenerateUVCoords step is highly recommended. It generates proper UV channels for non-UV mapped objects, as long as an accurate description of how the mapping should look like is given. TextureOperation Defines how the Nth texture of a specific type is combined with the result of all previous layers. Example (left: key, right: value): DiffColor0 - gray DiffTextureOp0 - TextureOperation.Multiply DiffTexture0 - tex1.png DiffTextureOp0 - TextureOperation.Add DiffTexture1 - tex2.png Written as an equation, the final diffuse term for a specific pixel would be: diffFinal = DiffColor0 * sampleTex(DiffTexture0, UV0) + sampleTex(DiffTexture1, UV0) * diffContrib; TextureType Defines the purpose of a texture. TextureWrapMode Defines how UV coordinates outside the [0..1] range are handled. Commonly referred to as the 'wrapping mode' UVTransformFlags Defines how UV coordinates should be transformed. Delegates FreeNativeDelegate Delegate for performing unmanaged memory cleanup. LoggingCallback Callback delegate for Assimp's LogStream."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SharpAssimp",
    "summary": "SharpAssimp This is the documentation for SharpAssimp."
  },
  "index.html": {
    "href": "index.html",
    "title": "SharpAssimp",
    "summary": "SharpAssimp SharpAssimp is a maintained, modern fork of AssimpNet and AssimpNetter, the cross-platform .NET wrapper for the Open Asset Import Library (otherwise known as Assimp), which is a 3D model import-export library. The primary motivation is for this library to power (offline) content pipelines to import and process 3D models into your game engine's internal format, although the wrapper can be used at runtime to enable your users to import custom content. Please see the Assimp website for a full list of supported formats and features. Each version of the managed wrapper tries to maintain parity with the features of the native version."
  }
}